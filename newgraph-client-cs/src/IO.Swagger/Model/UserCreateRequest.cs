/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserCreateRequest
    /// </summary>
    [DataContract]
    public partial class UserCreateRequest :  IEquatable<UserCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCreateRequest" /> class.
        /// </summary>
        /// <param name="newcoinTicker">newcoinTicker.</param>
        /// <param name="youtube">youtube.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="consentPrivacyPolicy">consentPrivacyPolicy.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="description">description.</param>
        /// <param name="tumblr">tumblr.</param>
        /// <param name="instagram">instagram.</param>
        /// <param name="medium">medium.</param>
        /// <param name="soundcloud">soundcloud.</param>
        /// <param name="snapchat">snapchat.</param>
        /// <param name="apple">apple.</param>
        /// <param name="consentTestgroup">consentTestgroup.</param>
        /// <param name="twitter">twitter.</param>
        /// <param name="legacyToken">legacyToken.</param>
        /// <param name="tiktok">tiktok.</param>
        /// <param name="reddit">reddit.</param>
        /// <param name="signal">signal.</param>
        /// <param name="email">email.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="website">website.</param>
        /// <param name="spotify">spotify.</param>
        /// <param name="facebook">facebook.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="telegram">telegram.</param>
        /// <param name="pinterest">pinterest.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="discord">discord.</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="consentEmail">consentEmail.</param>
        /// <param name="username">username.</param>
        public UserCreateRequest(string newcoinTicker = default(string), string youtube = default(string), string lastName = default(string), string consentPrivacyPolicy = default(string), string displayName = default(string), decimal? latitude = default(decimal?), string description = default(string), string tumblr = default(string), string instagram = default(string), string medium = default(string), string soundcloud = default(string), string snapchat = default(string), string apple = default(string), string consentTestgroup = default(string), string twitter = default(string), string legacyToken = default(string), string tiktok = default(string), string reddit = default(string), string signal = default(string), string email = default(string), decimal? longitude = default(decimal?), string website = default(string), string spotify = default(string), string facebook = default(string), string fullName = default(string), string telegram = default(string), string pinterest = default(string), string firstName = default(string), string discord = default(string), string phone = default(string), string consentEmail = default(string), string username = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for UserCreateRequest and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            this.NewcoinTicker = newcoinTicker;
            this.Youtube = youtube;
            this.LastName = lastName;
            this.ConsentPrivacyPolicy = consentPrivacyPolicy;
            this.DisplayName = displayName;
            this.Latitude = latitude;
            this.Description = description;
            this.Tumblr = tumblr;
            this.Instagram = instagram;
            this.Medium = medium;
            this.Soundcloud = soundcloud;
            this.Snapchat = snapchat;
            this.Apple = apple;
            this.ConsentTestgroup = consentTestgroup;
            this.Twitter = twitter;
            this.LegacyToken = legacyToken;
            this.Tiktok = tiktok;
            this.Reddit = reddit;
            this.Signal = signal;
            this.Email = email;
            this.Longitude = longitude;
            this.Website = website;
            this.Spotify = spotify;
            this.Facebook = facebook;
            this.FullName = fullName;
            this.Telegram = telegram;
            this.Pinterest = pinterest;
            this.FirstName = firstName;
            this.Discord = discord;
            this.ConsentEmail = consentEmail;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets NewcoinTicker
        /// </summary>
        [DataMember(Name="newcoinTicker", EmitDefaultValue=false)]
        public string NewcoinTicker { get; set; }

        /// <summary>
        /// Gets or Sets Youtube
        /// </summary>
        [DataMember(Name="youtube", EmitDefaultValue=false)]
        public string Youtube { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets ConsentPrivacyPolicy
        /// </summary>
        [DataMember(Name="consentPrivacyPolicy", EmitDefaultValue=false)]
        public string ConsentPrivacyPolicy { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tumblr
        /// </summary>
        [DataMember(Name="tumblr", EmitDefaultValue=false)]
        public string Tumblr { get; set; }

        /// <summary>
        /// Gets or Sets Instagram
        /// </summary>
        [DataMember(Name="instagram", EmitDefaultValue=false)]
        public string Instagram { get; set; }

        /// <summary>
        /// Gets or Sets Medium
        /// </summary>
        [DataMember(Name="medium", EmitDefaultValue=false)]
        public string Medium { get; set; }

        /// <summary>
        /// Gets or Sets Soundcloud
        /// </summary>
        [DataMember(Name="soundcloud", EmitDefaultValue=false)]
        public string Soundcloud { get; set; }

        /// <summary>
        /// Gets or Sets Snapchat
        /// </summary>
        [DataMember(Name="snapchat", EmitDefaultValue=false)]
        public string Snapchat { get; set; }

        /// <summary>
        /// Gets or Sets Apple
        /// </summary>
        [DataMember(Name="apple", EmitDefaultValue=false)]
        public string Apple { get; set; }

        /// <summary>
        /// Gets or Sets ConsentTestgroup
        /// </summary>
        [DataMember(Name="consentTestgroup", EmitDefaultValue=false)]
        public string ConsentTestgroup { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [DataMember(Name="twitter", EmitDefaultValue=false)]
        public string Twitter { get; set; }

        /// <summary>
        /// Gets or Sets LegacyToken
        /// </summary>
        [DataMember(Name="legacyToken", EmitDefaultValue=false)]
        public string LegacyToken { get; set; }

        /// <summary>
        /// Gets or Sets Tiktok
        /// </summary>
        [DataMember(Name="tiktok", EmitDefaultValue=false)]
        public string Tiktok { get; set; }

        /// <summary>
        /// Gets or Sets Reddit
        /// </summary>
        [DataMember(Name="reddit", EmitDefaultValue=false)]
        public string Reddit { get; set; }

        /// <summary>
        /// Gets or Sets Signal
        /// </summary>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public string Signal { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Spotify
        /// </summary>
        [DataMember(Name="spotify", EmitDefaultValue=false)]
        public string Spotify { get; set; }

        /// <summary>
        /// Gets or Sets Facebook
        /// </summary>
        [DataMember(Name="facebook", EmitDefaultValue=false)]
        public string Facebook { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Telegram
        /// </summary>
        [DataMember(Name="telegram", EmitDefaultValue=false)]
        public string Telegram { get; set; }

        /// <summary>
        /// Gets or Sets Pinterest
        /// </summary>
        [DataMember(Name="pinterest", EmitDefaultValue=false)]
        public string Pinterest { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Discord
        /// </summary>
        [DataMember(Name="discord", EmitDefaultValue=false)]
        public string Discord { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets ConsentEmail
        /// </summary>
        [DataMember(Name="consentEmail", EmitDefaultValue=false)]
        public string ConsentEmail { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCreateRequest {\n");
            sb.Append("  NewcoinTicker: ").Append(NewcoinTicker).Append("\n");
            sb.Append("  Youtube: ").Append(Youtube).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ConsentPrivacyPolicy: ").Append(ConsentPrivacyPolicy).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tumblr: ").Append(Tumblr).Append("\n");
            sb.Append("  Instagram: ").Append(Instagram).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Soundcloud: ").Append(Soundcloud).Append("\n");
            sb.Append("  Snapchat: ").Append(Snapchat).Append("\n");
            sb.Append("  Apple: ").Append(Apple).Append("\n");
            sb.Append("  ConsentTestgroup: ").Append(ConsentTestgroup).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  LegacyToken: ").Append(LegacyToken).Append("\n");
            sb.Append("  Tiktok: ").Append(Tiktok).Append("\n");
            sb.Append("  Reddit: ").Append(Reddit).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Spotify: ").Append(Spotify).Append("\n");
            sb.Append("  Facebook: ").Append(Facebook).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Telegram: ").Append(Telegram).Append("\n");
            sb.Append("  Pinterest: ").Append(Pinterest).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Discord: ").Append(Discord).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  ConsentEmail: ").Append(ConsentEmail).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserCreateRequest);
        }

        /// <summary>
        /// Returns true if UserCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewcoinTicker == input.NewcoinTicker ||
                    (this.NewcoinTicker != null &&
                    this.NewcoinTicker.Equals(input.NewcoinTicker))
                ) && 
                (
                    this.Youtube == input.Youtube ||
                    (this.Youtube != null &&
                    this.Youtube.Equals(input.Youtube))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.ConsentPrivacyPolicy == input.ConsentPrivacyPolicy ||
                    (this.ConsentPrivacyPolicy != null &&
                    this.ConsentPrivacyPolicy.Equals(input.ConsentPrivacyPolicy))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Tumblr == input.Tumblr ||
                    (this.Tumblr != null &&
                    this.Tumblr.Equals(input.Tumblr))
                ) && 
                (
                    this.Instagram == input.Instagram ||
                    (this.Instagram != null &&
                    this.Instagram.Equals(input.Instagram))
                ) && 
                (
                    this.Medium == input.Medium ||
                    (this.Medium != null &&
                    this.Medium.Equals(input.Medium))
                ) && 
                (
                    this.Soundcloud == input.Soundcloud ||
                    (this.Soundcloud != null &&
                    this.Soundcloud.Equals(input.Soundcloud))
                ) && 
                (
                    this.Snapchat == input.Snapchat ||
                    (this.Snapchat != null &&
                    this.Snapchat.Equals(input.Snapchat))
                ) && 
                (
                    this.Apple == input.Apple ||
                    (this.Apple != null &&
                    this.Apple.Equals(input.Apple))
                ) && 
                (
                    this.ConsentTestgroup == input.ConsentTestgroup ||
                    (this.ConsentTestgroup != null &&
                    this.ConsentTestgroup.Equals(input.ConsentTestgroup))
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    (this.Twitter != null &&
                    this.Twitter.Equals(input.Twitter))
                ) && 
                (
                    this.LegacyToken == input.LegacyToken ||
                    (this.LegacyToken != null &&
                    this.LegacyToken.Equals(input.LegacyToken))
                ) && 
                (
                    this.Tiktok == input.Tiktok ||
                    (this.Tiktok != null &&
                    this.Tiktok.Equals(input.Tiktok))
                ) && 
                (
                    this.Reddit == input.Reddit ||
                    (this.Reddit != null &&
                    this.Reddit.Equals(input.Reddit))
                ) && 
                (
                    this.Signal == input.Signal ||
                    (this.Signal != null &&
                    this.Signal.Equals(input.Signal))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Spotify == input.Spotify ||
                    (this.Spotify != null &&
                    this.Spotify.Equals(input.Spotify))
                ) && 
                (
                    this.Facebook == input.Facebook ||
                    (this.Facebook != null &&
                    this.Facebook.Equals(input.Facebook))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Telegram == input.Telegram ||
                    (this.Telegram != null &&
                    this.Telegram.Equals(input.Telegram))
                ) && 
                (
                    this.Pinterest == input.Pinterest ||
                    (this.Pinterest != null &&
                    this.Pinterest.Equals(input.Pinterest))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Discord == input.Discord ||
                    (this.Discord != null &&
                    this.Discord.Equals(input.Discord))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.ConsentEmail == input.ConsentEmail ||
                    (this.ConsentEmail != null &&
                    this.ConsentEmail.Equals(input.ConsentEmail))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewcoinTicker != null)
                    hashCode = hashCode * 59 + this.NewcoinTicker.GetHashCode();
                if (this.Youtube != null)
                    hashCode = hashCode * 59 + this.Youtube.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.ConsentPrivacyPolicy != null)
                    hashCode = hashCode * 59 + this.ConsentPrivacyPolicy.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Tumblr != null)
                    hashCode = hashCode * 59 + this.Tumblr.GetHashCode();
                if (this.Instagram != null)
                    hashCode = hashCode * 59 + this.Instagram.GetHashCode();
                if (this.Medium != null)
                    hashCode = hashCode * 59 + this.Medium.GetHashCode();
                if (this.Soundcloud != null)
                    hashCode = hashCode * 59 + this.Soundcloud.GetHashCode();
                if (this.Snapchat != null)
                    hashCode = hashCode * 59 + this.Snapchat.GetHashCode();
                if (this.Apple != null)
                    hashCode = hashCode * 59 + this.Apple.GetHashCode();
                if (this.ConsentTestgroup != null)
                    hashCode = hashCode * 59 + this.ConsentTestgroup.GetHashCode();
                if (this.Twitter != null)
                    hashCode = hashCode * 59 + this.Twitter.GetHashCode();
                if (this.LegacyToken != null)
                    hashCode = hashCode * 59 + this.LegacyToken.GetHashCode();
                if (this.Tiktok != null)
                    hashCode = hashCode * 59 + this.Tiktok.GetHashCode();
                if (this.Reddit != null)
                    hashCode = hashCode * 59 + this.Reddit.GetHashCode();
                if (this.Signal != null)
                    hashCode = hashCode * 59 + this.Signal.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Spotify != null)
                    hashCode = hashCode * 59 + this.Spotify.GetHashCode();
                if (this.Facebook != null)
                    hashCode = hashCode * 59 + this.Facebook.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Telegram != null)
                    hashCode = hashCode * 59 + this.Telegram.GetHashCode();
                if (this.Pinterest != null)
                    hashCode = hashCode * 59 + this.Pinterest.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Discord != null)
                    hashCode = hashCode * 59 + this.Discord.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.ConsentEmail != null)
                    hashCode = hashCode * 59 + this.ConsentEmail.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Username (string) pattern
            Regex regexUsername = new Regex(@"^[a-z0-5\\.]{2,9}\\.io$", RegexOptions.CultureInvariant);
            if (false == regexUsername.Match(this.Username).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, must match a pattern of " + regexUsername, new [] { "Username" });
            }

            yield break;
        }
    }

}
