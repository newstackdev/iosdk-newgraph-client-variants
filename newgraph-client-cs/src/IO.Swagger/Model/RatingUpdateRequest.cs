/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RatingUpdateRequest
    /// </summary>
    [DataContract]
    public partial class RatingUpdateRequest :  IEquatable<RatingUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RatingUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingUpdateRequest" /> class.
        /// </summary>
        /// <param name="targetId">targetId.</param>
        /// <param name="contextType">contextType.</param>
        /// <param name="contextValue">contextValue.</param>
        /// <param name="value">value (required).</param>
        public RatingUpdateRequest(string targetId = default(string), string contextType = default(string), string contextValue = default(string), decimal? value = default(decimal?))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for RatingUpdateRequest and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.TargetId = targetId;
            this.ContextType = contextType;
            this.ContextValue = contextValue;
        }
        
        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public string TargetId { get; set; }

        /// <summary>
        /// Gets or Sets ContextType
        /// </summary>
        [DataMember(Name="contextType", EmitDefaultValue=false)]
        public string ContextType { get; set; }

        /// <summary>
        /// Gets or Sets ContextValue
        /// </summary>
        [DataMember(Name="contextValue", EmitDefaultValue=false)]
        public string ContextValue { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RatingUpdateRequest {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  ContextType: ").Append(ContextType).Append("\n");
            sb.Append("  ContextValue: ").Append(ContextValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingUpdateRequest);
        }

        /// <summary>
        /// Returns true if RatingUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.ContextType == input.ContextType ||
                    (this.ContextType != null &&
                    this.ContextType.Equals(input.ContextType))
                ) && 
                (
                    this.ContextValue == input.ContextValue ||
                    (this.ContextValue != null &&
                    this.ContextValue.Equals(input.ContextValue))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.ContextType != null)
                    hashCode = hashCode * 59 + this.ContextType.GetHashCode();
                if (this.ContextValue != null)
                    hashCode = hashCode * 59 + this.ContextValue.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (decimal?) maximum
            if(this.Value > (decimal?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value less than or equal to 100.", new [] { "Value" });
            }

            // Value (decimal?) minimum
            if(this.Value < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must be a value greater than or equal to 0.", new [] { "Value" });
            }

            yield break;
        }
    }

}
