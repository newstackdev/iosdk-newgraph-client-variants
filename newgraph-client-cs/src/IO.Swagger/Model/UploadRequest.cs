/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UploadRequest
    /// </summary>
    [DataContract]
    public partial class UploadRequest :  IEquatable<UploadRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadRequest" /> class.
        /// </summary>
        /// <param name="filename">filename (required).</param>
        /// <param name="targetId">targetId (required).</param>
        /// <param name="targetModel">targetModel (required).</param>
        /// <param name="contentType">contentType (required).</param>
        public UploadRequest(string filename = default(string), string targetId = default(string), string targetModel = default(string), string contentType = default(string))
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for UploadRequest and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
            // to ensure "targetId" is required (not null)
            if (targetId == null)
            {
                throw new InvalidDataException("targetId is a required property for UploadRequest and cannot be null");
            }
            else
            {
                this.TargetId = targetId;
            }
            // to ensure "targetModel" is required (not null)
            if (targetModel == null)
            {
                throw new InvalidDataException("targetModel is a required property for UploadRequest and cannot be null");
            }
            else
            {
                this.TargetModel = targetModel;
            }
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for UploadRequest and cannot be null");
            }
            else
            {
                this.ContentType = contentType;
            }
        }
        
        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public string TargetId { get; set; }

        /// <summary>
        /// Gets or Sets TargetModel
        /// </summary>
        [DataMember(Name="targetModel", EmitDefaultValue=false)]
        public string TargetModel { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadRequest {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetModel: ").Append(TargetModel).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadRequest);
        }

        /// <summary>
        /// Returns true if UploadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetModel == input.TargetModel ||
                    (this.TargetModel != null &&
                    this.TargetModel.Equals(input.TargetModel))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.TargetModel != null)
                    hashCode = hashCode * 59 + this.TargetModel.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
