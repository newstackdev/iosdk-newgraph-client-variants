/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcAuthEthResponse
    /// </summary>
    [DataContract]
    public partial class BcAuthEthResponse :  IEquatable<BcAuthEthResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcAuthEthResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcAuthEthResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcAuthEthResponse" /> class.
        /// </summary>
        /// <param name="result">result (required).</param>
        /// <param name="signedAddr">signedAddr.</param>
        /// <param name="comment">comment.</param>
        /// <param name="owningAddr">owningAddr.</param>
        public BcAuthEthResponse(bool? result = default(bool?), string signedAddr = default(string), string comment = default(string), string owningAddr = default(string))
        {
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for BcAuthEthResponse and cannot be null");
            }
            else
            {
                this.Result = result;
            }
            this.SignedAddr = signedAddr;
            this.Comment = comment;
            this.OwningAddr = owningAddr;
        }
        
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public bool? Result { get; set; }

        /// <summary>
        /// Gets or Sets SignedAddr
        /// </summary>
        [DataMember(Name="signedAddr", EmitDefaultValue=false)]
        public string SignedAddr { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets OwningAddr
        /// </summary>
        [DataMember(Name="owningAddr", EmitDefaultValue=false)]
        public string OwningAddr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcAuthEthResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  SignedAddr: ").Append(SignedAddr).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  OwningAddr: ").Append(OwningAddr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcAuthEthResponse);
        }

        /// <summary>
        /// Returns true if BcAuthEthResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BcAuthEthResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcAuthEthResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.SignedAddr == input.SignedAddr ||
                    (this.SignedAddr != null &&
                    this.SignedAddr.Equals(input.SignedAddr))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.OwningAddr == input.OwningAddr ||
                    (this.OwningAddr != null &&
                    this.OwningAddr.Equals(input.OwningAddr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.SignedAddr != null)
                    hashCode = hashCode * 59 + this.SignedAddr.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.OwningAddr != null)
                    hashCode = hashCode * 59 + this.OwningAddr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
