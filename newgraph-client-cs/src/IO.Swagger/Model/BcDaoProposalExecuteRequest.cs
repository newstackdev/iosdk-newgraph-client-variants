/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcDaoProposalExecuteRequest
    /// </summary>
    [DataContract]
    public partial class BcDaoProposalExecuteRequest :  IEquatable<BcDaoProposalExecuteRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcDaoProposalExecuteRequest" /> class.
        /// </summary>
        /// <param name="proposalAuthor">proposalAuthor.</param>
        /// <param name="proposalId">proposalId.</param>
        /// <param name="daoId">daoId.</param>
        /// <param name="daoOwner">daoOwner.</param>
        /// <param name="exec">exec.</param>
        /// <param name="execPrvKey">execPrvKey.</param>
        public BcDaoProposalExecuteRequest(string proposalAuthor = default(string), decimal? proposalId = default(decimal?), string daoId = default(string), string daoOwner = default(string), string exec = default(string), string execPrvKey = default(string))
        {
            this.ProposalAuthor = proposalAuthor;
            this.ProposalId = proposalId;
            this.DaoId = daoId;
            this.DaoOwner = daoOwner;
            this.Exec = exec;
            this.ExecPrvKey = execPrvKey;
        }
        
        /// <summary>
        /// Gets or Sets ProposalAuthor
        /// </summary>
        [DataMember(Name="proposal_author", EmitDefaultValue=false)]
        public string ProposalAuthor { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="proposal_id", EmitDefaultValue=false)]
        public decimal? ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets DaoId
        /// </summary>
        [DataMember(Name="dao_id", EmitDefaultValue=false)]
        public string DaoId { get; set; }

        /// <summary>
        /// Gets or Sets DaoOwner
        /// </summary>
        [DataMember(Name="dao_owner", EmitDefaultValue=false)]
        public string DaoOwner { get; set; }

        /// <summary>
        /// Gets or Sets Exec
        /// </summary>
        [DataMember(Name="exec", EmitDefaultValue=false)]
        public string Exec { get; set; }

        /// <summary>
        /// Gets or Sets ExecPrvKey
        /// </summary>
        [DataMember(Name="exec_prv_key", EmitDefaultValue=false)]
        public string ExecPrvKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcDaoProposalExecuteRequest {\n");
            sb.Append("  ProposalAuthor: ").Append(ProposalAuthor).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  DaoId: ").Append(DaoId).Append("\n");
            sb.Append("  DaoOwner: ").Append(DaoOwner).Append("\n");
            sb.Append("  Exec: ").Append(Exec).Append("\n");
            sb.Append("  ExecPrvKey: ").Append(ExecPrvKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcDaoProposalExecuteRequest);
        }

        /// <summary>
        /// Returns true if BcDaoProposalExecuteRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BcDaoProposalExecuteRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcDaoProposalExecuteRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProposalAuthor == input.ProposalAuthor ||
                    (this.ProposalAuthor != null &&
                    this.ProposalAuthor.Equals(input.ProposalAuthor))
                ) && 
                (
                    this.ProposalId == input.ProposalId ||
                    (this.ProposalId != null &&
                    this.ProposalId.Equals(input.ProposalId))
                ) && 
                (
                    this.DaoId == input.DaoId ||
                    (this.DaoId != null &&
                    this.DaoId.Equals(input.DaoId))
                ) && 
                (
                    this.DaoOwner == input.DaoOwner ||
                    (this.DaoOwner != null &&
                    this.DaoOwner.Equals(input.DaoOwner))
                ) && 
                (
                    this.Exec == input.Exec ||
                    (this.Exec != null &&
                    this.Exec.Equals(input.Exec))
                ) && 
                (
                    this.ExecPrvKey == input.ExecPrvKey ||
                    (this.ExecPrvKey != null &&
                    this.ExecPrvKey.Equals(input.ExecPrvKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProposalAuthor != null)
                    hashCode = hashCode * 59 + this.ProposalAuthor.GetHashCode();
                if (this.ProposalId != null)
                    hashCode = hashCode * 59 + this.ProposalId.GetHashCode();
                if (this.DaoId != null)
                    hashCode = hashCode * 59 + this.DaoId.GetHashCode();
                if (this.DaoOwner != null)
                    hashCode = hashCode * 59 + this.DaoOwner.GetHashCode();
                if (this.Exec != null)
                    hashCode = hashCode * 59 + this.Exec.GetHashCode();
                if (this.ExecPrvKey != null)
                    hashCode = hashCode * 59 + this.ExecPrvKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
