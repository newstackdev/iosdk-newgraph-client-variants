/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcKeyPairCreateResponse
    /// </summary>
    [DataContract]
    public partial class BcKeyPairCreateResponse :  IEquatable<BcKeyPairCreateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcKeyPairCreateResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcKeyPairCreateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcKeyPairCreateResponse" /> class.
        /// </summary>
        /// <param name="prvKey">prvKey (required).</param>
        /// <param name="pubKey">pubKey (required).</param>
        public BcKeyPairCreateResponse(string prvKey = default(string), string pubKey = default(string))
        {
            // to ensure "prvKey" is required (not null)
            if (prvKey == null)
            {
                throw new InvalidDataException("prvKey is a required property for BcKeyPairCreateResponse and cannot be null");
            }
            else
            {
                this.PrvKey = prvKey;
            }
            // to ensure "pubKey" is required (not null)
            if (pubKey == null)
            {
                throw new InvalidDataException("pubKey is a required property for BcKeyPairCreateResponse and cannot be null");
            }
            else
            {
                this.PubKey = pubKey;
            }
        }
        
        /// <summary>
        /// Gets or Sets PrvKey
        /// </summary>
        [DataMember(Name="prv_key", EmitDefaultValue=false)]
        public string PrvKey { get; set; }

        /// <summary>
        /// Gets or Sets PubKey
        /// </summary>
        [DataMember(Name="pub_key", EmitDefaultValue=false)]
        public string PubKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcKeyPairCreateResponse {\n");
            sb.Append("  PrvKey: ").Append(PrvKey).Append("\n");
            sb.Append("  PubKey: ").Append(PubKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcKeyPairCreateResponse);
        }

        /// <summary>
        /// Returns true if BcKeyPairCreateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BcKeyPairCreateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcKeyPairCreateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrvKey == input.PrvKey ||
                    (this.PrvKey != null &&
                    this.PrvKey.Equals(input.PrvKey))
                ) && 
                (
                    this.PubKey == input.PubKey ||
                    (this.PubKey != null &&
                    this.PubKey.Equals(input.PubKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrvKey != null)
                    hashCode = hashCode * 59 + this.PrvKey.GetHashCode();
                if (this.PubKey != null)
                    hashCode = hashCode * 59 + this.PubKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
