/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserPreRegisterRequest
    /// </summary>
    [DataContract]
    public partial class UserPreRegisterRequest :  IEquatable<UserPreRegisterRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreRegisterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPreRegisterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreRegisterRequest" /> class.
        /// </summary>
        /// <param name="consentTestgroup">consentTestgroup.</param>
        /// <param name="consentPrivacyPolicy">consentPrivacyPolicy.</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="consentEmail">consentEmail.</param>
        /// <param name="email">email.</param>
        public UserPreRegisterRequest(string consentTestgroup = default(string), string consentPrivacyPolicy = default(string), string phone = default(string), string fullName = default(string), string consentEmail = default(string), string email = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for UserPreRegisterRequest and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            this.ConsentTestgroup = consentTestgroup;
            this.ConsentPrivacyPolicy = consentPrivacyPolicy;
            this.FullName = fullName;
            this.ConsentEmail = consentEmail;
            this.Email = email;
        }
        
        /// <summary>
        /// Gets or Sets ConsentTestgroup
        /// </summary>
        [DataMember(Name="consentTestgroup", EmitDefaultValue=false)]
        public string ConsentTestgroup { get; set; }

        /// <summary>
        /// Gets or Sets ConsentPrivacyPolicy
        /// </summary>
        [DataMember(Name="consentPrivacyPolicy", EmitDefaultValue=false)]
        public string ConsentPrivacyPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets ConsentEmail
        /// </summary>
        [DataMember(Name="consentEmail", EmitDefaultValue=false)]
        public string ConsentEmail { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPreRegisterRequest {\n");
            sb.Append("  ConsentTestgroup: ").Append(ConsentTestgroup).Append("\n");
            sb.Append("  ConsentPrivacyPolicy: ").Append(ConsentPrivacyPolicy).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ConsentEmail: ").Append(ConsentEmail).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPreRegisterRequest);
        }

        /// <summary>
        /// Returns true if UserPreRegisterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPreRegisterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPreRegisterRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsentTestgroup == input.ConsentTestgroup ||
                    (this.ConsentTestgroup != null &&
                    this.ConsentTestgroup.Equals(input.ConsentTestgroup))
                ) && 
                (
                    this.ConsentPrivacyPolicy == input.ConsentPrivacyPolicy ||
                    (this.ConsentPrivacyPolicy != null &&
                    this.ConsentPrivacyPolicy.Equals(input.ConsentPrivacyPolicy))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.ConsentEmail == input.ConsentEmail ||
                    (this.ConsentEmail != null &&
                    this.ConsentEmail.Equals(input.ConsentEmail))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentTestgroup != null)
                    hashCode = hashCode * 59 + this.ConsentTestgroup.GetHashCode();
                if (this.ConsentPrivacyPolicy != null)
                    hashCode = hashCode * 59 + this.ConsentPrivacyPolicy.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.ConsentEmail != null)
                    hashCode = hashCode * 59 + this.ConsentEmail.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
