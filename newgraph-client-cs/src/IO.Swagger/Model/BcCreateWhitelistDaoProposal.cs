/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcCreateWhitelistDaoProposal
    /// </summary>
    [DataContract]
    public partial class BcCreateWhitelistDaoProposal :  IEquatable<BcCreateWhitelistDaoProposal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcCreateWhitelistDaoProposal" /> class.
        /// </summary>
        /// <param name="quantity">quantity.</param>
        /// <param name="proposer">proposer.</param>
        /// <param name="voteStart">voteStart.</param>
        /// <param name="daoId">daoId.</param>
        /// <param name="daoOwner">daoOwner.</param>
        /// <param name="voteEnd">voteEnd.</param>
        /// <param name="user">user.</param>
        /// <param name="proposerPrvKey">proposerPrvKey.</param>
        public BcCreateWhitelistDaoProposal(string quantity = default(string), string proposer = default(string), string voteStart = default(string), string daoId = default(string), string daoOwner = default(string), string voteEnd = default(string), string user = default(string), string proposerPrvKey = default(string))
        {
            this.Quantity = quantity;
            this.Proposer = proposer;
            this.VoteStart = voteStart;
            this.DaoId = daoId;
            this.DaoOwner = daoOwner;
            this.VoteEnd = voteEnd;
            this.User = user;
            this.ProposerPrvKey = proposerPrvKey;
        }
        
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Proposer
        /// </summary>
        [DataMember(Name="proposer", EmitDefaultValue=false)]
        public string Proposer { get; set; }

        /// <summary>
        /// Gets or Sets VoteStart
        /// </summary>
        [DataMember(Name="vote_start", EmitDefaultValue=false)]
        public string VoteStart { get; set; }

        /// <summary>
        /// Gets or Sets DaoId
        /// </summary>
        [DataMember(Name="dao_id", EmitDefaultValue=false)]
        public string DaoId { get; set; }

        /// <summary>
        /// Gets or Sets DaoOwner
        /// </summary>
        [DataMember(Name="dao_owner", EmitDefaultValue=false)]
        public string DaoOwner { get; set; }

        /// <summary>
        /// Gets or Sets VoteEnd
        /// </summary>
        [DataMember(Name="vote_end", EmitDefaultValue=false)]
        public string VoteEnd { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets ProposerPrvKey
        /// </summary>
        [DataMember(Name="proposer_prv_key", EmitDefaultValue=false)]
        public string ProposerPrvKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcCreateWhitelistDaoProposal {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Proposer: ").Append(Proposer).Append("\n");
            sb.Append("  VoteStart: ").Append(VoteStart).Append("\n");
            sb.Append("  DaoId: ").Append(DaoId).Append("\n");
            sb.Append("  DaoOwner: ").Append(DaoOwner).Append("\n");
            sb.Append("  VoteEnd: ").Append(VoteEnd).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ProposerPrvKey: ").Append(ProposerPrvKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcCreateWhitelistDaoProposal);
        }

        /// <summary>
        /// Returns true if BcCreateWhitelistDaoProposal instances are equal
        /// </summary>
        /// <param name="input">Instance of BcCreateWhitelistDaoProposal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcCreateWhitelistDaoProposal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Proposer == input.Proposer ||
                    (this.Proposer != null &&
                    this.Proposer.Equals(input.Proposer))
                ) && 
                (
                    this.VoteStart == input.VoteStart ||
                    (this.VoteStart != null &&
                    this.VoteStart.Equals(input.VoteStart))
                ) && 
                (
                    this.DaoId == input.DaoId ||
                    (this.DaoId != null &&
                    this.DaoId.Equals(input.DaoId))
                ) && 
                (
                    this.DaoOwner == input.DaoOwner ||
                    (this.DaoOwner != null &&
                    this.DaoOwner.Equals(input.DaoOwner))
                ) && 
                (
                    this.VoteEnd == input.VoteEnd ||
                    (this.VoteEnd != null &&
                    this.VoteEnd.Equals(input.VoteEnd))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.ProposerPrvKey == input.ProposerPrvKey ||
                    (this.ProposerPrvKey != null &&
                    this.ProposerPrvKey.Equals(input.ProposerPrvKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Proposer != null)
                    hashCode = hashCode * 59 + this.Proposer.GetHashCode();
                if (this.VoteStart != null)
                    hashCode = hashCode * 59 + this.VoteStart.GetHashCode();
                if (this.DaoId != null)
                    hashCode = hashCode * 59 + this.DaoId.GetHashCode();
                if (this.DaoOwner != null)
                    hashCode = hashCode * 59 + this.DaoOwner.GetHashCode();
                if (this.VoteEnd != null)
                    hashCode = hashCode * 59 + this.VoteEnd.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.ProposerPrvKey != null)
                    hashCode = hashCode * 59 + this.ProposerPrvKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
