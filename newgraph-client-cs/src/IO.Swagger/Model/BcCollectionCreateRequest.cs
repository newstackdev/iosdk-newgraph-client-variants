/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcCollectionCreateRequest
    /// </summary>
    [DataContract]
    public partial class BcCollectionCreateRequest :  IEquatable<BcCollectionCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcCollectionCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BcCollectionCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BcCollectionCreateRequest" /> class.
        /// </summary>
        /// <param name="mktFee">mktFee.</param>
        /// <param name="templateName">templateName (required).</param>
        /// <param name="templateFields">templateFields (required).</param>
        /// <param name="xferable">xferable.</param>
        /// <param name="maxSupply">maxSupply.</param>
        /// <param name="allowNotify">allowNotify.</param>
        /// <param name="burnable">burnable.</param>
        /// <param name="schemaName">schemaName (required).</param>
        /// <param name="schemaFields">schemaFields (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="userPrvActiveKey">userPrvActiveKey (required).</param>
        /// <param name="collectionName">collectionName (required).</param>
        public BcCollectionCreateRequest(decimal? mktFee = default(decimal?), string templateName = default(string), List<BcCollectionCreateRequestTemplateFields> templateFields = default(List<BcCollectionCreateRequestTemplateFields>), bool? xferable = default(bool?), decimal? maxSupply = default(decimal?), bool? allowNotify = default(bool?), bool? burnable = default(bool?), string schemaName = default(string), List<BcCollectionCreateRequestTemplateFields> schemaFields = default(List<BcCollectionCreateRequestTemplateFields>), string user = default(string), string userPrvActiveKey = default(string), string collectionName = default(string))
        {
            // to ensure "templateName" is required (not null)
            if (templateName == null)
            {
                throw new InvalidDataException("templateName is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.TemplateName = templateName;
            }
            // to ensure "templateFields" is required (not null)
            if (templateFields == null)
            {
                throw new InvalidDataException("templateFields is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.TemplateFields = templateFields;
            }
            // to ensure "schemaName" is required (not null)
            if (schemaName == null)
            {
                throw new InvalidDataException("schemaName is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.SchemaName = schemaName;
            }
            // to ensure "schemaFields" is required (not null)
            if (schemaFields == null)
            {
                throw new InvalidDataException("schemaFields is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.SchemaFields = schemaFields;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "userPrvActiveKey" is required (not null)
            if (userPrvActiveKey == null)
            {
                throw new InvalidDataException("userPrvActiveKey is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.UserPrvActiveKey = userPrvActiveKey;
            }
            // to ensure "collectionName" is required (not null)
            if (collectionName == null)
            {
                throw new InvalidDataException("collectionName is a required property for BcCollectionCreateRequest and cannot be null");
            }
            else
            {
                this.CollectionName = collectionName;
            }
            this.MktFee = mktFee;
            this.Xferable = xferable;
            this.MaxSupply = maxSupply;
            this.AllowNotify = allowNotify;
            this.Burnable = burnable;
        }
        
        /// <summary>
        /// Gets or Sets MktFee
        /// </summary>
        [DataMember(Name="mkt_fee", EmitDefaultValue=false)]
        public decimal? MktFee { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name="template_name", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFields
        /// </summary>
        [DataMember(Name="template_fields", EmitDefaultValue=false)]
        public List<BcCollectionCreateRequestTemplateFields> TemplateFields { get; set; }

        /// <summary>
        /// Gets or Sets Xferable
        /// </summary>
        [DataMember(Name="xferable", EmitDefaultValue=false)]
        public bool? Xferable { get; set; }

        /// <summary>
        /// Gets or Sets MaxSupply
        /// </summary>
        [DataMember(Name="max_supply", EmitDefaultValue=false)]
        public decimal? MaxSupply { get; set; }

        /// <summary>
        /// Gets or Sets AllowNotify
        /// </summary>
        [DataMember(Name="allow_notify", EmitDefaultValue=false)]
        public bool? AllowNotify { get; set; }

        /// <summary>
        /// Gets or Sets Burnable
        /// </summary>
        [DataMember(Name="burnable", EmitDefaultValue=false)]
        public bool? Burnable { get; set; }

        /// <summary>
        /// Gets or Sets SchemaName
        /// </summary>
        [DataMember(Name="schema_name", EmitDefaultValue=false)]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or Sets SchemaFields
        /// </summary>
        [DataMember(Name="schema_fields", EmitDefaultValue=false)]
        public List<BcCollectionCreateRequestTemplateFields> SchemaFields { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets UserPrvActiveKey
        /// </summary>
        [DataMember(Name="user_prv_active_key", EmitDefaultValue=false)]
        public string UserPrvActiveKey { get; set; }

        /// <summary>
        /// Gets or Sets CollectionName
        /// </summary>
        [DataMember(Name="collection_name", EmitDefaultValue=false)]
        public string CollectionName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcCollectionCreateRequest {\n");
            sb.Append("  MktFee: ").Append(MktFee).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  TemplateFields: ").Append(TemplateFields).Append("\n");
            sb.Append("  Xferable: ").Append(Xferable).Append("\n");
            sb.Append("  MaxSupply: ").Append(MaxSupply).Append("\n");
            sb.Append("  AllowNotify: ").Append(AllowNotify).Append("\n");
            sb.Append("  Burnable: ").Append(Burnable).Append("\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  SchemaFields: ").Append(SchemaFields).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserPrvActiveKey: ").Append(UserPrvActiveKey).Append("\n");
            sb.Append("  CollectionName: ").Append(CollectionName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcCollectionCreateRequest);
        }

        /// <summary>
        /// Returns true if BcCollectionCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BcCollectionCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcCollectionCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MktFee == input.MktFee ||
                    (this.MktFee != null &&
                    this.MktFee.Equals(input.MktFee))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.TemplateFields == input.TemplateFields ||
                    this.TemplateFields != null &&
                    this.TemplateFields.SequenceEqual(input.TemplateFields)
                ) && 
                (
                    this.Xferable == input.Xferable ||
                    (this.Xferable != null &&
                    this.Xferable.Equals(input.Xferable))
                ) && 
                (
                    this.MaxSupply == input.MaxSupply ||
                    (this.MaxSupply != null &&
                    this.MaxSupply.Equals(input.MaxSupply))
                ) && 
                (
                    this.AllowNotify == input.AllowNotify ||
                    (this.AllowNotify != null &&
                    this.AllowNotify.Equals(input.AllowNotify))
                ) && 
                (
                    this.Burnable == input.Burnable ||
                    (this.Burnable != null &&
                    this.Burnable.Equals(input.Burnable))
                ) && 
                (
                    this.SchemaName == input.SchemaName ||
                    (this.SchemaName != null &&
                    this.SchemaName.Equals(input.SchemaName))
                ) && 
                (
                    this.SchemaFields == input.SchemaFields ||
                    this.SchemaFields != null &&
                    this.SchemaFields.SequenceEqual(input.SchemaFields)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserPrvActiveKey == input.UserPrvActiveKey ||
                    (this.UserPrvActiveKey != null &&
                    this.UserPrvActiveKey.Equals(input.UserPrvActiveKey))
                ) && 
                (
                    this.CollectionName == input.CollectionName ||
                    (this.CollectionName != null &&
                    this.CollectionName.Equals(input.CollectionName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MktFee != null)
                    hashCode = hashCode * 59 + this.MktFee.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.TemplateFields != null)
                    hashCode = hashCode * 59 + this.TemplateFields.GetHashCode();
                if (this.Xferable != null)
                    hashCode = hashCode * 59 + this.Xferable.GetHashCode();
                if (this.MaxSupply != null)
                    hashCode = hashCode * 59 + this.MaxSupply.GetHashCode();
                if (this.AllowNotify != null)
                    hashCode = hashCode * 59 + this.AllowNotify.GetHashCode();
                if (this.Burnable != null)
                    hashCode = hashCode * 59 + this.Burnable.GetHashCode();
                if (this.SchemaName != null)
                    hashCode = hashCode * 59 + this.SchemaName.GetHashCode();
                if (this.SchemaFields != null)
                    hashCode = hashCode * 59 + this.SchemaFields.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserPrvActiveKey != null)
                    hashCode = hashCode * 59 + this.UserPrvActiveKey.GetHashCode();
                if (this.CollectionName != null)
                    hashCode = hashCode * 59 + this.CollectionName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
