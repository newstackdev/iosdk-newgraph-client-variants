/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreativeSearchResponseSource
    /// </summary>
    [DataContract]
    public partial class CreativeSearchResponseSource :  IEquatable<CreativeSearchResponseSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreativeSearchResponseSource" /> class.
        /// </summary>
        /// <param name="image">image.</param>
        /// <param name="meta">meta.</param>
        /// <param name="aesthetics">aesthetics.</param>
        /// <param name="content">content.</param>
        public CreativeSearchResponseSource(string image = default(string), CreativeSearchResponseSourceMeta meta = default(CreativeSearchResponseSourceMeta), Object aesthetics = default(Object), Object content = default(Object))
        {
            this.Image = image;
            this.Meta = meta;
            this.Aesthetics = aesthetics;
            this.Content = content;
        }
        
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public CreativeSearchResponseSourceMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Aesthetics
        /// </summary>
        [DataMember(Name="aesthetics", EmitDefaultValue=false)]
        public Object Aesthetics { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public Object Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreativeSearchResponseSource {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Aesthetics: ").Append(Aesthetics).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreativeSearchResponseSource);
        }

        /// <summary>
        /// Returns true if CreativeSearchResponseSource instances are equal
        /// </summary>
        /// <param name="input">Instance of CreativeSearchResponseSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreativeSearchResponseSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Aesthetics == input.Aesthetics ||
                    (this.Aesthetics != null &&
                    this.Aesthetics.Equals(input.Aesthetics))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Aesthetics != null)
                    hashCode = hashCode * 59 + this.Aesthetics.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
