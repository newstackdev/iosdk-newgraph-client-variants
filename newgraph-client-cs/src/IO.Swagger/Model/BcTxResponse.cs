/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BcTxResponse
    /// </summary>
    [DataContract]
    public partial class BcTxResponse :  IEquatable<BcTxResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BcTxResponse" /> class.
        /// </summary>
        /// <param name="txIDCreateTpl">txIDCreateTpl.</param>
        /// <param name="txIDCreatePool">txIDCreatePool.</param>
        /// <param name="txIDCreateAcc">txIDCreateAcc.</param>
        /// <param name="txIDCreateCol">txIDCreateCol.</param>
        /// <param name="txIDCreateSch">txIDCreateSch.</param>
        /// <param name="txIDStakeToPool">txIDStakeToPool.</param>
        /// <param name="txIDMintAsset">txIDMintAsset.</param>
        public BcTxResponse(string txIDCreateTpl = default(string), string txIDCreatePool = default(string), string txIDCreateAcc = default(string), string txIDCreateCol = default(string), string txIDCreateSch = default(string), string txIDStakeToPool = default(string), string txIDMintAsset = default(string))
        {
            this.TxIDCreateTpl = txIDCreateTpl;
            this.TxIDCreatePool = txIDCreatePool;
            this.TxIDCreateAcc = txIDCreateAcc;
            this.TxIDCreateCol = txIDCreateCol;
            this.TxIDCreateSch = txIDCreateSch;
            this.TxIDStakeToPool = txIDStakeToPool;
            this.TxIDMintAsset = txIDMintAsset;
        }
        
        /// <summary>
        /// Gets or Sets TxIDCreateTpl
        /// </summary>
        [DataMember(Name="TxID_createTpl", EmitDefaultValue=false)]
        public string TxIDCreateTpl { get; set; }

        /// <summary>
        /// Gets or Sets TxIDCreatePool
        /// </summary>
        [DataMember(Name="TxID_createPool", EmitDefaultValue=false)]
        public string TxIDCreatePool { get; set; }

        /// <summary>
        /// Gets or Sets TxIDCreateAcc
        /// </summary>
        [DataMember(Name="TxID_createAcc", EmitDefaultValue=false)]
        public string TxIDCreateAcc { get; set; }

        /// <summary>
        /// Gets or Sets TxIDCreateCol
        /// </summary>
        [DataMember(Name="TxID_createCol", EmitDefaultValue=false)]
        public string TxIDCreateCol { get; set; }

        /// <summary>
        /// Gets or Sets TxIDCreateSch
        /// </summary>
        [DataMember(Name="TxID_createSch", EmitDefaultValue=false)]
        public string TxIDCreateSch { get; set; }

        /// <summary>
        /// Gets or Sets TxIDStakeToPool
        /// </summary>
        [DataMember(Name="TxID_stakeToPool", EmitDefaultValue=false)]
        public string TxIDStakeToPool { get; set; }

        /// <summary>
        /// Gets or Sets TxIDMintAsset
        /// </summary>
        [DataMember(Name="TxID_mintAsset", EmitDefaultValue=false)]
        public string TxIDMintAsset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BcTxResponse {\n");
            sb.Append("  TxIDCreateTpl: ").Append(TxIDCreateTpl).Append("\n");
            sb.Append("  TxIDCreatePool: ").Append(TxIDCreatePool).Append("\n");
            sb.Append("  TxIDCreateAcc: ").Append(TxIDCreateAcc).Append("\n");
            sb.Append("  TxIDCreateCol: ").Append(TxIDCreateCol).Append("\n");
            sb.Append("  TxIDCreateSch: ").Append(TxIDCreateSch).Append("\n");
            sb.Append("  TxIDStakeToPool: ").Append(TxIDStakeToPool).Append("\n");
            sb.Append("  TxIDMintAsset: ").Append(TxIDMintAsset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BcTxResponse);
        }

        /// <summary>
        /// Returns true if BcTxResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BcTxResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BcTxResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TxIDCreateTpl == input.TxIDCreateTpl ||
                    (this.TxIDCreateTpl != null &&
                    this.TxIDCreateTpl.Equals(input.TxIDCreateTpl))
                ) && 
                (
                    this.TxIDCreatePool == input.TxIDCreatePool ||
                    (this.TxIDCreatePool != null &&
                    this.TxIDCreatePool.Equals(input.TxIDCreatePool))
                ) && 
                (
                    this.TxIDCreateAcc == input.TxIDCreateAcc ||
                    (this.TxIDCreateAcc != null &&
                    this.TxIDCreateAcc.Equals(input.TxIDCreateAcc))
                ) && 
                (
                    this.TxIDCreateCol == input.TxIDCreateCol ||
                    (this.TxIDCreateCol != null &&
                    this.TxIDCreateCol.Equals(input.TxIDCreateCol))
                ) && 
                (
                    this.TxIDCreateSch == input.TxIDCreateSch ||
                    (this.TxIDCreateSch != null &&
                    this.TxIDCreateSch.Equals(input.TxIDCreateSch))
                ) && 
                (
                    this.TxIDStakeToPool == input.TxIDStakeToPool ||
                    (this.TxIDStakeToPool != null &&
                    this.TxIDStakeToPool.Equals(input.TxIDStakeToPool))
                ) && 
                (
                    this.TxIDMintAsset == input.TxIDMintAsset ||
                    (this.TxIDMintAsset != null &&
                    this.TxIDMintAsset.Equals(input.TxIDMintAsset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TxIDCreateTpl != null)
                    hashCode = hashCode * 59 + this.TxIDCreateTpl.GetHashCode();
                if (this.TxIDCreatePool != null)
                    hashCode = hashCode * 59 + this.TxIDCreatePool.GetHashCode();
                if (this.TxIDCreateAcc != null)
                    hashCode = hashCode * 59 + this.TxIDCreateAcc.GetHashCode();
                if (this.TxIDCreateCol != null)
                    hashCode = hashCode * 59 + this.TxIDCreateCol.GetHashCode();
                if (this.TxIDCreateSch != null)
                    hashCode = hashCode * 59 + this.TxIDCreateSch.GetHashCode();
                if (this.TxIDStakeToPool != null)
                    hashCode = hashCode * 59 + this.TxIDStakeToPool.GetHashCode();
                if (this.TxIDMintAsset != null)
                    hashCode = hashCode * 59 + this.TxIDMintAsset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
