=begin
#newgraph-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-10-04T15:34:01Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'date'

module SwaggerClient
  class SyncContactsRequestContacts
    attr_accessor :birthday

    attr_accessor :identifier

    attr_accessor :android_account_name

    attr_accessor :display_name

    attr_accessor :prefix

    attr_accessor :given_name

    attr_accessor :job_title

    attr_accessor :phones

    attr_accessor :avatar

    attr_accessor :suffix

    attr_accessor :postal_addresses

    attr_accessor :emails

    attr_accessor :android_account_type

    attr_accessor :family_name

    attr_accessor :middle_name

    attr_accessor :company

    attr_accessor :android_account_type_raw

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'birthday' => :'birthday',
        :'identifier' => :'identifier',
        :'android_account_name' => :'androidAccountName',
        :'display_name' => :'displayName',
        :'prefix' => :'prefix',
        :'given_name' => :'givenName',
        :'job_title' => :'jobTitle',
        :'phones' => :'phones',
        :'avatar' => :'avatar',
        :'suffix' => :'suffix',
        :'postal_addresses' => :'postalAddresses',
        :'emails' => :'emails',
        :'android_account_type' => :'androidAccountType',
        :'family_name' => :'familyName',
        :'middle_name' => :'middleName',
        :'company' => :'company',
        :'android_account_type_raw' => :'androidAccountTypeRaw'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'birthday' => :'String',
        :'identifier' => :'String',
        :'android_account_name' => :'String',
        :'display_name' => :'String',
        :'prefix' => :'String',
        :'given_name' => :'String',
        :'job_title' => :'String',
        :'phones' => :'Array<SyncContactsRequestPhones>',
        :'avatar' => :'String',
        :'suffix' => :'String',
        :'postal_addresses' => :'Array<SyncContactsRequestPostalAddresses>',
        :'emails' => :'Array<SyncContactsRequestPhones>',
        :'android_account_type' => :'String',
        :'family_name' => :'String',
        :'middle_name' => :'String',
        :'company' => :'String',
        :'android_account_type_raw' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'birthday')
        self.birthday = attributes[:'birthday']
      end

      if attributes.has_key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.has_key?(:'androidAccountName')
        self.android_account_name = attributes[:'androidAccountName']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'prefix')
        self.prefix = attributes[:'prefix']
      end

      if attributes.has_key?(:'givenName')
        self.given_name = attributes[:'givenName']
      end

      if attributes.has_key?(:'jobTitle')
        self.job_title = attributes[:'jobTitle']
      end

      if attributes.has_key?(:'phones')
        if (value = attributes[:'phones']).is_a?(Array)
          self.phones = value
        end
      end

      if attributes.has_key?(:'avatar')
        self.avatar = attributes[:'avatar']
      end

      if attributes.has_key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end

      if attributes.has_key?(:'postalAddresses')
        if (value = attributes[:'postalAddresses']).is_a?(Array)
          self.postal_addresses = value
        end
      end

      if attributes.has_key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.has_key?(:'androidAccountType')
        self.android_account_type = attributes[:'androidAccountType']
      end

      if attributes.has_key?(:'familyName')
        self.family_name = attributes[:'familyName']
      end

      if attributes.has_key?(:'middleName')
        self.middle_name = attributes[:'middleName']
      end

      if attributes.has_key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.has_key?(:'androidAccountTypeRaw')
        self.android_account_type_raw = attributes[:'androidAccountTypeRaw']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          birthday == o.birthday &&
          identifier == o.identifier &&
          android_account_name == o.android_account_name &&
          display_name == o.display_name &&
          prefix == o.prefix &&
          given_name == o.given_name &&
          job_title == o.job_title &&
          phones == o.phones &&
          avatar == o.avatar &&
          suffix == o.suffix &&
          postal_addresses == o.postal_addresses &&
          emails == o.emails &&
          android_account_type == o.android_account_type &&
          family_name == o.family_name &&
          middle_name == o.middle_name &&
          company == o.company &&
          android_account_type_raw == o.android_account_type_raw
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [birthday, identifier, android_account_name, display_name, prefix, given_name, job_title, phones, avatar, suffix, postal_addresses, emails, android_account_type, family_name, middle_name, company, android_account_type_raw].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
