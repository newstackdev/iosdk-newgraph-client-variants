=begin
#newgraph-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-10-04T15:34:01Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'date'

module SwaggerClient
  class UserCreateRequest
    attr_accessor :newcoin_ticker

    attr_accessor :youtube

    attr_accessor :last_name

    attr_accessor :consent_privacy_policy

    attr_accessor :display_name

    attr_accessor :latitude

    attr_accessor :description

    attr_accessor :tumblr

    attr_accessor :instagram

    attr_accessor :medium

    attr_accessor :soundcloud

    attr_accessor :snapchat

    attr_accessor :apple

    attr_accessor :consent_testgroup

    attr_accessor :twitter

    attr_accessor :legacy_token

    attr_accessor :tiktok

    attr_accessor :reddit

    attr_accessor :signal

    attr_accessor :email

    attr_accessor :longitude

    attr_accessor :website

    attr_accessor :spotify

    attr_accessor :facebook

    attr_accessor :full_name

    attr_accessor :telegram

    attr_accessor :pinterest

    attr_accessor :first_name

    attr_accessor :discord

    attr_accessor :phone

    attr_accessor :consent_email

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'newcoin_ticker' => :'newcoinTicker',
        :'youtube' => :'youtube',
        :'last_name' => :'lastName',
        :'consent_privacy_policy' => :'consentPrivacyPolicy',
        :'display_name' => :'displayName',
        :'latitude' => :'latitude',
        :'description' => :'description',
        :'tumblr' => :'tumblr',
        :'instagram' => :'instagram',
        :'medium' => :'medium',
        :'soundcloud' => :'soundcloud',
        :'snapchat' => :'snapchat',
        :'apple' => :'apple',
        :'consent_testgroup' => :'consentTestgroup',
        :'twitter' => :'twitter',
        :'legacy_token' => :'legacyToken',
        :'tiktok' => :'tiktok',
        :'reddit' => :'reddit',
        :'signal' => :'signal',
        :'email' => :'email',
        :'longitude' => :'longitude',
        :'website' => :'website',
        :'spotify' => :'spotify',
        :'facebook' => :'facebook',
        :'full_name' => :'fullName',
        :'telegram' => :'telegram',
        :'pinterest' => :'pinterest',
        :'first_name' => :'firstName',
        :'discord' => :'discord',
        :'phone' => :'phone',
        :'consent_email' => :'consentEmail',
        :'username' => :'username'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'newcoin_ticker' => :'String',
        :'youtube' => :'String',
        :'last_name' => :'String',
        :'consent_privacy_policy' => :'String',
        :'display_name' => :'String',
        :'latitude' => :'Float',
        :'description' => :'String',
        :'tumblr' => :'String',
        :'instagram' => :'String',
        :'medium' => :'String',
        :'soundcloud' => :'String',
        :'snapchat' => :'String',
        :'apple' => :'String',
        :'consent_testgroup' => :'String',
        :'twitter' => :'String',
        :'legacy_token' => :'String',
        :'tiktok' => :'String',
        :'reddit' => :'String',
        :'signal' => :'String',
        :'email' => :'String',
        :'longitude' => :'Float',
        :'website' => :'String',
        :'spotify' => :'String',
        :'facebook' => :'String',
        :'full_name' => :'String',
        :'telegram' => :'String',
        :'pinterest' => :'String',
        :'first_name' => :'String',
        :'discord' => :'String',
        :'phone' => :'String',
        :'consent_email' => :'String',
        :'username' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'newcoinTicker')
        self.newcoin_ticker = attributes[:'newcoinTicker']
      end

      if attributes.has_key?(:'youtube')
        self.youtube = attributes[:'youtube']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'consentPrivacyPolicy')
        self.consent_privacy_policy = attributes[:'consentPrivacyPolicy']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tumblr')
        self.tumblr = attributes[:'tumblr']
      end

      if attributes.has_key?(:'instagram')
        self.instagram = attributes[:'instagram']
      end

      if attributes.has_key?(:'medium')
        self.medium = attributes[:'medium']
      end

      if attributes.has_key?(:'soundcloud')
        self.soundcloud = attributes[:'soundcloud']
      end

      if attributes.has_key?(:'snapchat')
        self.snapchat = attributes[:'snapchat']
      end

      if attributes.has_key?(:'apple')
        self.apple = attributes[:'apple']
      end

      if attributes.has_key?(:'consentTestgroup')
        self.consent_testgroup = attributes[:'consentTestgroup']
      end

      if attributes.has_key?(:'twitter')
        self.twitter = attributes[:'twitter']
      end

      if attributes.has_key?(:'legacyToken')
        self.legacy_token = attributes[:'legacyToken']
      end

      if attributes.has_key?(:'tiktok')
        self.tiktok = attributes[:'tiktok']
      end

      if attributes.has_key?(:'reddit')
        self.reddit = attributes[:'reddit']
      end

      if attributes.has_key?(:'signal')
        self.signal = attributes[:'signal']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.has_key?(:'spotify')
        self.spotify = attributes[:'spotify']
      end

      if attributes.has_key?(:'facebook')
        self.facebook = attributes[:'facebook']
      end

      if attributes.has_key?(:'fullName')
        self.full_name = attributes[:'fullName']
      end

      if attributes.has_key?(:'telegram')
        self.telegram = attributes[:'telegram']
      end

      if attributes.has_key?(:'pinterest')
        self.pinterest = attributes[:'pinterest']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'discord')
        self.discord = attributes[:'discord']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'consentEmail')
        self.consent_email = attributes[:'consentEmail']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @phone.nil?
        invalid_properties.push('invalid value for "phone", phone cannot be nil.')
      end

      if !@username.nil? && @username !~ Regexp.new(/^[a-z0-5\\.]{2,9}\\.io$/)
        invalid_properties.push('invalid value for "username", must conform to the pattern /^[a-z0-5\\.]{2,9}\\.io$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @phone.nil?
      return false if !@username.nil? && @username !~ Regexp.new(/^[a-z0-5\\.]{2,9}\\.io$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] username Value to be assigned
    def username=(username)
      if !username.nil? && username !~ Regexp.new(/^[a-z0-5\\.]{2,9}\\.io$/)
        fail ArgumentError, 'invalid value for "username", must conform to the pattern /^[a-z0-5\\.]{2,9}\\.io$/.'
      end

      @username = username
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          newcoin_ticker == o.newcoin_ticker &&
          youtube == o.youtube &&
          last_name == o.last_name &&
          consent_privacy_policy == o.consent_privacy_policy &&
          display_name == o.display_name &&
          latitude == o.latitude &&
          description == o.description &&
          tumblr == o.tumblr &&
          instagram == o.instagram &&
          medium == o.medium &&
          soundcloud == o.soundcloud &&
          snapchat == o.snapchat &&
          apple == o.apple &&
          consent_testgroup == o.consent_testgroup &&
          twitter == o.twitter &&
          legacy_token == o.legacy_token &&
          tiktok == o.tiktok &&
          reddit == o.reddit &&
          signal == o.signal &&
          email == o.email &&
          longitude == o.longitude &&
          website == o.website &&
          spotify == o.spotify &&
          facebook == o.facebook &&
          full_name == o.full_name &&
          telegram == o.telegram &&
          pinterest == o.pinterest &&
          first_name == o.first_name &&
          discord == o.discord &&
          phone == o.phone &&
          consent_email == o.consent_email &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [newcoin_ticker, youtube, last_name, consent_privacy_policy, display_name, latitude, description, tumblr, instagram, medium, soundcloud, snapchat, apple, consent_testgroup, twitter, legacy_token, tiktok, reddit, signal, email, longitude, website, spotify, facebook, full_name, telegram, pinterest, first_name, discord, phone, consent_email, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
