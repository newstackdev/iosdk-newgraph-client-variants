=begin
#newgraph-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-10-04T15:34:01Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'date'

module SwaggerClient
  class BcAccCreateRequest
    attr_accessor :newacc_pub_active_key

    attr_accessor :newacc_pub_owner_key

    attr_accessor :payer_prv_key

    attr_accessor :xfer

    attr_accessor :stake_cpu

    attr_accessor :new_user

    attr_accessor :stake_ram

    attr_accessor :payer

    attr_accessor :stake_net

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'newacc_pub_active_key' => :'newacc_pub_active_key',
        :'newacc_pub_owner_key' => :'newacc_pub_owner_key',
        :'payer_prv_key' => :'payer_prv_key',
        :'xfer' => :'xfer',
        :'stake_cpu' => :'stake_cpu',
        :'new_user' => :'newUser',
        :'stake_ram' => :'stake_ram',
        :'payer' => :'payer',
        :'stake_net' => :'stake_net'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'newacc_pub_active_key' => :'String',
        :'newacc_pub_owner_key' => :'String',
        :'payer_prv_key' => :'String',
        :'xfer' => :'BOOLEAN',
        :'stake_cpu' => :'String',
        :'new_user' => :'String',
        :'stake_ram' => :'Float',
        :'payer' => :'String',
        :'stake_net' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'newacc_pub_active_key')
        self.newacc_pub_active_key = attributes[:'newacc_pub_active_key']
      end

      if attributes.has_key?(:'newacc_pub_owner_key')
        self.newacc_pub_owner_key = attributes[:'newacc_pub_owner_key']
      end

      if attributes.has_key?(:'payer_prv_key')
        self.payer_prv_key = attributes[:'payer_prv_key']
      end

      if attributes.has_key?(:'xfer')
        self.xfer = attributes[:'xfer']
      end

      if attributes.has_key?(:'stake_cpu')
        self.stake_cpu = attributes[:'stake_cpu']
      end

      if attributes.has_key?(:'newUser')
        self.new_user = attributes[:'newUser']
      end

      if attributes.has_key?(:'stake_ram')
        self.stake_ram = attributes[:'stake_ram']
      end

      if attributes.has_key?(:'payer')
        self.payer = attributes[:'payer']
      end

      if attributes.has_key?(:'stake_net')
        self.stake_net = attributes[:'stake_net']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @newacc_pub_active_key.nil?
        invalid_properties.push('invalid value for "newacc_pub_active_key", newacc_pub_active_key cannot be nil.')
      end

      if @newacc_pub_owner_key.nil?
        invalid_properties.push('invalid value for "newacc_pub_owner_key", newacc_pub_owner_key cannot be nil.')
      end

      if @payer_prv_key.nil?
        invalid_properties.push('invalid value for "payer_prv_key", payer_prv_key cannot be nil.')
      end

      if @new_user.nil?
        invalid_properties.push('invalid value for "new_user", new_user cannot be nil.')
      end

      if @payer.nil?
        invalid_properties.push('invalid value for "payer", payer cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @newacc_pub_active_key.nil?
      return false if @newacc_pub_owner_key.nil?
      return false if @payer_prv_key.nil?
      return false if @new_user.nil?
      return false if @payer.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          newacc_pub_active_key == o.newacc_pub_active_key &&
          newacc_pub_owner_key == o.newacc_pub_owner_key &&
          payer_prv_key == o.payer_prv_key &&
          xfer == o.xfer &&
          stake_cpu == o.stake_cpu &&
          new_user == o.new_user &&
          stake_ram == o.stake_ram &&
          payer == o.payer &&
          stake_net == o.stake_net
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [newacc_pub_active_key, newacc_pub_owner_key, payer_prv_key, xfer, stake_cpu, new_user, stake_ram, payer, stake_net].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
