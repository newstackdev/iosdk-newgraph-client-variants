=begin
#newgraph-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-10-04T15:34:01Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'date'

module SwaggerClient
  class UserReadPrivateResponse
    attr_accessor :powered

    attr_accessor :newcoin_acc_tx

    attr_accessor :newcoin_pool_id

    attr_accessor :aspect_ratio

    attr_accessor :instagram

    attr_accessor :newcoin_active_public_key

    attr_accessor :newcoin_public_key

    attr_accessor :powering

    attr_accessor :stripe_uid

    attr_accessor :twitter

    attr_accessor :newcoin_owner_public_key

    attr_accessor :tiktok

    attr_accessor :reddit

    attr_accessor :id

    attr_accessor :content_type

    attr_accessor :signal

    attr_accessor :longitude

    attr_accessor :subscription_expiry

    attr_accessor :created

    attr_accessor :available_invites

    attr_accessor :facebook_id

    attr_accessor :newcoin_pool_tx

    attr_accessor :verified_social_ids

    attr_accessor :first_name

    attr_accessor :license

    attr_accessor :discord

    attr_accessor :phone

    attr_accessor :updated

    attr_accessor :status

    attr_accessor :newcoin_ticker

    attr_accessor :youtube

    attr_accessor :last_name

    attr_accessor :consent_privacy_policy

    attr_accessor :display_name

    attr_accessor :latitude

    attr_accessor :description

    attr_accessor :tumblr

    attr_accessor :medium

    attr_accessor :soundcloud

    attr_accessor :snapchat

    attr_accessor :apple

    attr_accessor :consent_testgroup

    attr_accessor :newcoin_private_key

    attr_accessor :subscription_status

    attr_accessor :newcoin_publisher_private_key

    attr_accessor :youtube_id

    attr_accessor :newcoin_pool_stake

    attr_accessor :email

    attr_accessor :newcoin_publisher_public_key

    attr_accessor :website

    attr_accessor :spotify

    attr_accessor :facebook

    attr_accessor :full_name

    attr_accessor :telegram

    attr_accessor :pinterest

    attr_accessor :content_url

    attr_accessor :blur_hash

    attr_accessor :consent_email

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'powered' => :'powered',
        :'newcoin_acc_tx' => :'newcoinAccTx',
        :'newcoin_pool_id' => :'newcoinPoolId',
        :'aspect_ratio' => :'aspectRatio',
        :'instagram' => :'instagram',
        :'newcoin_active_public_key' => :'newcoinActivePublicKey',
        :'newcoin_public_key' => :'newcoinPublicKey',
        :'powering' => :'powering',
        :'stripe_uid' => :'stripeUid',
        :'twitter' => :'twitter',
        :'newcoin_owner_public_key' => :'newcoinOwnerPublicKey',
        :'tiktok' => :'tiktok',
        :'reddit' => :'reddit',
        :'id' => :'id',
        :'content_type' => :'contentType',
        :'signal' => :'signal',
        :'longitude' => :'longitude',
        :'subscription_expiry' => :'subscriptionExpiry',
        :'created' => :'created',
        :'available_invites' => :'availableInvites',
        :'facebook_id' => :'facebookId',
        :'newcoin_pool_tx' => :'newcoinPoolTx',
        :'verified_social_ids' => :'verifiedSocialIds',
        :'first_name' => :'firstName',
        :'license' => :'license',
        :'discord' => :'discord',
        :'phone' => :'phone',
        :'updated' => :'updated',
        :'status' => :'status',
        :'newcoin_ticker' => :'newcoinTicker',
        :'youtube' => :'youtube',
        :'last_name' => :'lastName',
        :'consent_privacy_policy' => :'consentPrivacyPolicy',
        :'display_name' => :'displayName',
        :'latitude' => :'latitude',
        :'description' => :'description',
        :'tumblr' => :'tumblr',
        :'medium' => :'medium',
        :'soundcloud' => :'soundcloud',
        :'snapchat' => :'snapchat',
        :'apple' => :'apple',
        :'consent_testgroup' => :'consentTestgroup',
        :'newcoin_private_key' => :'newcoinPrivateKey',
        :'subscription_status' => :'subscriptionStatus',
        :'newcoin_publisher_private_key' => :'newcoinPublisherPrivateKey',
        :'youtube_id' => :'youtubeId',
        :'newcoin_pool_stake' => :'newcoinPoolStake',
        :'email' => :'email',
        :'newcoin_publisher_public_key' => :'newcoinPublisherPublicKey',
        :'website' => :'website',
        :'spotify' => :'spotify',
        :'facebook' => :'facebook',
        :'full_name' => :'fullName',
        :'telegram' => :'telegram',
        :'pinterest' => :'pinterest',
        :'content_url' => :'contentUrl',
        :'blur_hash' => :'blurHash',
        :'consent_email' => :'consentEmail',
        :'username' => :'username'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'powered' => :'Float',
        :'newcoin_acc_tx' => :'String',
        :'newcoin_pool_id' => :'String',
        :'aspect_ratio' => :'Float',
        :'instagram' => :'String',
        :'newcoin_active_public_key' => :'String',
        :'newcoin_public_key' => :'String',
        :'powering' => :'Float',
        :'stripe_uid' => :'String',
        :'twitter' => :'String',
        :'newcoin_owner_public_key' => :'String',
        :'tiktok' => :'String',
        :'reddit' => :'String',
        :'id' => :'String',
        :'content_type' => :'String',
        :'signal' => :'String',
        :'longitude' => :'Float',
        :'subscription_expiry' => :'String',
        :'created' => :'String',
        :'available_invites' => :'Float',
        :'facebook_id' => :'String',
        :'newcoin_pool_tx' => :'String',
        :'verified_social_ids' => :'Array<String>',
        :'first_name' => :'String',
        :'license' => :'String',
        :'discord' => :'String',
        :'phone' => :'String',
        :'updated' => :'String',
        :'status' => :'String',
        :'newcoin_ticker' => :'String',
        :'youtube' => :'String',
        :'last_name' => :'String',
        :'consent_privacy_policy' => :'String',
        :'display_name' => :'String',
        :'latitude' => :'Float',
        :'description' => :'String',
        :'tumblr' => :'String',
        :'medium' => :'String',
        :'soundcloud' => :'String',
        :'snapchat' => :'String',
        :'apple' => :'String',
        :'consent_testgroup' => :'String',
        :'newcoin_private_key' => :'String',
        :'subscription_status' => :'String',
        :'newcoin_publisher_private_key' => :'String',
        :'youtube_id' => :'String',
        :'newcoin_pool_stake' => :'Float',
        :'email' => :'String',
        :'newcoin_publisher_public_key' => :'String',
        :'website' => :'String',
        :'spotify' => :'String',
        :'facebook' => :'String',
        :'full_name' => :'String',
        :'telegram' => :'String',
        :'pinterest' => :'String',
        :'content_url' => :'String',
        :'blur_hash' => :'String',
        :'consent_email' => :'String',
        :'username' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'powered')
        self.powered = attributes[:'powered']
      end

      if attributes.has_key?(:'newcoinAccTx')
        self.newcoin_acc_tx = attributes[:'newcoinAccTx']
      end

      if attributes.has_key?(:'newcoinPoolId')
        self.newcoin_pool_id = attributes[:'newcoinPoolId']
      end

      if attributes.has_key?(:'aspectRatio')
        self.aspect_ratio = attributes[:'aspectRatio']
      end

      if attributes.has_key?(:'instagram')
        self.instagram = attributes[:'instagram']
      end

      if attributes.has_key?(:'newcoinActivePublicKey')
        self.newcoin_active_public_key = attributes[:'newcoinActivePublicKey']
      end

      if attributes.has_key?(:'newcoinPublicKey')
        self.newcoin_public_key = attributes[:'newcoinPublicKey']
      end

      if attributes.has_key?(:'powering')
        self.powering = attributes[:'powering']
      end

      if attributes.has_key?(:'stripeUid')
        self.stripe_uid = attributes[:'stripeUid']
      end

      if attributes.has_key?(:'twitter')
        self.twitter = attributes[:'twitter']
      end

      if attributes.has_key?(:'newcoinOwnerPublicKey')
        self.newcoin_owner_public_key = attributes[:'newcoinOwnerPublicKey']
      end

      if attributes.has_key?(:'tiktok')
        self.tiktok = attributes[:'tiktok']
      end

      if attributes.has_key?(:'reddit')
        self.reddit = attributes[:'reddit']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'contentType')
        self.content_type = attributes[:'contentType']
      end

      if attributes.has_key?(:'signal')
        self.signal = attributes[:'signal']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'subscriptionExpiry')
        self.subscription_expiry = attributes[:'subscriptionExpiry']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'availableInvites')
        self.available_invites = attributes[:'availableInvites']
      end

      if attributes.has_key?(:'facebookId')
        self.facebook_id = attributes[:'facebookId']
      end

      if attributes.has_key?(:'newcoinPoolTx')
        self.newcoin_pool_tx = attributes[:'newcoinPoolTx']
      end

      if attributes.has_key?(:'verifiedSocialIds')
        if (value = attributes[:'verifiedSocialIds']).is_a?(Array)
          self.verified_social_ids = value
        end
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.has_key?(:'discord')
        self.discord = attributes[:'discord']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'newcoinTicker')
        self.newcoin_ticker = attributes[:'newcoinTicker']
      end

      if attributes.has_key?(:'youtube')
        self.youtube = attributes[:'youtube']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'consentPrivacyPolicy')
        self.consent_privacy_policy = attributes[:'consentPrivacyPolicy']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'tumblr')
        self.tumblr = attributes[:'tumblr']
      end

      if attributes.has_key?(:'medium')
        self.medium = attributes[:'medium']
      end

      if attributes.has_key?(:'soundcloud')
        self.soundcloud = attributes[:'soundcloud']
      end

      if attributes.has_key?(:'snapchat')
        self.snapchat = attributes[:'snapchat']
      end

      if attributes.has_key?(:'apple')
        self.apple = attributes[:'apple']
      end

      if attributes.has_key?(:'consentTestgroup')
        self.consent_testgroup = attributes[:'consentTestgroup']
      end

      if attributes.has_key?(:'newcoinPrivateKey')
        self.newcoin_private_key = attributes[:'newcoinPrivateKey']
      end

      if attributes.has_key?(:'subscriptionStatus')
        self.subscription_status = attributes[:'subscriptionStatus']
      end

      if attributes.has_key?(:'newcoinPublisherPrivateKey')
        self.newcoin_publisher_private_key = attributes[:'newcoinPublisherPrivateKey']
      end

      if attributes.has_key?(:'youtubeId')
        self.youtube_id = attributes[:'youtubeId']
      end

      if attributes.has_key?(:'newcoinPoolStake')
        self.newcoin_pool_stake = attributes[:'newcoinPoolStake']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'newcoinPublisherPublicKey')
        self.newcoin_publisher_public_key = attributes[:'newcoinPublisherPublicKey']
      end

      if attributes.has_key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.has_key?(:'spotify')
        self.spotify = attributes[:'spotify']
      end

      if attributes.has_key?(:'facebook')
        self.facebook = attributes[:'facebook']
      end

      if attributes.has_key?(:'fullName')
        self.full_name = attributes[:'fullName']
      end

      if attributes.has_key?(:'telegram')
        self.telegram = attributes[:'telegram']
      end

      if attributes.has_key?(:'pinterest')
        self.pinterest = attributes[:'pinterest']
      end

      if attributes.has_key?(:'contentUrl')
        self.content_url = attributes[:'contentUrl']
      end

      if attributes.has_key?(:'blurHash')
        self.blur_hash = attributes[:'blurHash']
      end

      if attributes.has_key?(:'consentEmail')
        self.consent_email = attributes[:'consentEmail']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          powered == o.powered &&
          newcoin_acc_tx == o.newcoin_acc_tx &&
          newcoin_pool_id == o.newcoin_pool_id &&
          aspect_ratio == o.aspect_ratio &&
          instagram == o.instagram &&
          newcoin_active_public_key == o.newcoin_active_public_key &&
          newcoin_public_key == o.newcoin_public_key &&
          powering == o.powering &&
          stripe_uid == o.stripe_uid &&
          twitter == o.twitter &&
          newcoin_owner_public_key == o.newcoin_owner_public_key &&
          tiktok == o.tiktok &&
          reddit == o.reddit &&
          id == o.id &&
          content_type == o.content_type &&
          signal == o.signal &&
          longitude == o.longitude &&
          subscription_expiry == o.subscription_expiry &&
          created == o.created &&
          available_invites == o.available_invites &&
          facebook_id == o.facebook_id &&
          newcoin_pool_tx == o.newcoin_pool_tx &&
          verified_social_ids == o.verified_social_ids &&
          first_name == o.first_name &&
          license == o.license &&
          discord == o.discord &&
          phone == o.phone &&
          updated == o.updated &&
          status == o.status &&
          newcoin_ticker == o.newcoin_ticker &&
          youtube == o.youtube &&
          last_name == o.last_name &&
          consent_privacy_policy == o.consent_privacy_policy &&
          display_name == o.display_name &&
          latitude == o.latitude &&
          description == o.description &&
          tumblr == o.tumblr &&
          medium == o.medium &&
          soundcloud == o.soundcloud &&
          snapchat == o.snapchat &&
          apple == o.apple &&
          consent_testgroup == o.consent_testgroup &&
          newcoin_private_key == o.newcoin_private_key &&
          subscription_status == o.subscription_status &&
          newcoin_publisher_private_key == o.newcoin_publisher_private_key &&
          youtube_id == o.youtube_id &&
          newcoin_pool_stake == o.newcoin_pool_stake &&
          email == o.email &&
          newcoin_publisher_public_key == o.newcoin_publisher_public_key &&
          website == o.website &&
          spotify == o.spotify &&
          facebook == o.facebook &&
          full_name == o.full_name &&
          telegram == o.telegram &&
          pinterest == o.pinterest &&
          content_url == o.content_url &&
          blur_hash == o.blur_hash &&
          consent_email == o.consent_email &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [powered, newcoin_acc_tx, newcoin_pool_id, aspect_ratio, instagram, newcoin_active_public_key, newcoin_public_key, powering, stripe_uid, twitter, newcoin_owner_public_key, tiktok, reddit, id, content_type, signal, longitude, subscription_expiry, created, available_invites, facebook_id, newcoin_pool_tx, verified_social_ids, first_name, license, discord, phone, updated, status, newcoin_ticker, youtube, last_name, consent_privacy_policy, display_name, latitude, description, tumblr, medium, soundcloud, snapchat, apple, consent_testgroup, newcoin_private_key, subscription_status, newcoin_publisher_private_key, youtube_id, newcoin_pool_stake, email, newcoin_publisher_public_key, website, spotify, facebook, full_name, telegram, pinterest, content_url, blur_hash, consent_email, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
