=begin
#newgraph-api-eu-dev

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2022-10-04T15:34:01Z

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.27

=end

require 'uri'

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_callback_path_get(path, opts = {})
      auth_callback_path_get_with_http_info(path, opts)
      nil
    end

    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auth_callback_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_callback_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.auth_callback_path_get"
      end
      # resource path
      local_var_path = '/auth/callback/{path+}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_callback_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_callback_path_options(path, opts = {})
      auth_callback_path_options_with_http_info(path, opts)
      nil
    end

    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auth_callback_path_options_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_callback_path_options ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.auth_callback_path_options"
      end
      # resource path
      local_var_path = '/auth/callback/{path+}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_callback_path_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_provider_path_get(path, opts = {})
      auth_provider_path_get_with_http_info(path, opts)
      nil
    end

    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auth_provider_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_provider_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.auth_provider_path_get"
      end
      # resource path
      local_var_path = '/auth/provider/{path+}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_provider_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_provider_path_options(path, opts = {})
      auth_provider_path_options_with_http_info(path, opts)
      nil
    end

    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auth_provider_path_options_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_provider_path_options ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.auth_provider_path_options"
      end
      # resource path
      local_var_path = '/auth/provider/{path+}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_provider_path_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [MoodReadResponse]
    def folder_get(opts = {})
      data, _status_code, _headers = folder_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(MoodReadResponse, Fixnum, Hash)>] MoodReadResponse data, response status code and response headers
    def folder_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.folder_get ...'
      end
      # resource path
      local_var_path = '/folder'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#folder_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def folder_options(opts = {})
      folder_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def folder_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.folder_options ...'
      end
      # resource path
      local_var_path = '/folder'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#folder_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def info_auth_get(opts = {})
      info_auth_get_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def info_auth_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.info_auth_get ...'
      end
      # resource path
      local_var_path = '/info-auth'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['lambdaAuthorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#info_auth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def info_auth_options(opts = {})
      info_auth_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def info_auth_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.info_auth_options ...'
      end
      # resource path
      local_var_path = '/info-auth'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#info_auth_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def info_get(opts = {})
      info_get_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.info_get ...'
      end
      # resource path
      local_var_path = '/info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def info_options(opts = {})
      info_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def info_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.info_options ...'
      end
      # resource path
      local_var_path = '/info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#info_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_attach_post_options(opts = {})
      mood_attach_post_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_attach_post_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_attach_post_options ...'
      end
      # resource path
      local_var_path = '/mood/attach/post'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_attach_post_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param mood_attach_request 
    # @param [Hash] opts the optional parameters
    # @return [PostReadResponse]
    def mood_attach_post_put(mood_attach_request, opts = {})
      data, _status_code, _headers = mood_attach_post_put_with_http_info(mood_attach_request, opts)
      data
    end

    # @param mood_attach_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostReadResponse, Fixnum, Hash)>] PostReadResponse data, response status code and response headers
    def mood_attach_post_put_with_http_info(mood_attach_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_attach_post_put ...'
      end
      # verify the required parameter 'mood_attach_request' is set
      if @api_client.config.client_side_validation && mood_attach_request.nil?
        fail ArgumentError, "Missing the required parameter 'mood_attach_request' when calling DefaultApi.mood_attach_post_put"
      end
      # resource path
      local_var_path = '/mood/attach/post'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mood_attach_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_attach_post_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [MoodReadResponse]
    def mood_get(opts = {})
      data, _status_code, _headers = mood_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(MoodReadResponse, Fixnum, Hash)>] MoodReadResponse data, response status code and response headers
    def mood_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_get ...'
      end
      # resource path
      local_var_path = '/mood'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [MoodPagedListReadPublicResponse]
    def mood_list_top_get(opts = {})
      data, _status_code, _headers = mood_list_top_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [Array<(MoodPagedListReadPublicResponse, Fixnum, Hash)>] MoodPagedListReadPublicResponse data, response status code and response headers
    def mood_list_top_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_list_top_get ...'
      end
      # resource path
      local_var_path = '/mood/list/top'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_list_top_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_list_top_options(opts = {})
      mood_list_top_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_list_top_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_list_top_options ...'
      end
      # resource path
      local_var_path = '/mood/list/top'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_list_top_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_options(opts = {})
      mood_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_options ...'
      end
      # resource path
      local_var_path = '/mood'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param mood_create_request 
    # @param [Hash] opts the optional parameters
    # @return [MoodCreateResponse]
    def mood_post(mood_create_request, opts = {})
      data, _status_code, _headers = mood_post_with_http_info(mood_create_request, opts)
      data
    end

    # @param mood_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoodCreateResponse, Fixnum, Hash)>] MoodCreateResponse data, response status code and response headers
    def mood_post_with_http_info(mood_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_post ...'
      end
      # verify the required parameter 'mood_create_request' is set
      if @api_client.config.client_side_validation && mood_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'mood_create_request' when calling DefaultApi.mood_post"
      end
      # resource path
      local_var_path = '/mood'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mood_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [MoodListAttachedPostsResponse]
    def mood_posts_get(opts = {})
      data, _status_code, _headers = mood_posts_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(MoodListAttachedPostsResponse, Fixnum, Hash)>] MoodListAttachedPostsResponse data, response status code and response headers
    def mood_posts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_posts_get ...'
      end
      # resource path
      local_var_path = '/mood/posts'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodListAttachedPostsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_posts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_posts_options(opts = {})
      mood_posts_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_posts_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_posts_options ...'
      end
      # resource path
      local_var_path = '/mood/posts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_posts_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param mood_update_request 
    # @param [Hash] opts the optional parameters
    # @return [MoodReadResponse]
    def mood_put(mood_update_request, opts = {})
      data, _status_code, _headers = mood_put_with_http_info(mood_update_request, opts)
      data
    end

    # @param mood_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MoodReadResponse, Fixnum, Hash)>] MoodReadResponse data, response status code and response headers
    def mood_put_with_http_info(mood_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_put ...'
      end
      # verify the required parameter 'mood_update_request' is set
      if @api_client.config.client_side_validation && mood_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'mood_update_request' when calling DefaultApi.mood_put"
      end
      # resource path
      local_var_path = '/mood'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(mood_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_rate_options(opts = {})
      mood_rate_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_rate_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_rate_options ...'
      end
      # resource path
      local_var_path = '/mood/rate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_rate_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [RatingUpdateResponse]
    def mood_rate_post(rating_update_request, opts = {})
      data, _status_code, _headers = mood_rate_post_with_http_info(rating_update_request, opts)
      data
    end

    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RatingUpdateResponse, Fixnum, Hash)>] RatingUpdateResponse data, response status code and response headers
    def mood_rate_post_with_http_info(rating_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_rate_post ...'
      end
      # verify the required parameter 'rating_update_request' is set
      if @api_client.config.client_side_validation && rating_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'rating_update_request' when calling DefaultApi.mood_rate_post"
      end
      # resource path
      local_var_path = '/mood/rate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rating_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RatingUpdateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_rate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mood_upload_options(opts = {})
      mood_upload_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mood_upload_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_upload_options ...'
      end
      # resource path
      local_var_path = '/mood/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_upload_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param upload_request_generic 
    # @param [Hash] opts the optional parameters
    # @return [UploadResponse]
    def mood_upload_post(upload_request_generic, opts = {})
      data, _status_code, _headers = mood_upload_post_with_http_info(upload_request_generic, opts)
      data
    end

    # @param upload_request_generic 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadResponse, Fixnum, Hash)>] UploadResponse data, response status code and response headers
    def mood_upload_post_with_http_info(upload_request_generic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mood_upload_post ...'
      end
      # verify the required parameter 'upload_request_generic' is set
      if @api_client.config.client_side_validation && upload_request_generic.nil?
        fail ArgumentError, "Missing the required parameter 'upload_request_generic' when calling DefaultApi.mood_upload_post"
      end
      # resource path
      local_var_path = '/mood/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upload_request_generic)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mood_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcaccopen_options(opts = {})
      newcoin_bcaccopen_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcaccopen_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcaccopen_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcaccopen'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcaccopen_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_acc_create_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcaccopen_post(bc_acc_create_request, opts = {})
      data, _status_code, _headers = newcoin_bcaccopen_post_with_http_info(bc_acc_create_request, opts)
      data
    end

    # @param bc_acc_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcaccopen_post_with_http_info(bc_acc_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcaccopen_post ...'
      end
      # verify the required parameter 'bc_acc_create_request' is set
      if @api_client.config.client_side_validation && bc_acc_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_acc_create_request' when calling DefaultApi.newcoin_bcaccopen_post"
      end
      # resource path
      local_var_path = '/newcoin/bcaccopen'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_acc_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcaccopen_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcautheth_options(opts = {})
      newcoin_bcautheth_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcautheth_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcautheth_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcautheth'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcautheth_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_auth_eth_request 
    # @param [Hash] opts the optional parameters
    # @return [BcAuthEthResponse]
    def newcoin_bcautheth_post(bc_auth_eth_request, opts = {})
      data, _status_code, _headers = newcoin_bcautheth_post_with_http_info(bc_auth_eth_request, opts)
      data
    end

    # @param bc_auth_eth_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcAuthEthResponse, Fixnum, Hash)>] BcAuthEthResponse data, response status code and response headers
    def newcoin_bcautheth_post_with_http_info(bc_auth_eth_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcautheth_post ...'
      end
      # verify the required parameter 'bc_auth_eth_request' is set
      if @api_client.config.client_side_validation && bc_auth_eth_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_auth_eth_request' when calling DefaultApi.newcoin_bcautheth_post"
      end
      # resource path
      local_var_path = '/newcoin/bcautheth'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_auth_eth_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcAuthEthResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcautheth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bccolcreate_options(opts = {})
      newcoin_bccolcreate_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bccolcreate_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bccolcreate_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bccolcreate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bccolcreate_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_collection_create_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bccolcreate_post(bc_collection_create_request, opts = {})
      data, _status_code, _headers = newcoin_bccolcreate_post_with_http_info(bc_collection_create_request, opts)
      data
    end

    # @param bc_collection_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bccolcreate_post_with_http_info(bc_collection_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bccolcreate_post ...'
      end
      # verify the required parameter 'bc_collection_create_request' is set
      if @api_client.config.client_side_validation && bc_collection_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_collection_create_request' when calling DefaultApi.newcoin_bccolcreate_post"
      end
      # resource path
      local_var_path = '/newcoin/bccolcreate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_collection_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bccolcreate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcgetacc_options(opts = {})
      newcoin_bcgetacc_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcgetacc_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcgetacc_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcgetacc'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcgetacc_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_get_account_info 
    # @param [Hash] opts the optional parameters
    # @return [BcGetInfoResp]
    def newcoin_bcgetacc_post(bc_get_account_info, opts = {})
      data, _status_code, _headers = newcoin_bcgetacc_post_with_http_info(bc_get_account_info, opts)
      data
    end

    # @param bc_get_account_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcGetInfoResp, Fixnum, Hash)>] BcGetInfoResp data, response status code and response headers
    def newcoin_bcgetacc_post_with_http_info(bc_get_account_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcgetacc_post ...'
      end
      # verify the required parameter 'bc_get_account_info' is set
      if @api_client.config.client_side_validation && bc_get_account_info.nil?
        fail ArgumentError, "Missing the required parameter 'bc_get_account_info' when calling DefaultApi.newcoin_bcgetacc_post"
      end
      # resource path
      local_var_path = '/newcoin/bcgetacc'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_get_account_info)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcGetInfoResp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcgetacc_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcgetpool_options(opts = {})
      newcoin_bcgetpool_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcgetpool_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcgetpool_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcgetpool'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcgetpool_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_get_pool_info 
    # @param [Hash] opts the optional parameters
    # @return [BcGetInfoResp]
    def newcoin_bcgetpool_post(bc_get_pool_info, opts = {})
      data, _status_code, _headers = newcoin_bcgetpool_post_with_http_info(bc_get_pool_info, opts)
      data
    end

    # @param bc_get_pool_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcGetInfoResp, Fixnum, Hash)>] BcGetInfoResp data, response status code and response headers
    def newcoin_bcgetpool_post_with_http_info(bc_get_pool_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcgetpool_post ...'
      end
      # verify the required parameter 'bc_get_pool_info' is set
      if @api_client.config.client_side_validation && bc_get_pool_info.nil?
        fail ArgumentError, "Missing the required parameter 'bc_get_pool_info' when calling DefaultApi.newcoin_bcgetpool_post"
      end
      # resource path
      local_var_path = '/newcoin/bcgetpool'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_get_pool_info)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcGetInfoResp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcgetpool_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bckeypair_options(opts = {})
      newcoin_bckeypair_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bckeypair_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bckeypair_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bckeypair'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bckeypair_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_key_pair_create_request 
    # @param [Hash] opts the optional parameters
    # @return [BcKeyPairCreateResponse]
    def newcoin_bckeypair_post(bc_key_pair_create_request, opts = {})
      data, _status_code, _headers = newcoin_bckeypair_post_with_http_info(bc_key_pair_create_request, opts)
      data
    end

    # @param bc_key_pair_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcKeyPairCreateResponse, Fixnum, Hash)>] BcKeyPairCreateResponse data, response status code and response headers
    def newcoin_bckeypair_post_with_http_info(bc_key_pair_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bckeypair_post ...'
      end
      # verify the required parameter 'bc_key_pair_create_request' is set
      if @api_client.config.client_side_validation && bc_key_pair_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_key_pair_create_request' when calling DefaultApi.newcoin_bckeypair_post"
      end
      # resource path
      local_var_path = '/newcoin/bckeypair'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_key_pair_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcKeyPairCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bckeypair_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcmaindaodldunstake_options(opts = {})
      newcoin_bcmaindaodldunstake_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcmaindaodldunstake_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaodldunstake_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaodldunstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaodldunstake_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_stake_main_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcmaindaodldunstake_post(bc_stake_main_dao_request, opts = {})
      data, _status_code, _headers = newcoin_bcmaindaodldunstake_post_with_http_info(bc_stake_main_dao_request, opts)
      data
    end

    # @param bc_stake_main_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcmaindaodldunstake_post_with_http_info(bc_stake_main_dao_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaodldunstake_post ...'
      end
      # verify the required parameter 'bc_stake_main_dao_request' is set
      if @api_client.config.client_side_validation && bc_stake_main_dao_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_stake_main_dao_request' when calling DefaultApi.newcoin_bcmaindaodldunstake_post"
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaodldunstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_stake_main_dao_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaodldunstake_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcmaindaoinstunstake_options(opts = {})
      newcoin_bcmaindaoinstunstake_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcmaindaoinstunstake_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaoinstunstake_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaoinstunstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaoinstunstake_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_stake_pool_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcmaindaoinstunstake_post(bc_stake_pool_request, opts = {})
      data, _status_code, _headers = newcoin_bcmaindaoinstunstake_post_with_http_info(bc_stake_pool_request, opts)
      data
    end

    # @param bc_stake_pool_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcmaindaoinstunstake_post_with_http_info(bc_stake_pool_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaoinstunstake_post ...'
      end
      # verify the required parameter 'bc_stake_pool_request' is set
      if @api_client.config.client_side_validation && bc_stake_pool_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_stake_pool_request' when calling DefaultApi.newcoin_bcmaindaoinstunstake_post"
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaoinstunstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_stake_pool_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaoinstunstake_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcmaindaostake_options(opts = {})
      newcoin_bcmaindaostake_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcmaindaostake_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaostake_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaostake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaostake_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_stake_main_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcmaindaostake_post(bc_stake_main_dao_request, opts = {})
      data, _status_code, _headers = newcoin_bcmaindaostake_post_with_http_info(bc_stake_main_dao_request, opts)
      data
    end

    # @param bc_stake_main_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcmaindaostake_post_with_http_info(bc_stake_main_dao_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmaindaostake_post ...'
      end
      # verify the required parameter 'bc_stake_main_dao_request' is set
      if @api_client.config.client_side_validation && bc_stake_main_dao_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_stake_main_dao_request' when calling DefaultApi.newcoin_bcmaindaostake_post"
      end
      # resource path
      local_var_path = '/newcoin/bcmaindaostake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_stake_main_dao_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmaindaostake_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcmintasset_options(opts = {})
      newcoin_bcmintasset_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcmintasset_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmintasset_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcmintasset'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmintasset_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_mint_asset_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcmintasset_post(bc_mint_asset_request, opts = {})
      data, _status_code, _headers = newcoin_bcmintasset_post_with_http_info(bc_mint_asset_request, opts)
      data
    end

    # @param bc_mint_asset_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcmintasset_post_with_http_info(bc_mint_asset_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcmintasset_post ...'
      end
      # verify the required parameter 'bc_mint_asset_request' is set
      if @api_client.config.client_side_validation && bc_mint_asset_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_mint_asset_request' when calling DefaultApi.newcoin_bcmintasset_post"
      end
      # resource path
      local_var_path = '/newcoin/bcmintasset'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_mint_asset_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcmintasset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcpoolcreate_options(opts = {})
      newcoin_bcpoolcreate_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcpoolcreate_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcpoolcreate_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcpoolcreate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcpoolcreate_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_pool_create_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcpoolcreate_post(bc_pool_create_request, opts = {})
      data, _status_code, _headers = newcoin_bcpoolcreate_post_with_http_info(bc_pool_create_request, opts)
      data
    end

    # @param bc_pool_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcpoolcreate_post_with_http_info(bc_pool_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcpoolcreate_post ...'
      end
      # verify the required parameter 'bc_pool_create_request' is set
      if @api_client.config.client_side_validation && bc_pool_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_pool_create_request' when calling DefaultApi.newcoin_bcpoolcreate_post"
      end
      # resource path
      local_var_path = '/newcoin/bcpoolcreate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_pool_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcpoolcreate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_bcpoolstake_options(opts = {})
      newcoin_bcpoolstake_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_bcpoolstake_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcpoolstake_options ...'
      end
      # resource path
      local_var_path = '/newcoin/bcpoolstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcpoolstake_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_stake_pool_request 
    # @param [Hash] opts the optional parameters
    # @return [BcTxResponse]
    def newcoin_bcpoolstake_post(bc_stake_pool_request, opts = {})
      data, _status_code, _headers = newcoin_bcpoolstake_post_with_http_info(bc_stake_pool_request, opts)
      data
    end

    # @param bc_stake_pool_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcTxResponse, Fixnum, Hash)>] BcTxResponse data, response status code and response headers
    def newcoin_bcpoolstake_post_with_http_info(bc_stake_pool_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_bcpoolstake_post ...'
      end
      # verify the required parameter 'bc_stake_pool_request' is set
      if @api_client.config.client_side_validation && bc_stake_pool_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_stake_pool_request' when calling DefaultApi.newcoin_bcpoolstake_post"
      end
      # resource path
      local_var_path = '/newcoin/bcpoolstake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_stake_pool_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcTxResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_bcpoolstake_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_create_options(opts = {})
      newcoin_dao_create_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_create_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_create_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_create_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_create_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [BcCreateDaoResponse]
    def newcoin_dao_create_post(bc_create_dao_request, opts = {})
      data, _status_code, _headers = newcoin_dao_create_post_with_http_info(bc_create_dao_request, opts)
      data
    end

    # @param bc_create_dao_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcCreateDaoResponse, Fixnum, Hash)>] BcCreateDaoResponse data, response status code and response headers
    def newcoin_dao_create_post_with_http_info(bc_create_dao_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_create_post ...'
      end
      # verify the required parameter 'bc_create_dao_request' is set
      if @api_client.config.client_side_validation && bc_create_dao_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_create_dao_request' when calling DefaultApi.newcoin_dao_create_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_create_dao_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcCreateDaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_approve_options(opts = {})
      newcoin_dao_proposal_approve_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_approve_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_approve_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/approve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_approve_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_approve_dao_proposal_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_approve_post(bc_approve_dao_proposal_request, opts = {})
      newcoin_dao_proposal_approve_post_with_http_info(bc_approve_dao_proposal_request, opts)
      nil
    end

    # @param bc_approve_dao_proposal_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_approve_post_with_http_info(bc_approve_dao_proposal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_approve_post ...'
      end
      # verify the required parameter 'bc_approve_dao_proposal_request' is set
      if @api_client.config.client_side_validation && bc_approve_dao_proposal_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_approve_dao_proposal_request' when calling DefaultApi.newcoin_dao_proposal_approve_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/approve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_approve_dao_proposal_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_approve_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_execute_options(opts = {})
      newcoin_dao_proposal_execute_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_execute_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_execute_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/execute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_execute_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_dao_proposal_execute_request 
    # @param [Hash] opts the optional parameters
    # @return [BcDaoProposalExecuteResponse]
    def newcoin_dao_proposal_execute_post(bc_dao_proposal_execute_request, opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_execute_post_with_http_info(bc_dao_proposal_execute_request, opts)
      data
    end

    # @param bc_dao_proposal_execute_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcDaoProposalExecuteResponse, Fixnum, Hash)>] BcDaoProposalExecuteResponse data, response status code and response headers
    def newcoin_dao_proposal_execute_post_with_http_info(bc_dao_proposal_execute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_execute_post ...'
      end
      # verify the required parameter 'bc_dao_proposal_execute_request' is set
      if @api_client.config.client_side_validation && bc_dao_proposal_execute_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_dao_proposal_execute_request' when calling DefaultApi.newcoin_dao_proposal_execute_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/execute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_dao_proposal_execute_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcDaoProposalExecuteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_execute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :proposal_author 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :lower_bound 
    # @option opts [String] :upper_bound 
    # @option opts [String] :id 
    # @return [BcListDaoProposalsResponse]
    def newcoin_dao_proposal_list_get(opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_list_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :proposal_author 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :lower_bound 
    # @option opts [String] :upper_bound 
    # @option opts [String] :id 
    # @return [Array<(BcListDaoProposalsResponse, Fixnum, Hash)>] BcListDaoProposalsResponse data, response status code and response headers
    def newcoin_dao_proposal_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_list_get ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/list'

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?
      query_params[:'proposalAuthor'] = opts[:'proposal_author'] if !opts[:'proposal_author'].nil?
      query_params[:'dao_owner'] = opts[:'dao_owner'] if !opts[:'dao_owner'].nil?
      query_params[:'dao_id'] = opts[:'dao_id'] if !opts[:'dao_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lower_bound'] = opts[:'lower_bound'] if !opts[:'lower_bound'].nil?
      query_params[:'upper_bound'] = opts[:'upper_bound'] if !opts[:'upper_bound'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcListDaoProposalsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_list_options(opts = {})
      newcoin_dao_proposal_list_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_list_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_list_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_list_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_options(opts = {})
      newcoin_dao_proposal_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_create_dao_proposal 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_post(bc_create_dao_proposal, opts = {})
      newcoin_dao_proposal_post_with_http_info(bc_create_dao_proposal, opts)
      nil
    end

    # @param bc_create_dao_proposal 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_post_with_http_info(bc_create_dao_proposal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_post ...'
      end
      # verify the required parameter 'bc_create_dao_proposal' is set
      if @api_client.config.client_side_validation && bc_create_dao_proposal.nil?
        fail ArgumentError, "Missing the required parameter 'bc_create_dao_proposal' when calling DefaultApi.newcoin_dao_proposal_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_create_dao_proposal)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_vote_options(opts = {})
      newcoin_dao_proposal_vote_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_vote_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_vote_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/vote'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_vote_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_dao_proposal_vote_request 
    # @param [Hash] opts the optional parameters
    # @return [BcListDaoProposalsResponse]
    def newcoin_dao_proposal_vote_post(bc_dao_proposal_vote_request, opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_vote_post_with_http_info(bc_dao_proposal_vote_request, opts)
      data
    end

    # @param bc_dao_proposal_vote_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcListDaoProposalsResponse, Fixnum, Hash)>] BcListDaoProposalsResponse data, response status code and response headers
    def newcoin_dao_proposal_vote_post_with_http_info(bc_dao_proposal_vote_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_vote_post ...'
      end
      # verify the required parameter 'bc_dao_proposal_vote_request' is set
      if @api_client.config.client_side_validation && bc_dao_proposal_vote_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_dao_proposal_vote_request' when calling DefaultApi.newcoin_dao_proposal_vote_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/vote'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_dao_proposal_vote_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcListDaoProposalsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_vote_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :limit 
    # @option opts [String] :upper_bound 
    # @option opts [String] :voter 
    # @option opts [String] :lower_bound 
    # @return [BcDaoProposalVoteResponse]
    def newcoin_dao_proposal_votes_get(opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_votes_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :limit 
    # @option opts [String] :upper_bound 
    # @option opts [String] :voter 
    # @option opts [String] :lower_bound 
    # @return [Array<(BcDaoProposalVoteResponse, Fixnum, Hash)>] BcDaoProposalVoteResponse data, response status code and response headers
    def newcoin_dao_proposal_votes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_votes_get ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/votes'

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'upper_bound'] = opts[:'upper_bound'] if !opts[:'upper_bound'].nil?
      query_params[:'voter'] = opts[:'voter'] if !opts[:'voter'].nil?
      query_params[:'lower_bound'] = opts[:'lower_bound'] if !opts[:'lower_bound'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcDaoProposalVoteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_votes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_votes_options(opts = {})
      newcoin_dao_proposal_votes_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_votes_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_votes_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal/votes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_votes_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_approve_options(opts = {})
      newcoin_dao_proposal_whitelist_approve_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_approve_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_approve_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/approve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_approve_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_approve_dao_proposal_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_approve_post(bc_approve_dao_proposal_request, opts = {})
      newcoin_dao_proposal_whitelist_approve_post_with_http_info(bc_approve_dao_proposal_request, opts)
      nil
    end

    # @param bc_approve_dao_proposal_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_approve_post_with_http_info(bc_approve_dao_proposal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_approve_post ...'
      end
      # verify the required parameter 'bc_approve_dao_proposal_request' is set
      if @api_client.config.client_side_validation && bc_approve_dao_proposal_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_approve_dao_proposal_request' when calling DefaultApi.newcoin_dao_proposal_whitelist_approve_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/approve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_approve_dao_proposal_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_approve_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_execute_options(opts = {})
      newcoin_dao_proposal_whitelist_execute_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_execute_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_execute_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/execute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_execute_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_dao_proposal_execute_request 
    # @param [Hash] opts the optional parameters
    # @return [BcDaoProposalExecuteResponse]
    def newcoin_dao_proposal_whitelist_execute_post(bc_dao_proposal_execute_request, opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_whitelist_execute_post_with_http_info(bc_dao_proposal_execute_request, opts)
      data
    end

    # @param bc_dao_proposal_execute_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcDaoProposalExecuteResponse, Fixnum, Hash)>] BcDaoProposalExecuteResponse data, response status code and response headers
    def newcoin_dao_proposal_whitelist_execute_post_with_http_info(bc_dao_proposal_execute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_execute_post ...'
      end
      # verify the required parameter 'bc_dao_proposal_execute_request' is set
      if @api_client.config.client_side_validation && bc_dao_proposal_execute_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_dao_proposal_execute_request' when calling DefaultApi.newcoin_dao_proposal_whitelist_execute_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/execute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_dao_proposal_execute_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcDaoProposalExecuteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_execute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :proposal_author 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :lower_bound 
    # @option opts [String] :upper_bound 
    # @option opts [String] :id 
    # @return [BcListDaoProposalsResponse]
    def newcoin_dao_proposal_whitelist_list_get(opts = {})
      data, _status_code, _headers = newcoin_dao_proposal_whitelist_list_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :proposal_author 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :lower_bound 
    # @option opts [String] :upper_bound 
    # @option opts [String] :id 
    # @return [Array<(BcListDaoProposalsResponse, Fixnum, Hash)>] BcListDaoProposalsResponse data, response status code and response headers
    def newcoin_dao_proposal_whitelist_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_list_get ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/list'

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?
      query_params[:'proposalAuthor'] = opts[:'proposal_author'] if !opts[:'proposal_author'].nil?
      query_params[:'dao_owner'] = opts[:'dao_owner'] if !opts[:'dao_owner'].nil?
      query_params[:'dao_id'] = opts[:'dao_id'] if !opts[:'dao_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'lower_bound'] = opts[:'lower_bound'] if !opts[:'lower_bound'].nil?
      query_params[:'upper_bound'] = opts[:'upper_bound'] if !opts[:'upper_bound'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcListDaoProposalsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_list_options(opts = {})
      newcoin_dao_proposal_whitelist_list_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_list_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_list_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_list_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_options(opts = {})
      newcoin_dao_proposal_whitelist_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_create_whitelist_dao_proposal 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_proposal_whitelist_post(bc_create_whitelist_dao_proposal, opts = {})
      newcoin_dao_proposal_whitelist_post_with_http_info(bc_create_whitelist_dao_proposal, opts)
      nil
    end

    # @param bc_create_whitelist_dao_proposal 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_proposal_whitelist_post_with_http_info(bc_create_whitelist_dao_proposal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_proposal_whitelist_post ...'
      end
      # verify the required parameter 'bc_create_whitelist_dao_proposal' is set
      if @api_client.config.client_side_validation && bc_create_whitelist_dao_proposal.nil?
        fail ArgumentError, "Missing the required parameter 'bc_create_whitelist_dao_proposal' when calling DefaultApi.newcoin_dao_proposal_whitelist_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/proposal-whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_create_whitelist_dao_proposal)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_proposal_whitelist_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :upper_bound 
    # @option opts [String] :lower_bound 
    # @return [BcListDaoWhitelistResponse]
    def newcoin_dao_whitelist_get(opts = {})
      data, _status_code, _headers = newcoin_dao_whitelist_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :reverse 
    # @option opts [String] :dao_owner 
    # @option opts [String] :dao_id 
    # @option opts [String] :limit 
    # @option opts [String] :upper_bound 
    # @option opts [String] :lower_bound 
    # @return [Array<(BcListDaoWhitelistResponse, Fixnum, Hash)>] BcListDaoWhitelistResponse data, response status code and response headers
    def newcoin_dao_whitelist_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_whitelist_get ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/whitelist'

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?
      query_params[:'dao_owner'] = opts[:'dao_owner'] if !opts[:'dao_owner'].nil?
      query_params[:'dao_id'] = opts[:'dao_id'] if !opts[:'dao_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'upper_bound'] = opts[:'upper_bound'] if !opts[:'upper_bound'].nil?
      query_params[:'lower_bound'] = opts[:'lower_bound'] if !opts[:'lower_bound'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcListDaoWhitelistResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_whitelist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_whitelist_options(opts = {})
      newcoin_dao_whitelist_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_whitelist_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_whitelist_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_whitelist_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newcoin_dao_withdraw_vote_deposit_options(opts = {})
      newcoin_dao_withdraw_vote_deposit_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newcoin_dao_withdraw_vote_deposit_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_withdraw_vote_deposit_options ...'
      end
      # resource path
      local_var_path = '/newcoin/dao/withdrawVoteDeposit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_withdraw_vote_deposit_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bc_dao_widthdraw_vote_deposit_request 
    # @param [Hash] opts the optional parameters
    # @return [BcDaoWidthdrawVoteDepositResponse]
    def newcoin_dao_withdraw_vote_deposit_post(bc_dao_widthdraw_vote_deposit_request, opts = {})
      data, _status_code, _headers = newcoin_dao_withdraw_vote_deposit_post_with_http_info(bc_dao_widthdraw_vote_deposit_request, opts)
      data
    end

    # @param bc_dao_widthdraw_vote_deposit_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BcDaoWidthdrawVoteDepositResponse, Fixnum, Hash)>] BcDaoWidthdrawVoteDepositResponse data, response status code and response headers
    def newcoin_dao_withdraw_vote_deposit_post_with_http_info(bc_dao_widthdraw_vote_deposit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.newcoin_dao_withdraw_vote_deposit_post ...'
      end
      # verify the required parameter 'bc_dao_widthdraw_vote_deposit_request' is set
      if @api_client.config.client_side_validation && bc_dao_widthdraw_vote_deposit_request.nil?
        fail ArgumentError, "Missing the required parameter 'bc_dao_widthdraw_vote_deposit_request' when calling DefaultApi.newcoin_dao_withdraw_vote_deposit_post"
      end
      # resource path
      local_var_path = '/newcoin/dao/withdrawVoteDeposit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bc_dao_widthdraw_vote_deposit_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BcDaoWidthdrawVoteDepositResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#newcoin_dao_withdraw_vote_deposit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_stripe_intent_options(opts = {})
      payment_stripe_intent_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def payment_stripe_intent_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_intent_options ...'
      end
      # resource path
      local_var_path = '/payment/stripe/intent'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_intent_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param payment_stripe_payment_intent_create_request 
    # @param [Hash] opts the optional parameters
    # @return [PaymentStripePaymentIntentCreateResponse]
    def payment_stripe_intent_post(payment_stripe_payment_intent_create_request, opts = {})
      data, _status_code, _headers = payment_stripe_intent_post_with_http_info(payment_stripe_payment_intent_create_request, opts)
      data
    end

    # @param payment_stripe_payment_intent_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentStripePaymentIntentCreateResponse, Fixnum, Hash)>] PaymentStripePaymentIntentCreateResponse data, response status code and response headers
    def payment_stripe_intent_post_with_http_info(payment_stripe_payment_intent_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_intent_post ...'
      end
      # verify the required parameter 'payment_stripe_payment_intent_create_request' is set
      if @api_client.config.client_side_validation && payment_stripe_payment_intent_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'payment_stripe_payment_intent_create_request' when calling DefaultApi.payment_stripe_intent_post"
      end
      # resource path
      local_var_path = '/payment/stripe/intent'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment_stripe_payment_intent_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentStripePaymentIntentCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_intent_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_stripe_subscription_payment_options(opts = {})
      payment_stripe_subscription_payment_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def payment_stripe_subscription_payment_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_subscription_payment_options ...'
      end
      # resource path
      local_var_path = '/payment/stripe/subscription/payment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_subscription_payment_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_stripe_subscription_payment_post(opts = {})
      payment_stripe_subscription_payment_post_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def payment_stripe_subscription_payment_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_subscription_payment_post ...'
      end
      # resource path
      local_var_path = '/payment/stripe/subscription/payment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_subscription_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_stripe_webhook_options(opts = {})
      payment_stripe_webhook_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def payment_stripe_webhook_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_webhook_options ...'
      end
      # resource path
      local_var_path = '/payment/stripe/webhook'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_webhook_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param payment_stripe_webhook_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_stripe_webhook_post(payment_stripe_webhook_request, opts = {})
      payment_stripe_webhook_post_with_http_info(payment_stripe_webhook_request, opts)
      nil
    end

    # @param payment_stripe_webhook_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def payment_stripe_webhook_post_with_http_info(payment_stripe_webhook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.payment_stripe_webhook_post ...'
      end
      # verify the required parameter 'payment_stripe_webhook_request' is set
      if @api_client.config.client_side_validation && payment_stripe_webhook_request.nil?
        fail ArgumentError, "Missing the required parameter 'payment_stripe_webhook_request' when calling DefaultApi.payment_stripe_webhook_post"
      end
      # resource path
      local_var_path = '/payment/stripe/webhook'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment_stripe_webhook_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#payment_stripe_webhook_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @return [PostReadResponse]
    def post_get(opts = {})
      data, _status_code, _headers = post_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @return [Array<(PostReadResponse, Fixnum, Hash)>] PostReadResponse data, response status code and response headers
    def post_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_get ...'
      end
      # resource path
      local_var_path = '/post'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [PostPagedListReadPublicResponse]
    def post_list_search_get(opts = {})
      data, _status_code, _headers = post_list_search_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [Array<(PostPagedListReadPublicResponse, Fixnum, Hash)>] PostPagedListReadPublicResponse data, response status code and response headers
    def post_list_search_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_search_get ...'
      end
      # resource path
      local_var_path = '/post/list/search'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_list_search_options(opts = {})
      post_list_search_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_list_search_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_search_options ...'
      end
      # resource path
      local_var_path = '/post/list/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_search_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [PostTagsSearchPublicResponse]
    def post_list_tags_search_get(opts = {})
      data, _status_code, _headers = post_list_tags_search_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [Array<(PostTagsSearchPublicResponse, Fixnum, Hash)>] PostTagsSearchPublicResponse data, response status code and response headers
    def post_list_tags_search_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_tags_search_get ...'
      end
      # resource path
      local_var_path = '/post/list/tags-search'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostTagsSearchPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_tags_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_list_tags_search_options(opts = {})
      post_list_tags_search_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_list_tags_search_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_tags_search_options ...'
      end
      # resource path
      local_var_path = '/post/list/tags-search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_tags_search_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [PostPagedListReadPublicResponse]
    def post_list_top_get(opts = {})
      data, _status_code, _headers = post_list_top_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [Array<(PostPagedListReadPublicResponse, Fixnum, Hash)>] PostPagedListReadPublicResponse data, response status code and response headers
    def post_list_top_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_top_get ...'
      end
      # resource path
      local_var_path = '/post/list/top'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_top_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_list_top_options(opts = {})
      post_list_top_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_list_top_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_list_top_options ...'
      end
      # resource path
      local_var_path = '/post/list/top'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_list_top_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_options(opts = {})
      post_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_options ...'
      end
      # resource path
      local_var_path = '/post'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param post_create_request 
    # @param [Hash] opts the optional parameters
    # @return [PostCreateResponse]
    def post_post(post_create_request, opts = {})
      data, _status_code, _headers = post_post_with_http_info(post_create_request, opts)
      data
    end

    # @param post_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostCreateResponse, Fixnum, Hash)>] PostCreateResponse data, response status code and response headers
    def post_post_with_http_info(post_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_post ...'
      end
      # verify the required parameter 'post_create_request' is set
      if @api_client.config.client_side_validation && post_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_create_request' when calling DefaultApi.post_post"
      end
      # resource path
      local_var_path = '/post'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param post_update_request 
    # @param [Hash] opts the optional parameters
    # @return [PostReadResponse]
    def post_put(post_update_request, opts = {})
      data, _status_code, _headers = post_put_with_http_info(post_update_request, opts)
      data
    end

    # @param post_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostReadResponse, Fixnum, Hash)>] PostReadResponse data, response status code and response headers
    def post_put_with_http_info(post_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_put ...'
      end
      # verify the required parameter 'post_update_request' is set
      if @api_client.config.client_side_validation && post_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_update_request' when calling DefaultApi.post_put"
      end
      # resource path
      local_var_path = '/post'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostReadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_rate_options(opts = {})
      post_rate_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_rate_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_rate_options ...'
      end
      # resource path
      local_var_path = '/post/rate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_rate_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [RatingUpdateResponse]
    def post_rate_post(rating_update_request, opts = {})
      data, _status_code, _headers = post_rate_post_with_http_info(rating_update_request, opts)
      data
    end

    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RatingUpdateResponse, Fixnum, Hash)>] RatingUpdateResponse data, response status code and response headers
    def post_rate_post_with_http_info(rating_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_rate_post ...'
      end
      # verify the required parameter 'rating_update_request' is set
      if @api_client.config.client_side_validation && rating_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'rating_update_request' when calling DefaultApi.post_rate_post"
      end
      # resource path
      local_var_path = '/post/rate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rating_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RatingUpdateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_rate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_report_options(opts = {})
      post_report_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_report_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_report_options ...'
      end
      # resource path
      local_var_path = '/post/report'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_report_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param report_update_request 
    # @param [Hash] opts the optional parameters
    # @return [ReportUpdateResponse]
    def post_report_post(report_update_request, opts = {})
      data, _status_code, _headers = post_report_post_with_http_info(report_update_request, opts)
      data
    end

    # @param report_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportUpdateResponse, Fixnum, Hash)>] ReportUpdateResponse data, response status code and response headers
    def post_report_post_with_http_info(report_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_report_post ...'
      end
      # verify the required parameter 'report_update_request' is set
      if @api_client.config.client_side_validation && report_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'report_update_request' when calling DefaultApi.post_report_post"
      end
      # resource path
      local_var_path = '/post/report'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(report_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportUpdateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_report_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_upload_options(opts = {})
      post_upload_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_upload_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_upload_options ...'
      end
      # resource path
      local_var_path = '/post/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_upload_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param upload_request_generic 
    # @param [Hash] opts the optional parameters
    # @return [UploadResponse]
    def post_upload_post(upload_request_generic, opts = {})
      data, _status_code, _headers = post_upload_post_with_http_info(upload_request_generic, opts)
      data
    end

    # @param upload_request_generic 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadResponse, Fixnum, Hash)>] UploadResponse data, response status code and response headers
    def post_upload_post_with_http_info(upload_request_generic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_upload_post ...'
      end
      # verify the required parameter 'upload_request_generic' is set
      if @api_client.config.client_side_validation && upload_request_generic.nil?
        fail ArgumentError, "Missing the required parameter 'upload_request_generic' when calling DefaultApi.post_upload_post"
      end
      # resource path
      local_var_path = '/post/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upload_request_generic)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 
    # @return [PostRemoteMetaProxyResponse]
    def post_utils_remote_meta_proxy_get(opts = {})
      data, _status_code, _headers = post_utils_remote_meta_proxy_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 
    # @return [Array<(PostRemoteMetaProxyResponse, Fixnum, Hash)>] PostRemoteMetaProxyResponse data, response status code and response headers
    def post_utils_remote_meta_proxy_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_utils_remote_meta_proxy_get ...'
      end
      # resource path
      local_var_path = '/post/utils/remote-meta-proxy'

      # query parameters
      query_params = {}
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostRemoteMetaProxyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_utils_remote_meta_proxy_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_utils_remote_meta_proxy_options(opts = {})
      post_utils_remote_meta_proxy_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_utils_remote_meta_proxy_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_utils_remote_meta_proxy_options ...'
      end
      # resource path
      local_var_path = '/post/utils/remote-meta-proxy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_utils_remote_meta_proxy_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :aesthetics 
    # @option opts [String] :tags 
    # @option opts [String] :page 
    # @return [CreativeSearchResponse]
    def search_creative_get(opts = {})
      data, _status_code, _headers = search_creative_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :aesthetics 
    # @option opts [String] :tags 
    # @option opts [String] :page 
    # @return [Array<(CreativeSearchResponse, Fixnum, Hash)>] CreativeSearchResponse data, response status code and response headers
    def search_creative_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_creative_get ...'
      end
      # resource path
      local_var_path = '/search/creative'

      # query parameters
      query_params = {}
      query_params[:'aesthetics'] = opts[:'aesthetics'] if !opts[:'aesthetics'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreativeSearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_creative_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def search_creative_options(opts = {})
      search_creative_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_creative_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_creative_options ...'
      end
      # resource path
      local_var_path = '/search/creative'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_creative_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_utils_user_configure_imported_options(opts = {})
      test_utils_user_configure_imported_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_utils_user_configure_imported_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_imported_options ...'
      end
      # resource path
      local_var_path = '/test-utils/user/configure/imported'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_imported_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [UserInvitationReadPublicResponse]
    def test_utils_user_configure_imported_post(configure_user_request, opts = {})
      data, _status_code, _headers = test_utils_user_configure_imported_post_with_http_info(configure_user_request, opts)
      data
    end

    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitationReadPublicResponse, Fixnum, Hash)>] UserInvitationReadPublicResponse data, response status code and response headers
    def test_utils_user_configure_imported_post_with_http_info(configure_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_imported_post ...'
      end
      # verify the required parameter 'configure_user_request' is set
      if @api_client.config.client_side_validation && configure_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'configure_user_request' when calling DefaultApi.test_utils_user_configure_imported_post"
      end
      # resource path
      local_var_path = '/test-utils/user/configure/imported'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configure_user_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_imported_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_utils_user_configure_imported_whitelisted_options(opts = {})
      test_utils_user_configure_imported_whitelisted_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_utils_user_configure_imported_whitelisted_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_imported_whitelisted_options ...'
      end
      # resource path
      local_var_path = '/test-utils/user/configure/imported-whitelisted'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_imported_whitelisted_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [UserInvitationReadPublicResponse]
    def test_utils_user_configure_imported_whitelisted_post(configure_user_request, opts = {})
      data, _status_code, _headers = test_utils_user_configure_imported_whitelisted_post_with_http_info(configure_user_request, opts)
      data
    end

    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitationReadPublicResponse, Fixnum, Hash)>] UserInvitationReadPublicResponse data, response status code and response headers
    def test_utils_user_configure_imported_whitelisted_post_with_http_info(configure_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_imported_whitelisted_post ...'
      end
      # verify the required parameter 'configure_user_request' is set
      if @api_client.config.client_side_validation && configure_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'configure_user_request' when calling DefaultApi.test_utils_user_configure_imported_whitelisted_post"
      end
      # resource path
      local_var_path = '/test-utils/user/configure/imported-whitelisted'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configure_user_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_imported_whitelisted_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_utils_user_configure_invited_options(opts = {})
      test_utils_user_configure_invited_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_utils_user_configure_invited_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_invited_options ...'
      end
      # resource path
      local_var_path = '/test-utils/user/configure/invited'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_invited_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [UserInvitationReadPublicResponse]
    def test_utils_user_configure_invited_post(configure_user_request, opts = {})
      data, _status_code, _headers = test_utils_user_configure_invited_post_with_http_info(configure_user_request, opts)
      data
    end

    # @param configure_user_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitationReadPublicResponse, Fixnum, Hash)>] UserInvitationReadPublicResponse data, response status code and response headers
    def test_utils_user_configure_invited_post_with_http_info(configure_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.test_utils_user_configure_invited_post ...'
      end
      # verify the required parameter 'configure_user_request' is set
      if @api_client.config.client_side_validation && configure_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'configure_user_request' when calling DefaultApi.test_utils_user_configure_invited_post"
      end
      # resource path
      local_var_path = '/test-utils/user/configure/invited'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configure_user_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#test_utils_user_configure_invited_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_node_options(opts = {})
      upload_node_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_node_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_node_options ...'
      end
      # resource path
      local_var_path = '/upload/node'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_node_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param upload_request 
    # @param [Hash] opts the optional parameters
    # @return [UploadResponse]
    def upload_node_post(upload_request, opts = {})
      data, _status_code, _headers = upload_node_post_with_http_info(upload_request, opts)
      data
    end

    # @param upload_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadResponse, Fixnum, Hash)>] UploadResponse data, response status code and response headers
    def upload_node_post_with_http_info(upload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_node_post ...'
      end
      # verify the required parameter 'upload_request' is set
      if @api_client.config.client_side_validation && upload_request.nil?
        fail ArgumentError, "Missing the required parameter 'upload_request' when calling DefaultApi.upload_node_post"
      end
      # resource path
      local_var_path = '/upload/node'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(upload_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_node_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after 
    # @option opts [String] :limit 
    # @return [AnyResponse]
    def user_activity_stream_get(opts = {})
      data, _status_code, _headers = user_activity_stream_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :after 
    # @option opts [String] :limit 
    # @return [Array<(AnyResponse, Fixnum, Hash)>] AnyResponse data, response status code and response headers
    def user_activity_stream_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_activity_stream_get ...'
      end
      # resource path
      local_var_path = '/user/activityStream'

      # query parameters
      query_params = {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_activity_stream_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_activity_stream_options(opts = {})
      user_activity_stream_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_activity_stream_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_activity_stream_options ...'
      end
      # resource path
      local_var_path = '/user/activityStream'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_activity_stream_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username 
    # @return [UserAvailabilityResponse]
    def user_availability_get(opts = {})
      data, _status_code, _headers = user_availability_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :username 
    # @return [Array<(UserAvailabilityResponse, Fixnum, Hash)>] UserAvailabilityResponse data, response status code and response headers
    def user_availability_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_availability_get ...'
      end
      # resource path
      local_var_path = '/user/availability'

      # query parameters
      query_params = {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAvailabilityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_availability_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_availability_options(opts = {})
      user_availability_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_availability_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_availability_options ...'
      end
      # resource path
      local_var_path = '/user/availability'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_availability_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [UserReadPrivateResponse]
    def user_current_get(opts = {})
      data, _status_code, _headers = user_current_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(UserReadPrivateResponse, Fixnum, Hash)>] UserReadPrivateResponse data, response status code and response headers
    def user_current_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_current_get ...'
      end
      # resource path
      local_var_path = '/user/current'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPrivateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_current_options(opts = {})
      user_current_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_current_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_current_options ...'
      end
      # resource path
      local_var_path = '/user/current'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_current_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_delete_request 
    # @param [Hash] opts the optional parameters
    # @return [OkResponse]
    def user_delete(user_delete_request, opts = {})
      data, _status_code, _headers = user_delete_with_http_info(user_delete_request, opts)
      data
    end

    # @param user_delete_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OkResponse, Fixnum, Hash)>] OkResponse data, response status code and response headers
    def user_delete_with_http_info(user_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_delete ...'
      end
      # verify the required parameter 'user_delete_request' is set
      if @api_client.config.client_side_validation && user_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_delete_request' when calling DefaultApi.user_delete"
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_delete_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username 
    # @option opts [String] :id 
    # @return [UserReadPublicResponse]
    def user_get(opts = {})
      data, _status_code, _headers = user_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :username 
    # @option opts [String] :id 
    # @return [Array<(UserReadPublicResponse, Fixnum, Hash)>] UserReadPublicResponse data, response status code and response headers
    def user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_get ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :hash 
    # @return [UserInvitationReadPublicResponse]
    def user_invite_hash_get(opts = {})
      data, _status_code, _headers = user_invite_hash_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :hash 
    # @return [Array<(UserInvitationReadPublicResponse, Fixnum, Hash)>] UserInvitationReadPublicResponse data, response status code and response headers
    def user_invite_hash_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invite_hash_get ...'
      end
      # resource path
      local_var_path = '/user/invite/hash'

      # query parameters
      query_params = {}
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invite_hash_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_invite_hash_options(opts = {})
      user_invite_hash_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_invite_hash_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invite_hash_options ...'
      end
      # resource path
      local_var_path = '/user/invite/hash'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invite_hash_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_invite_options(opts = {})
      user_invite_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_invite_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invite_options ...'
      end
      # resource path
      local_var_path = '/user/invite'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invite_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_invite_request 
    # @param [Hash] opts the optional parameters
    # @return [UserInvitationReadPublicResponse]
    def user_invite_post(user_invite_request, opts = {})
      data, _status_code, _headers = user_invite_post_with_http_info(user_invite_request, opts)
      data
    end

    # @param user_invite_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitationReadPublicResponse, Fixnum, Hash)>] UserInvitationReadPublicResponse data, response status code and response headers
    def user_invite_post_with_http_info(user_invite_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invite_post ...'
      end
      # verify the required parameter 'user_invite_request' is set
      if @api_client.config.client_side_validation && user_invite_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_invite_request' when calling DefaultApi.user_invite_post"
      end
      # resource path
      local_var_path = '/user/invite'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_invite_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invite_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [UserInvitationPagedListReadPublicResponse]
    def user_invitees_get(opts = {})
      data, _status_code, _headers = user_invitees_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [Array<(UserInvitationPagedListReadPublicResponse, Fixnum, Hash)>] UserInvitationPagedListReadPublicResponse data, response status code and response headers
    def user_invitees_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invitees_get ...'
      end
      # resource path
      local_var_path = '/user/invitees'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invitees_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_invitees_options(opts = {})
      user_invitees_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_invitees_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invitees_options ...'
      end
      # resource path
      local_var_path = '/user/invitees'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invitees_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [UserInvitationPagedListReadPublicResponse]
    def user_invitor_get(opts = {})
      data, _status_code, _headers = user_invitor_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [Array<(UserInvitationPagedListReadPublicResponse, Fixnum, Hash)>] UserInvitationPagedListReadPublicResponse data, response status code and response headers
    def user_invitor_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invitor_get ...'
      end
      # resource path
      local_var_path = '/user/invitor'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invitor_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_invitor_options(opts = {})
      user_invitor_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_invitor_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_invitor_options ...'
      end
      # resource path
      local_var_path = '/user/invitor'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_invitor_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [UserPagedListReadPublicResponse]
    def user_list_search_get(opts = {})
      data, _status_code, _headers = user_list_search_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @option opts [String] :q 
    # @return [Array<(UserPagedListReadPublicResponse, Fixnum, Hash)>] UserPagedListReadPublicResponse data, response status code and response headers
    def user_list_search_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_list_search_get ...'
      end
      # resource path
      local_var_path = '/user/list/search'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_list_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_list_search_options(opts = {})
      user_list_search_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_list_search_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_list_search_options ...'
      end
      # resource path
      local_var_path = '/user/list/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_list_search_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [UserPagedListReadPublicResponse]
    def user_list_top_get(opts = {})
      data, _status_code, _headers = user_list_top_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction 
    # @option opts [String] :content_type 
    # @option opts [String] :page 
    # @option opts [String] :order_by 
    # @return [Array<(UserPagedListReadPublicResponse, Fixnum, Hash)>] UserPagedListReadPublicResponse data, response status code and response headers
    def user_list_top_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_list_top_get ...'
      end
      # resource path
      local_var_path = '/user/list/top'

      # query parameters
      query_params = {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_list_top_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_list_top_options(opts = {})
      user_list_top_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_list_top_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_list_top_options ...'
      end
      # resource path
      local_var_path = '/user/list/top'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_list_top_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [MoodPagedListReadPublicResponse]
    def user_moods_get(opts = {})
      data, _status_code, _headers = user_moods_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(MoodPagedListReadPublicResponse, Fixnum, Hash)>] MoodPagedListReadPublicResponse data, response status code and response headers
    def user_moods_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_moods_get ...'
      end
      # resource path
      local_var_path = '/user/moods'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoodPagedListReadPublicResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_moods_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_moods_options(opts = {})
      user_moods_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_moods_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_moods_options ...'
      end
      # resource path
      local_var_path = '/user/moods'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_moods_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_options(opts = {})
      user_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_options ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_create_request 
    # @param [Hash] opts the optional parameters
    # @return [UserReadPrivateResponse]
    def user_post(user_create_request, opts = {})
      data, _status_code, _headers = user_post_with_http_info(user_create_request, opts)
      data
    end

    # @param user_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserReadPrivateResponse, Fixnum, Hash)>] UserReadPrivateResponse data, response status code and response headers
    def user_post_with_http_info(user_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_post ...'
      end
      # verify the required parameter 'user_create_request' is set
      if @api_client.config.client_side_validation && user_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_create_request' when calling DefaultApi.user_post"
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_create_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPrivateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_preregister_options(opts = {})
      user_preregister_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_preregister_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_preregister_options ...'
      end
      # resource path
      local_var_path = '/user/preregister'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_preregister_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_pre_register_request 
    # @param [Hash] opts the optional parameters
    # @return [UserReadPrivateResponse]
    def user_preregister_post(user_pre_register_request, opts = {})
      data, _status_code, _headers = user_preregister_post_with_http_info(user_pre_register_request, opts)
      data
    end

    # @param user_pre_register_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserReadPrivateResponse, Fixnum, Hash)>] UserReadPrivateResponse data, response status code and response headers
    def user_preregister_post_with_http_info(user_pre_register_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_preregister_post ...'
      end
      # verify the required parameter 'user_pre_register_request' is set
      if @api_client.config.client_side_validation && user_pre_register_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_pre_register_request' when calling DefaultApi.user_preregister_post"
      end
      # resource path
      local_var_path = '/user/preregister'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_pre_register_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPrivateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_preregister_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_update_request 
    # @param [Hash] opts the optional parameters
    # @return [UserReadPrivateResponse]
    def user_put(user_update_request, opts = {})
      data, _status_code, _headers = user_put_with_http_info(user_update_request, opts)
      data
    end

    # @param user_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserReadPrivateResponse, Fixnum, Hash)>] UserReadPrivateResponse data, response status code and response headers
    def user_put_with_http_info(user_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_put ...'
      end
      # verify the required parameter 'user_update_request' is set
      if @api_client.config.client_side_validation && user_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_update_request' when calling DefaultApi.user_put"
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPrivateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [PagedRatedResponseUser]
    def user_rated_in_get(opts = {})
      data, _status_code, _headers = user_rated_in_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(PagedRatedResponseUser, Fixnum, Hash)>] PagedRatedResponseUser data, response status code and response headers
    def user_rated_in_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_in_get ...'
      end
      # resource path
      local_var_path = '/user/rated/in'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedRatedResponseUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_in_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_rated_in_options(opts = {})
      user_rated_in_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_rated_in_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_in_options ...'
      end
      # resource path
      local_var_path = '/user/rated/in'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_in_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [PagedRatedResponsePost]
    def user_rated_out_posts_get(opts = {})
      data, _status_code, _headers = user_rated_out_posts_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(PagedRatedResponsePost, Fixnum, Hash)>] PagedRatedResponsePost data, response status code and response headers
    def user_rated_out_posts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_out_posts_get ...'
      end
      # resource path
      local_var_path = '/user/rated/out/posts'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedRatedResponsePost')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_out_posts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_rated_out_posts_options(opts = {})
      user_rated_out_posts_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_rated_out_posts_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_out_posts_options ...'
      end
      # resource path
      local_var_path = '/user/rated/out/posts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_out_posts_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [PagedRatedResponseUser]
    def user_rated_out_users_get(opts = {})
      data, _status_code, _headers = user_rated_out_users_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :page 
    # @return [Array<(PagedRatedResponseUser, Fixnum, Hash)>] PagedRatedResponseUser data, response status code and response headers
    def user_rated_out_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_out_users_get ...'
      end
      # resource path
      local_var_path = '/user/rated/out/users'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagedRatedResponseUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_out_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_rated_out_users_options(opts = {})
      user_rated_out_users_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_rated_out_users_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_rated_out_users_options ...'
      end
      # resource path
      local_var_path = '/user/rated/out/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_rated_out_users_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_stake_options(opts = {})
      user_stake_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_stake_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_stake_options ...'
      end
      # resource path
      local_var_path = '/user/stake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_stake_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_stake_request 
    # @param [Hash] opts the optional parameters
    # @return [AnyResponse]
    def user_stake_post(user_stake_request, opts = {})
      data, _status_code, _headers = user_stake_post_with_http_info(user_stake_request, opts)
      data
    end

    # @param user_stake_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyResponse, Fixnum, Hash)>] AnyResponse data, response status code and response headers
    def user_stake_post_with_http_info(user_stake_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_stake_post ...'
      end
      # verify the required parameter 'user_stake_request' is set
      if @api_client.config.client_side_validation && user_stake_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_stake_request' when calling DefaultApi.user_stake_post"
      end
      # resource path
      local_var_path = '/user/stake'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_stake_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_stake_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_sync_contacts_options(opts = {})
      user_sync_contacts_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_sync_contacts_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_sync_contacts_options ...'
      end
      # resource path
      local_var_path = '/user/syncContacts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_sync_contacts_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param sync_contacts_request 
    # @param [Hash] opts the optional parameters
    # @return [SyncContactsResponse]
    def user_sync_contacts_post(sync_contacts_request, opts = {})
      data, _status_code, _headers = user_sync_contacts_post_with_http_info(sync_contacts_request, opts)
      data
    end

    # @param sync_contacts_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyncContactsResponse, Fixnum, Hash)>] SyncContactsResponse data, response status code and response headers
    def user_sync_contacts_post_with_http_info(sync_contacts_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_sync_contacts_post ...'
      end
      # verify the required parameter 'sync_contacts_request' is set
      if @api_client.config.client_side_validation && sync_contacts_request.nil?
        fail ArgumentError, "Missing the required parameter 'sync_contacts_request' when calling DefaultApi.user_sync_contacts_post"
      end
      # resource path
      local_var_path = '/user/syncContacts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sync_contacts_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SyncContactsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_sync_contacts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_transfer_options(opts = {})
      user_transfer_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_transfer_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_transfer_options ...'
      end
      # resource path
      local_var_path = '/user/transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_transfer_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_transfer_request 
    # @param [Hash] opts the optional parameters
    # @return [UserReadPrivateResponse]
    def user_transfer_post(user_transfer_request, opts = {})
      data, _status_code, _headers = user_transfer_post_with_http_info(user_transfer_request, opts)
      data
    end

    # @param user_transfer_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserReadPrivateResponse, Fixnum, Hash)>] UserReadPrivateResponse data, response status code and response headers
    def user_transfer_post_with_http_info(user_transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_transfer_post ...'
      end
      # verify the required parameter 'user_transfer_request' is set
      if @api_client.config.client_side_validation && user_transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_transfer_request' when calling DefaultApi.user_transfer_post"
      end
      # resource path
      local_var_path = '/user/transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_transfer_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserReadPrivateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_transfer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_upload_options(opts = {})
      user_upload_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_upload_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_upload_options ...'
      end
      # resource path
      local_var_path = '/user/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_upload_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param user_upload_request 
    # @param [Hash] opts the optional parameters
    # @return [UploadResponse]
    def user_upload_post(user_upload_request, opts = {})
      data, _status_code, _headers = user_upload_post_with_http_info(user_upload_request, opts)
      data
    end

    # @param user_upload_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadResponse, Fixnum, Hash)>] UploadResponse data, response status code and response headers
    def user_upload_post_with_http_info(user_upload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_upload_post ...'
      end
      # verify the required parameter 'user_upload_request' is set
      if @api_client.config.client_side_validation && user_upload_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_upload_request' when calling DefaultApi.user_upload_post"
      end
      # resource path
      local_var_path = '/user/upload'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_upload_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_user_rate_options(opts = {})
      user_user_rate_options_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_user_rate_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_user_rate_options ...'
      end
      # resource path
      local_var_path = '/user/userRate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_user_rate_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [RatingUpdateResponse]
    def user_user_rate_post(rating_update_request, opts = {})
      data, _status_code, _headers = user_user_rate_post_with_http_info(rating_update_request, opts)
      data
    end

    # @param rating_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RatingUpdateResponse, Fixnum, Hash)>] RatingUpdateResponse data, response status code and response headers
    def user_user_rate_post_with_http_info(rating_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.user_user_rate_post ...'
      end
      # verify the required parameter 'rating_update_request' is set
      if @api_client.config.client_side_validation && rating_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'rating_update_request' when calling DefaultApi.user_user_rate_post"
      end
      # resource path
      local_var_path = '/user/userRate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rating_update_request)
      auth_names = ['newgraph-api-eu-dev']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RatingUpdateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#user_user_rate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
