/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcListDaoProposalsResponseRows {
  #[serde(rename = "summary")]
  summary: Option<String>,
  #[serde(rename = "proposer")]
  proposer: Option<String>,
  #[serde(rename = "vote_start")]
  vote_start: Option<String>,
  #[serde(rename = "more")]
  more: Option<bool>,
  #[serde(rename = "next_key")]
  next_key: Option<String>,
  #[serde(rename = "vote_end")]
  vote_end: Option<String>,
  #[serde(rename = "id")]
  id: Option<f32>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "vote_no")]
  vote_no: Option<::models::BcListDaoProposalsResponseVoteNo>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "vote_yes")]
  vote_yes: Option<::models::BcListDaoProposalsResponseVoteNo>,
  #[serde(rename = "status")]
  status: Option<String>
}

impl BcListDaoProposalsResponseRows {
  pub fn new() -> BcListDaoProposalsResponseRows {
    BcListDaoProposalsResponseRows {
      summary: None,
      proposer: None,
      vote_start: None,
      more: None,
      next_key: None,
      vote_end: None,
      id: None,
      title: None,
      vote_no: None,
      url: None,
      vote_yes: None,
      status: None
    }
  }

  pub fn set_summary(&mut self, summary: String) {
    self.summary = Some(summary);
  }

  pub fn with_summary(mut self, summary: String) -> BcListDaoProposalsResponseRows {
    self.summary = Some(summary);
    self
  }

  pub fn summary(&self) -> Option<&String> {
    self.summary.as_ref()
  }

  pub fn reset_summary(&mut self) {
    self.summary = None;
  }

  pub fn set_proposer(&mut self, proposer: String) {
    self.proposer = Some(proposer);
  }

  pub fn with_proposer(mut self, proposer: String) -> BcListDaoProposalsResponseRows {
    self.proposer = Some(proposer);
    self
  }

  pub fn proposer(&self) -> Option<&String> {
    self.proposer.as_ref()
  }

  pub fn reset_proposer(&mut self) {
    self.proposer = None;
  }

  pub fn set_vote_start(&mut self, vote_start: String) {
    self.vote_start = Some(vote_start);
  }

  pub fn with_vote_start(mut self, vote_start: String) -> BcListDaoProposalsResponseRows {
    self.vote_start = Some(vote_start);
    self
  }

  pub fn vote_start(&self) -> Option<&String> {
    self.vote_start.as_ref()
  }

  pub fn reset_vote_start(&mut self) {
    self.vote_start = None;
  }

  pub fn set_more(&mut self, more: bool) {
    self.more = Some(more);
  }

  pub fn with_more(mut self, more: bool) -> BcListDaoProposalsResponseRows {
    self.more = Some(more);
    self
  }

  pub fn more(&self) -> Option<&bool> {
    self.more.as_ref()
  }

  pub fn reset_more(&mut self) {
    self.more = None;
  }

  pub fn set_next_key(&mut self, next_key: String) {
    self.next_key = Some(next_key);
  }

  pub fn with_next_key(mut self, next_key: String) -> BcListDaoProposalsResponseRows {
    self.next_key = Some(next_key);
    self
  }

  pub fn next_key(&self) -> Option<&String> {
    self.next_key.as_ref()
  }

  pub fn reset_next_key(&mut self) {
    self.next_key = None;
  }

  pub fn set_vote_end(&mut self, vote_end: String) {
    self.vote_end = Some(vote_end);
  }

  pub fn with_vote_end(mut self, vote_end: String) -> BcListDaoProposalsResponseRows {
    self.vote_end = Some(vote_end);
    self
  }

  pub fn vote_end(&self) -> Option<&String> {
    self.vote_end.as_ref()
  }

  pub fn reset_vote_end(&mut self) {
    self.vote_end = None;
  }

  pub fn set_id(&mut self, id: f32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: f32) -> BcListDaoProposalsResponseRows {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&f32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> BcListDaoProposalsResponseRows {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_vote_no(&mut self, vote_no: ::models::BcListDaoProposalsResponseVoteNo) {
    self.vote_no = Some(vote_no);
  }

  pub fn with_vote_no(mut self, vote_no: ::models::BcListDaoProposalsResponseVoteNo) -> BcListDaoProposalsResponseRows {
    self.vote_no = Some(vote_no);
    self
  }

  pub fn vote_no(&self) -> Option<&::models::BcListDaoProposalsResponseVoteNo> {
    self.vote_no.as_ref()
  }

  pub fn reset_vote_no(&mut self) {
    self.vote_no = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> BcListDaoProposalsResponseRows {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_vote_yes(&mut self, vote_yes: ::models::BcListDaoProposalsResponseVoteNo) {
    self.vote_yes = Some(vote_yes);
  }

  pub fn with_vote_yes(mut self, vote_yes: ::models::BcListDaoProposalsResponseVoteNo) -> BcListDaoProposalsResponseRows {
    self.vote_yes = Some(vote_yes);
    self
  }

  pub fn vote_yes(&self) -> Option<&::models::BcListDaoProposalsResponseVoteNo> {
    self.vote_yes.as_ref()
  }

  pub fn reset_vote_yes(&mut self) {
    self.vote_yes = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> BcListDaoProposalsResponseRows {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



