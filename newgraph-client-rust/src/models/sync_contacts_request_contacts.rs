/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SyncContactsRequestContacts {
  #[serde(rename = "birthday")]
  birthday: Option<String>,
  #[serde(rename = "identifier")]
  identifier: Option<String>,
  #[serde(rename = "androidAccountName")]
  android_account_name: Option<String>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "prefix")]
  prefix: Option<String>,
  #[serde(rename = "givenName")]
  given_name: Option<String>,
  #[serde(rename = "jobTitle")]
  job_title: Option<String>,
  #[serde(rename = "phones")]
  phones: Option<Vec<::models::SyncContactsRequestPhones>>,
  #[serde(rename = "avatar")]
  avatar: Option<String>,
  #[serde(rename = "suffix")]
  suffix: Option<String>,
  #[serde(rename = "postalAddresses")]
  postal_addresses: Option<Vec<::models::SyncContactsRequestPostalAddresses>>,
  #[serde(rename = "emails")]
  emails: Option<Vec<::models::SyncContactsRequestPhones>>,
  #[serde(rename = "androidAccountType")]
  android_account_type: Option<String>,
  #[serde(rename = "familyName")]
  family_name: Option<String>,
  #[serde(rename = "middleName")]
  middle_name: Option<String>,
  #[serde(rename = "company")]
  company: Option<String>,
  #[serde(rename = "androidAccountTypeRaw")]
  android_account_type_raw: Option<String>
}

impl SyncContactsRequestContacts {
  pub fn new() -> SyncContactsRequestContacts {
    SyncContactsRequestContacts {
      birthday: None,
      identifier: None,
      android_account_name: None,
      display_name: None,
      prefix: None,
      given_name: None,
      job_title: None,
      phones: None,
      avatar: None,
      suffix: None,
      postal_addresses: None,
      emails: None,
      android_account_type: None,
      family_name: None,
      middle_name: None,
      company: None,
      android_account_type_raw: None
    }
  }

  pub fn set_birthday(&mut self, birthday: String) {
    self.birthday = Some(birthday);
  }

  pub fn with_birthday(mut self, birthday: String) -> SyncContactsRequestContacts {
    self.birthday = Some(birthday);
    self
  }

  pub fn birthday(&self) -> Option<&String> {
    self.birthday.as_ref()
  }

  pub fn reset_birthday(&mut self) {
    self.birthday = None;
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = Some(identifier);
  }

  pub fn with_identifier(mut self, identifier: String) -> SyncContactsRequestContacts {
    self.identifier = Some(identifier);
    self
  }

  pub fn identifier(&self) -> Option<&String> {
    self.identifier.as_ref()
  }

  pub fn reset_identifier(&mut self) {
    self.identifier = None;
  }

  pub fn set_android_account_name(&mut self, android_account_name: String) {
    self.android_account_name = Some(android_account_name);
  }

  pub fn with_android_account_name(mut self, android_account_name: String) -> SyncContactsRequestContacts {
    self.android_account_name = Some(android_account_name);
    self
  }

  pub fn android_account_name(&self) -> Option<&String> {
    self.android_account_name.as_ref()
  }

  pub fn reset_android_account_name(&mut self) {
    self.android_account_name = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> SyncContactsRequestContacts {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_prefix(&mut self, prefix: String) {
    self.prefix = Some(prefix);
  }

  pub fn with_prefix(mut self, prefix: String) -> SyncContactsRequestContacts {
    self.prefix = Some(prefix);
    self
  }

  pub fn prefix(&self) -> Option<&String> {
    self.prefix.as_ref()
  }

  pub fn reset_prefix(&mut self) {
    self.prefix = None;
  }

  pub fn set_given_name(&mut self, given_name: String) {
    self.given_name = Some(given_name);
  }

  pub fn with_given_name(mut self, given_name: String) -> SyncContactsRequestContacts {
    self.given_name = Some(given_name);
    self
  }

  pub fn given_name(&self) -> Option<&String> {
    self.given_name.as_ref()
  }

  pub fn reset_given_name(&mut self) {
    self.given_name = None;
  }

  pub fn set_job_title(&mut self, job_title: String) {
    self.job_title = Some(job_title);
  }

  pub fn with_job_title(mut self, job_title: String) -> SyncContactsRequestContacts {
    self.job_title = Some(job_title);
    self
  }

  pub fn job_title(&self) -> Option<&String> {
    self.job_title.as_ref()
  }

  pub fn reset_job_title(&mut self) {
    self.job_title = None;
  }

  pub fn set_phones(&mut self, phones: Vec<::models::SyncContactsRequestPhones>) {
    self.phones = Some(phones);
  }

  pub fn with_phones(mut self, phones: Vec<::models::SyncContactsRequestPhones>) -> SyncContactsRequestContacts {
    self.phones = Some(phones);
    self
  }

  pub fn phones(&self) -> Option<&Vec<::models::SyncContactsRequestPhones>> {
    self.phones.as_ref()
  }

  pub fn reset_phones(&mut self) {
    self.phones = None;
  }

  pub fn set_avatar(&mut self, avatar: String) {
    self.avatar = Some(avatar);
  }

  pub fn with_avatar(mut self, avatar: String) -> SyncContactsRequestContacts {
    self.avatar = Some(avatar);
    self
  }

  pub fn avatar(&self) -> Option<&String> {
    self.avatar.as_ref()
  }

  pub fn reset_avatar(&mut self) {
    self.avatar = None;
  }

  pub fn set_suffix(&mut self, suffix: String) {
    self.suffix = Some(suffix);
  }

  pub fn with_suffix(mut self, suffix: String) -> SyncContactsRequestContacts {
    self.suffix = Some(suffix);
    self
  }

  pub fn suffix(&self) -> Option<&String> {
    self.suffix.as_ref()
  }

  pub fn reset_suffix(&mut self) {
    self.suffix = None;
  }

  pub fn set_postal_addresses(&mut self, postal_addresses: Vec<::models::SyncContactsRequestPostalAddresses>) {
    self.postal_addresses = Some(postal_addresses);
  }

  pub fn with_postal_addresses(mut self, postal_addresses: Vec<::models::SyncContactsRequestPostalAddresses>) -> SyncContactsRequestContacts {
    self.postal_addresses = Some(postal_addresses);
    self
  }

  pub fn postal_addresses(&self) -> Option<&Vec<::models::SyncContactsRequestPostalAddresses>> {
    self.postal_addresses.as_ref()
  }

  pub fn reset_postal_addresses(&mut self) {
    self.postal_addresses = None;
  }

  pub fn set_emails(&mut self, emails: Vec<::models::SyncContactsRequestPhones>) {
    self.emails = Some(emails);
  }

  pub fn with_emails(mut self, emails: Vec<::models::SyncContactsRequestPhones>) -> SyncContactsRequestContacts {
    self.emails = Some(emails);
    self
  }

  pub fn emails(&self) -> Option<&Vec<::models::SyncContactsRequestPhones>> {
    self.emails.as_ref()
  }

  pub fn reset_emails(&mut self) {
    self.emails = None;
  }

  pub fn set_android_account_type(&mut self, android_account_type: String) {
    self.android_account_type = Some(android_account_type);
  }

  pub fn with_android_account_type(mut self, android_account_type: String) -> SyncContactsRequestContacts {
    self.android_account_type = Some(android_account_type);
    self
  }

  pub fn android_account_type(&self) -> Option<&String> {
    self.android_account_type.as_ref()
  }

  pub fn reset_android_account_type(&mut self) {
    self.android_account_type = None;
  }

  pub fn set_family_name(&mut self, family_name: String) {
    self.family_name = Some(family_name);
  }

  pub fn with_family_name(mut self, family_name: String) -> SyncContactsRequestContacts {
    self.family_name = Some(family_name);
    self
  }

  pub fn family_name(&self) -> Option<&String> {
    self.family_name.as_ref()
  }

  pub fn reset_family_name(&mut self) {
    self.family_name = None;
  }

  pub fn set_middle_name(&mut self, middle_name: String) {
    self.middle_name = Some(middle_name);
  }

  pub fn with_middle_name(mut self, middle_name: String) -> SyncContactsRequestContacts {
    self.middle_name = Some(middle_name);
    self
  }

  pub fn middle_name(&self) -> Option<&String> {
    self.middle_name.as_ref()
  }

  pub fn reset_middle_name(&mut self) {
    self.middle_name = None;
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> SyncContactsRequestContacts {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_android_account_type_raw(&mut self, android_account_type_raw: String) {
    self.android_account_type_raw = Some(android_account_type_raw);
  }

  pub fn with_android_account_type_raw(mut self, android_account_type_raw: String) -> SyncContactsRequestContacts {
    self.android_account_type_raw = Some(android_account_type_raw);
    self
  }

  pub fn android_account_type_raw(&self) -> Option<&String> {
    self.android_account_type_raw.as_ref()
  }

  pub fn reset_android_account_type_raw(&mut self) {
    self.android_account_type_raw = None;
  }

}



