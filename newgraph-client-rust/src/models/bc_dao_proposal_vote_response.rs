/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcDaoProposalVoteResponse {
  #[serde(rename = "daoId")]
  dao_id: Option<String>,
  #[serde(rename = "more")]
  more: Option<bool>,
  #[serde(rename = "next_key")]
  next_key: Option<String>,
  #[serde(rename = "rows")]
  rows: Option<Vec<::models::BcDaoProposalVoteResponseRows>>
}

impl BcDaoProposalVoteResponse {
  pub fn new() -> BcDaoProposalVoteResponse {
    BcDaoProposalVoteResponse {
      dao_id: None,
      more: None,
      next_key: None,
      rows: None
    }
  }

  pub fn set_dao_id(&mut self, dao_id: String) {
    self.dao_id = Some(dao_id);
  }

  pub fn with_dao_id(mut self, dao_id: String) -> BcDaoProposalVoteResponse {
    self.dao_id = Some(dao_id);
    self
  }

  pub fn dao_id(&self) -> Option<&String> {
    self.dao_id.as_ref()
  }

  pub fn reset_dao_id(&mut self) {
    self.dao_id = None;
  }

  pub fn set_more(&mut self, more: bool) {
    self.more = Some(more);
  }

  pub fn with_more(mut self, more: bool) -> BcDaoProposalVoteResponse {
    self.more = Some(more);
    self
  }

  pub fn more(&self) -> Option<&bool> {
    self.more.as_ref()
  }

  pub fn reset_more(&mut self) {
    self.more = None;
  }

  pub fn set_next_key(&mut self, next_key: String) {
    self.next_key = Some(next_key);
  }

  pub fn with_next_key(mut self, next_key: String) -> BcDaoProposalVoteResponse {
    self.next_key = Some(next_key);
    self
  }

  pub fn next_key(&self) -> Option<&String> {
    self.next_key.as_ref()
  }

  pub fn reset_next_key(&mut self) {
    self.next_key = None;
  }

  pub fn set_rows(&mut self, rows: Vec<::models::BcDaoProposalVoteResponseRows>) {
    self.rows = Some(rows);
  }

  pub fn with_rows(mut self, rows: Vec<::models::BcDaoProposalVoteResponseRows>) -> BcDaoProposalVoteResponse {
    self.rows = Some(rows);
    self
  }

  pub fn rows(&self) -> Option<&Vec<::models::BcDaoProposalVoteResponseRows>> {
    self.rows.as_ref()
  }

  pub fn reset_rows(&mut self) {
    self.rows = None;
  }

}



