/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcDaoProposalVoteRequest {
  #[serde(rename = "proposal_type")]
  proposal_type: Option<String>,
  #[serde(rename = "quantity")]
  quantity: String,
  #[serde(rename = "proposal_id")]
  proposal_id: String,
  #[serde(rename = "dao_id")]
  dao_id: Option<String>,
  #[serde(rename = "dao_owner")]
  dao_owner: Option<String>,
  #[serde(rename = "voter")]
  voter: String,
  #[serde(rename = "option")]
  option: String
}

impl BcDaoProposalVoteRequest {
  pub fn new(quantity: String, proposal_id: String, voter: String, option: String) -> BcDaoProposalVoteRequest {
    BcDaoProposalVoteRequest {
      proposal_type: None,
      quantity: quantity,
      proposal_id: proposal_id,
      dao_id: None,
      dao_owner: None,
      voter: voter,
      option: option
    }
  }

  pub fn set_proposal_type(&mut self, proposal_type: String) {
    self.proposal_type = Some(proposal_type);
  }

  pub fn with_proposal_type(mut self, proposal_type: String) -> BcDaoProposalVoteRequest {
    self.proposal_type = Some(proposal_type);
    self
  }

  pub fn proposal_type(&self) -> Option<&String> {
    self.proposal_type.as_ref()
  }

  pub fn reset_proposal_type(&mut self) {
    self.proposal_type = None;
  }

  pub fn set_quantity(&mut self, quantity: String) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: String) -> BcDaoProposalVoteRequest {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &String {
    &self.quantity
  }


  pub fn set_proposal_id(&mut self, proposal_id: String) {
    self.proposal_id = proposal_id;
  }

  pub fn with_proposal_id(mut self, proposal_id: String) -> BcDaoProposalVoteRequest {
    self.proposal_id = proposal_id;
    self
  }

  pub fn proposal_id(&self) -> &String {
    &self.proposal_id
  }


  pub fn set_dao_id(&mut self, dao_id: String) {
    self.dao_id = Some(dao_id);
  }

  pub fn with_dao_id(mut self, dao_id: String) -> BcDaoProposalVoteRequest {
    self.dao_id = Some(dao_id);
    self
  }

  pub fn dao_id(&self) -> Option<&String> {
    self.dao_id.as_ref()
  }

  pub fn reset_dao_id(&mut self) {
    self.dao_id = None;
  }

  pub fn set_dao_owner(&mut self, dao_owner: String) {
    self.dao_owner = Some(dao_owner);
  }

  pub fn with_dao_owner(mut self, dao_owner: String) -> BcDaoProposalVoteRequest {
    self.dao_owner = Some(dao_owner);
    self
  }

  pub fn dao_owner(&self) -> Option<&String> {
    self.dao_owner.as_ref()
  }

  pub fn reset_dao_owner(&mut self) {
    self.dao_owner = None;
  }

  pub fn set_voter(&mut self, voter: String) {
    self.voter = voter;
  }

  pub fn with_voter(mut self, voter: String) -> BcDaoProposalVoteRequest {
    self.voter = voter;
    self
  }

  pub fn voter(&self) -> &String {
    &self.voter
  }


  pub fn set_option(&mut self, option: String) {
    self.option = option;
  }

  pub fn with_option(mut self, option: String) -> BcDaoProposalVoteRequest {
    self.option = option;
    self
  }

  pub fn option(&self) -> &String {
    &self.option
  }


}



