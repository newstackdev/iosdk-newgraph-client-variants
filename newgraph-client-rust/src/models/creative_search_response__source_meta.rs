/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreativeSearchResponseSourceMeta {
  #[serde(rename = "date")]
  date: Option<String>,
  #[serde(rename = "summary")]
  summary: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "blog_name")]
  blog_name: Option<String>,
  #[serde(rename = "tags")]
  tags: Option<Vec<String>>,
  #[serde(rename = "short_url")]
  short_url: Option<String>
}

impl CreativeSearchResponseSourceMeta {
  pub fn new() -> CreativeSearchResponseSourceMeta {
    CreativeSearchResponseSourceMeta {
      date: None,
      summary: None,
      id: None,
      blog_name: None,
      tags: None,
      short_url: None
    }
  }

  pub fn set_date(&mut self, date: String) {
    self.date = Some(date);
  }

  pub fn with_date(mut self, date: String) -> CreativeSearchResponseSourceMeta {
    self.date = Some(date);
    self
  }

  pub fn date(&self) -> Option<&String> {
    self.date.as_ref()
  }

  pub fn reset_date(&mut self) {
    self.date = None;
  }

  pub fn set_summary(&mut self, summary: String) {
    self.summary = Some(summary);
  }

  pub fn with_summary(mut self, summary: String) -> CreativeSearchResponseSourceMeta {
    self.summary = Some(summary);
    self
  }

  pub fn summary(&self) -> Option<&String> {
    self.summary.as_ref()
  }

  pub fn reset_summary(&mut self) {
    self.summary = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> CreativeSearchResponseSourceMeta {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_blog_name(&mut self, blog_name: String) {
    self.blog_name = Some(blog_name);
  }

  pub fn with_blog_name(mut self, blog_name: String) -> CreativeSearchResponseSourceMeta {
    self.blog_name = Some(blog_name);
    self
  }

  pub fn blog_name(&self) -> Option<&String> {
    self.blog_name.as_ref()
  }

  pub fn reset_blog_name(&mut self) {
    self.blog_name = None;
  }

  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> CreativeSearchResponseSourceMeta {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<String>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_short_url(&mut self, short_url: String) {
    self.short_url = Some(short_url);
  }

  pub fn with_short_url(mut self, short_url: String) -> CreativeSearchResponseSourceMeta {
    self.short_url = Some(short_url);
    self
  }

  pub fn short_url(&self) -> Option<&String> {
    self.short_url.as_ref()
  }

  pub fn reset_short_url(&mut self) {
    self.short_url = None;
  }

}



