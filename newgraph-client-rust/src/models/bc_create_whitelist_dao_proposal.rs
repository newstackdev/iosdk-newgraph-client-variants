/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcCreateWhitelistDaoProposal {
  #[serde(rename = "quantity")]
  quantity: Option<String>,
  #[serde(rename = "proposer")]
  proposer: Option<String>,
  #[serde(rename = "vote_start")]
  vote_start: Option<String>,
  #[serde(rename = "dao_id")]
  dao_id: Option<String>,
  #[serde(rename = "dao_owner")]
  dao_owner: Option<String>,
  #[serde(rename = "vote_end")]
  vote_end: Option<String>,
  #[serde(rename = "user")]
  user: Option<String>,
  #[serde(rename = "proposer_prv_key")]
  proposer_prv_key: Option<String>
}

impl BcCreateWhitelistDaoProposal {
  pub fn new() -> BcCreateWhitelistDaoProposal {
    BcCreateWhitelistDaoProposal {
      quantity: None,
      proposer: None,
      vote_start: None,
      dao_id: None,
      dao_owner: None,
      vote_end: None,
      user: None,
      proposer_prv_key: None
    }
  }

  pub fn set_quantity(&mut self, quantity: String) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: String) -> BcCreateWhitelistDaoProposal {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&String> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_proposer(&mut self, proposer: String) {
    self.proposer = Some(proposer);
  }

  pub fn with_proposer(mut self, proposer: String) -> BcCreateWhitelistDaoProposal {
    self.proposer = Some(proposer);
    self
  }

  pub fn proposer(&self) -> Option<&String> {
    self.proposer.as_ref()
  }

  pub fn reset_proposer(&mut self) {
    self.proposer = None;
  }

  pub fn set_vote_start(&mut self, vote_start: String) {
    self.vote_start = Some(vote_start);
  }

  pub fn with_vote_start(mut self, vote_start: String) -> BcCreateWhitelistDaoProposal {
    self.vote_start = Some(vote_start);
    self
  }

  pub fn vote_start(&self) -> Option<&String> {
    self.vote_start.as_ref()
  }

  pub fn reset_vote_start(&mut self) {
    self.vote_start = None;
  }

  pub fn set_dao_id(&mut self, dao_id: String) {
    self.dao_id = Some(dao_id);
  }

  pub fn with_dao_id(mut self, dao_id: String) -> BcCreateWhitelistDaoProposal {
    self.dao_id = Some(dao_id);
    self
  }

  pub fn dao_id(&self) -> Option<&String> {
    self.dao_id.as_ref()
  }

  pub fn reset_dao_id(&mut self) {
    self.dao_id = None;
  }

  pub fn set_dao_owner(&mut self, dao_owner: String) {
    self.dao_owner = Some(dao_owner);
  }

  pub fn with_dao_owner(mut self, dao_owner: String) -> BcCreateWhitelistDaoProposal {
    self.dao_owner = Some(dao_owner);
    self
  }

  pub fn dao_owner(&self) -> Option<&String> {
    self.dao_owner.as_ref()
  }

  pub fn reset_dao_owner(&mut self) {
    self.dao_owner = None;
  }

  pub fn set_vote_end(&mut self, vote_end: String) {
    self.vote_end = Some(vote_end);
  }

  pub fn with_vote_end(mut self, vote_end: String) -> BcCreateWhitelistDaoProposal {
    self.vote_end = Some(vote_end);
    self
  }

  pub fn vote_end(&self) -> Option<&String> {
    self.vote_end.as_ref()
  }

  pub fn reset_vote_end(&mut self) {
    self.vote_end = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> BcCreateWhitelistDaoProposal {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_proposer_prv_key(&mut self, proposer_prv_key: String) {
    self.proposer_prv_key = Some(proposer_prv_key);
  }

  pub fn with_proposer_prv_key(mut self, proposer_prv_key: String) -> BcCreateWhitelistDaoProposal {
    self.proposer_prv_key = Some(proposer_prv_key);
    self
  }

  pub fn proposer_prv_key(&self) -> Option<&String> {
    self.proposer_prv_key.as_ref()
  }

  pub fn reset_proposer_prv_key(&mut self) {
    self.proposer_prv_key = None;
  }

}



