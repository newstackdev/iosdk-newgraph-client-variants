/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcAccCreateRequest {
  #[serde(rename = "newacc_pub_active_key")]
  newacc_pub_active_key: String,
  #[serde(rename = "newacc_pub_owner_key")]
  newacc_pub_owner_key: String,
  #[serde(rename = "payer_prv_key")]
  payer_prv_key: String,
  #[serde(rename = "xfer")]
  xfer: Option<bool>,
  #[serde(rename = "stake_cpu")]
  stake_cpu: Option<String>,
  #[serde(rename = "newUser")]
  new_user: String,
  #[serde(rename = "stake_ram")]
  stake_ram: Option<f32>,
  #[serde(rename = "payer")]
  payer: String,
  #[serde(rename = "stake_net")]
  stake_net: Option<String>
}

impl BcAccCreateRequest {
  pub fn new(newacc_pub_active_key: String, newacc_pub_owner_key: String, payer_prv_key: String, new_user: String, payer: String) -> BcAccCreateRequest {
    BcAccCreateRequest {
      newacc_pub_active_key: newacc_pub_active_key,
      newacc_pub_owner_key: newacc_pub_owner_key,
      payer_prv_key: payer_prv_key,
      xfer: None,
      stake_cpu: None,
      new_user: new_user,
      stake_ram: None,
      payer: payer,
      stake_net: None
    }
  }

  pub fn set_newacc_pub_active_key(&mut self, newacc_pub_active_key: String) {
    self.newacc_pub_active_key = newacc_pub_active_key;
  }

  pub fn with_newacc_pub_active_key(mut self, newacc_pub_active_key: String) -> BcAccCreateRequest {
    self.newacc_pub_active_key = newacc_pub_active_key;
    self
  }

  pub fn newacc_pub_active_key(&self) -> &String {
    &self.newacc_pub_active_key
  }


  pub fn set_newacc_pub_owner_key(&mut self, newacc_pub_owner_key: String) {
    self.newacc_pub_owner_key = newacc_pub_owner_key;
  }

  pub fn with_newacc_pub_owner_key(mut self, newacc_pub_owner_key: String) -> BcAccCreateRequest {
    self.newacc_pub_owner_key = newacc_pub_owner_key;
    self
  }

  pub fn newacc_pub_owner_key(&self) -> &String {
    &self.newacc_pub_owner_key
  }


  pub fn set_payer_prv_key(&mut self, payer_prv_key: String) {
    self.payer_prv_key = payer_prv_key;
  }

  pub fn with_payer_prv_key(mut self, payer_prv_key: String) -> BcAccCreateRequest {
    self.payer_prv_key = payer_prv_key;
    self
  }

  pub fn payer_prv_key(&self) -> &String {
    &self.payer_prv_key
  }


  pub fn set_xfer(&mut self, xfer: bool) {
    self.xfer = Some(xfer);
  }

  pub fn with_xfer(mut self, xfer: bool) -> BcAccCreateRequest {
    self.xfer = Some(xfer);
    self
  }

  pub fn xfer(&self) -> Option<&bool> {
    self.xfer.as_ref()
  }

  pub fn reset_xfer(&mut self) {
    self.xfer = None;
  }

  pub fn set_stake_cpu(&mut self, stake_cpu: String) {
    self.stake_cpu = Some(stake_cpu);
  }

  pub fn with_stake_cpu(mut self, stake_cpu: String) -> BcAccCreateRequest {
    self.stake_cpu = Some(stake_cpu);
    self
  }

  pub fn stake_cpu(&self) -> Option<&String> {
    self.stake_cpu.as_ref()
  }

  pub fn reset_stake_cpu(&mut self) {
    self.stake_cpu = None;
  }

  pub fn set_new_user(&mut self, new_user: String) {
    self.new_user = new_user;
  }

  pub fn with_new_user(mut self, new_user: String) -> BcAccCreateRequest {
    self.new_user = new_user;
    self
  }

  pub fn new_user(&self) -> &String {
    &self.new_user
  }


  pub fn set_stake_ram(&mut self, stake_ram: f32) {
    self.stake_ram = Some(stake_ram);
  }

  pub fn with_stake_ram(mut self, stake_ram: f32) -> BcAccCreateRequest {
    self.stake_ram = Some(stake_ram);
    self
  }

  pub fn stake_ram(&self) -> Option<&f32> {
    self.stake_ram.as_ref()
  }

  pub fn reset_stake_ram(&mut self) {
    self.stake_ram = None;
  }

  pub fn set_payer(&mut self, payer: String) {
    self.payer = payer;
  }

  pub fn with_payer(mut self, payer: String) -> BcAccCreateRequest {
    self.payer = payer;
    self
  }

  pub fn payer(&self) -> &String {
    &self.payer
  }


  pub fn set_stake_net(&mut self, stake_net: String) {
    self.stake_net = Some(stake_net);
  }

  pub fn with_stake_net(mut self, stake_net: String) -> BcAccCreateRequest {
    self.stake_net = Some(stake_net);
    self
  }

  pub fn stake_net(&self) -> Option<&String> {
    self.stake_net.as_ref()
  }

  pub fn reset_stake_net(&mut self) {
    self.stake_net = None;
  }

}



