/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcCollectionCreateRequest {
  #[serde(rename = "mkt_fee")]
  mkt_fee: Option<f32>,
  #[serde(rename = "template_name")]
  template_name: String,
  #[serde(rename = "template_fields")]
  template_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>,
  #[serde(rename = "xferable")]
  xferable: Option<bool>,
  #[serde(rename = "max_supply")]
  max_supply: Option<f32>,
  #[serde(rename = "allow_notify")]
  allow_notify: Option<bool>,
  #[serde(rename = "burnable")]
  burnable: Option<bool>,
  #[serde(rename = "schema_name")]
  schema_name: String,
  #[serde(rename = "schema_fields")]
  schema_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>,
  #[serde(rename = "user")]
  user: String,
  #[serde(rename = "user_prv_active_key")]
  user_prv_active_key: String,
  #[serde(rename = "collection_name")]
  collection_name: String
}

impl BcCollectionCreateRequest {
  pub fn new(template_name: String, template_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>, schema_name: String, schema_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>, user: String, user_prv_active_key: String, collection_name: String) -> BcCollectionCreateRequest {
    BcCollectionCreateRequest {
      mkt_fee: None,
      template_name: template_name,
      template_fields: template_fields,
      xferable: None,
      max_supply: None,
      allow_notify: None,
      burnable: None,
      schema_name: schema_name,
      schema_fields: schema_fields,
      user: user,
      user_prv_active_key: user_prv_active_key,
      collection_name: collection_name
    }
  }

  pub fn set_mkt_fee(&mut self, mkt_fee: f32) {
    self.mkt_fee = Some(mkt_fee);
  }

  pub fn with_mkt_fee(mut self, mkt_fee: f32) -> BcCollectionCreateRequest {
    self.mkt_fee = Some(mkt_fee);
    self
  }

  pub fn mkt_fee(&self) -> Option<&f32> {
    self.mkt_fee.as_ref()
  }

  pub fn reset_mkt_fee(&mut self) {
    self.mkt_fee = None;
  }

  pub fn set_template_name(&mut self, template_name: String) {
    self.template_name = template_name;
  }

  pub fn with_template_name(mut self, template_name: String) -> BcCollectionCreateRequest {
    self.template_name = template_name;
    self
  }

  pub fn template_name(&self) -> &String {
    &self.template_name
  }


  pub fn set_template_fields(&mut self, template_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>) {
    self.template_fields = template_fields;
  }

  pub fn with_template_fields(mut self, template_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>) -> BcCollectionCreateRequest {
    self.template_fields = template_fields;
    self
  }

  pub fn template_fields(&self) -> &Vec<::models::BcCollectionCreateRequestTemplateFields> {
    &self.template_fields
  }


  pub fn set_xferable(&mut self, xferable: bool) {
    self.xferable = Some(xferable);
  }

  pub fn with_xferable(mut self, xferable: bool) -> BcCollectionCreateRequest {
    self.xferable = Some(xferable);
    self
  }

  pub fn xferable(&self) -> Option<&bool> {
    self.xferable.as_ref()
  }

  pub fn reset_xferable(&mut self) {
    self.xferable = None;
  }

  pub fn set_max_supply(&mut self, max_supply: f32) {
    self.max_supply = Some(max_supply);
  }

  pub fn with_max_supply(mut self, max_supply: f32) -> BcCollectionCreateRequest {
    self.max_supply = Some(max_supply);
    self
  }

  pub fn max_supply(&self) -> Option<&f32> {
    self.max_supply.as_ref()
  }

  pub fn reset_max_supply(&mut self) {
    self.max_supply = None;
  }

  pub fn set_allow_notify(&mut self, allow_notify: bool) {
    self.allow_notify = Some(allow_notify);
  }

  pub fn with_allow_notify(mut self, allow_notify: bool) -> BcCollectionCreateRequest {
    self.allow_notify = Some(allow_notify);
    self
  }

  pub fn allow_notify(&self) -> Option<&bool> {
    self.allow_notify.as_ref()
  }

  pub fn reset_allow_notify(&mut self) {
    self.allow_notify = None;
  }

  pub fn set_burnable(&mut self, burnable: bool) {
    self.burnable = Some(burnable);
  }

  pub fn with_burnable(mut self, burnable: bool) -> BcCollectionCreateRequest {
    self.burnable = Some(burnable);
    self
  }

  pub fn burnable(&self) -> Option<&bool> {
    self.burnable.as_ref()
  }

  pub fn reset_burnable(&mut self) {
    self.burnable = None;
  }

  pub fn set_schema_name(&mut self, schema_name: String) {
    self.schema_name = schema_name;
  }

  pub fn with_schema_name(mut self, schema_name: String) -> BcCollectionCreateRequest {
    self.schema_name = schema_name;
    self
  }

  pub fn schema_name(&self) -> &String {
    &self.schema_name
  }


  pub fn set_schema_fields(&mut self, schema_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>) {
    self.schema_fields = schema_fields;
  }

  pub fn with_schema_fields(mut self, schema_fields: Vec<::models::BcCollectionCreateRequestTemplateFields>) -> BcCollectionCreateRequest {
    self.schema_fields = schema_fields;
    self
  }

  pub fn schema_fields(&self) -> &Vec<::models::BcCollectionCreateRequestTemplateFields> {
    &self.schema_fields
  }


  pub fn set_user(&mut self, user: String) {
    self.user = user;
  }

  pub fn with_user(mut self, user: String) -> BcCollectionCreateRequest {
    self.user = user;
    self
  }

  pub fn user(&self) -> &String {
    &self.user
  }


  pub fn set_user_prv_active_key(&mut self, user_prv_active_key: String) {
    self.user_prv_active_key = user_prv_active_key;
  }

  pub fn with_user_prv_active_key(mut self, user_prv_active_key: String) -> BcCollectionCreateRequest {
    self.user_prv_active_key = user_prv_active_key;
    self
  }

  pub fn user_prv_active_key(&self) -> &String {
    &self.user_prv_active_key
  }


  pub fn set_collection_name(&mut self, collection_name: String) {
    self.collection_name = collection_name;
  }

  pub fn with_collection_name(mut self, collection_name: String) -> BcCollectionCreateRequest {
    self.collection_name = collection_name;
    self
  }

  pub fn collection_name(&self) -> &String {
    &self.collection_name
  }


}



