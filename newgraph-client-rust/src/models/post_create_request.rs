/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostCreateRequest {
  #[serde(rename = "license")]
  license: Option<String>,
  #[serde(rename = "doMint")]
  do_mint: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "embed")]
  embed: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "contentType")]
  content_type: Option<String>,
  #[serde(rename = "content")]
  content: Option<String>
}

impl PostCreateRequest {
  pub fn new() -> PostCreateRequest {
    PostCreateRequest {
      license: None,
      do_mint: None,
      description: None,
      embed: None,
      title: None,
      content_type: None,
      content: None
    }
  }

  pub fn set_license(&mut self, license: String) {
    self.license = Some(license);
  }

  pub fn with_license(mut self, license: String) -> PostCreateRequest {
    self.license = Some(license);
    self
  }

  pub fn license(&self) -> Option<&String> {
    self.license.as_ref()
  }

  pub fn reset_license(&mut self) {
    self.license = None;
  }

  pub fn set_do_mint(&mut self, do_mint: String) {
    self.do_mint = Some(do_mint);
  }

  pub fn with_do_mint(mut self, do_mint: String) -> PostCreateRequest {
    self.do_mint = Some(do_mint);
    self
  }

  pub fn do_mint(&self) -> Option<&String> {
    self.do_mint.as_ref()
  }

  pub fn reset_do_mint(&mut self) {
    self.do_mint = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PostCreateRequest {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_embed(&mut self, embed: String) {
    self.embed = Some(embed);
  }

  pub fn with_embed(mut self, embed: String) -> PostCreateRequest {
    self.embed = Some(embed);
    self
  }

  pub fn embed(&self) -> Option<&String> {
    self.embed.as_ref()
  }

  pub fn reset_embed(&mut self) {
    self.embed = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> PostCreateRequest {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_content_type(&mut self, content_type: String) {
    self.content_type = Some(content_type);
  }

  pub fn with_content_type(mut self, content_type: String) -> PostCreateRequest {
    self.content_type = Some(content_type);
    self
  }

  pub fn content_type(&self) -> Option<&String> {
    self.content_type.as_ref()
  }

  pub fn reset_content_type(&mut self) {
    self.content_type = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> PostCreateRequest {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

}



