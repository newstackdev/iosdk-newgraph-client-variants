/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcCreateDaoRequest {
  #[serde(rename = "descr")]
  descr: Option<String>,
  #[serde(rename = "authpr_prv_key")]
  authpr_prv_key: Option<String>,
  #[serde(rename = "author")]
  author: Option<String>,
  #[serde(rename = "token")]
  token: Option<String>
}

impl BcCreateDaoRequest {
  pub fn new() -> BcCreateDaoRequest {
    BcCreateDaoRequest {
      descr: None,
      authpr_prv_key: None,
      author: None,
      token: None
    }
  }

  pub fn set_descr(&mut self, descr: String) {
    self.descr = Some(descr);
  }

  pub fn with_descr(mut self, descr: String) -> BcCreateDaoRequest {
    self.descr = Some(descr);
    self
  }

  pub fn descr(&self) -> Option<&String> {
    self.descr.as_ref()
  }

  pub fn reset_descr(&mut self) {
    self.descr = None;
  }

  pub fn set_authpr_prv_key(&mut self, authpr_prv_key: String) {
    self.authpr_prv_key = Some(authpr_prv_key);
  }

  pub fn with_authpr_prv_key(mut self, authpr_prv_key: String) -> BcCreateDaoRequest {
    self.authpr_prv_key = Some(authpr_prv_key);
    self
  }

  pub fn authpr_prv_key(&self) -> Option<&String> {
    self.authpr_prv_key.as_ref()
  }

  pub fn reset_authpr_prv_key(&mut self) {
    self.authpr_prv_key = None;
  }

  pub fn set_author(&mut self, author: String) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: String) -> BcCreateDaoRequest {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&String> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_token(&mut self, token: String) {
    self.token = Some(token);
  }

  pub fn with_token(mut self, token: String) -> BcCreateDaoRequest {
    self.token = Some(token);
    self
  }

  pub fn token(&self) -> Option<&String> {
    self.token.as_ref()
  }

  pub fn reset_token(&mut self) {
    self.token = None;
  }

}



