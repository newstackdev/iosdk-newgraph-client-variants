/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserCreateRequest {
  #[serde(rename = "newcoinTicker")]
  newcoin_ticker: Option<String>,
  #[serde(rename = "youtube")]
  youtube: Option<String>,
  #[serde(rename = "lastName")]
  last_name: Option<String>,
  #[serde(rename = "consentPrivacyPolicy")]
  consent_privacy_policy: Option<String>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "latitude")]
  latitude: Option<f32>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "tumblr")]
  tumblr: Option<String>,
  #[serde(rename = "instagram")]
  instagram: Option<String>,
  #[serde(rename = "medium")]
  medium: Option<String>,
  #[serde(rename = "soundcloud")]
  soundcloud: Option<String>,
  #[serde(rename = "snapchat")]
  snapchat: Option<String>,
  #[serde(rename = "apple")]
  apple: Option<String>,
  #[serde(rename = "consentTestgroup")]
  consent_testgroup: Option<String>,
  #[serde(rename = "twitter")]
  twitter: Option<String>,
  #[serde(rename = "legacyToken")]
  legacy_token: Option<String>,
  #[serde(rename = "tiktok")]
  tiktok: Option<String>,
  #[serde(rename = "reddit")]
  reddit: Option<String>,
  #[serde(rename = "signal")]
  signal: Option<String>,
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "longitude")]
  longitude: Option<f32>,
  #[serde(rename = "website")]
  website: Option<String>,
  #[serde(rename = "spotify")]
  spotify: Option<String>,
  #[serde(rename = "facebook")]
  facebook: Option<String>,
  #[serde(rename = "fullName")]
  full_name: Option<String>,
  #[serde(rename = "telegram")]
  telegram: Option<String>,
  #[serde(rename = "pinterest")]
  pinterest: Option<String>,
  #[serde(rename = "firstName")]
  first_name: Option<String>,
  #[serde(rename = "discord")]
  discord: Option<String>,
  #[serde(rename = "phone")]
  phone: String,
  #[serde(rename = "consentEmail")]
  consent_email: Option<String>,
  #[serde(rename = "username")]
  username: Option<String>
}

impl UserCreateRequest {
  pub fn new(phone: String) -> UserCreateRequest {
    UserCreateRequest {
      newcoin_ticker: None,
      youtube: None,
      last_name: None,
      consent_privacy_policy: None,
      display_name: None,
      latitude: None,
      description: None,
      tumblr: None,
      instagram: None,
      medium: None,
      soundcloud: None,
      snapchat: None,
      apple: None,
      consent_testgroup: None,
      twitter: None,
      legacy_token: None,
      tiktok: None,
      reddit: None,
      signal: None,
      email: None,
      longitude: None,
      website: None,
      spotify: None,
      facebook: None,
      full_name: None,
      telegram: None,
      pinterest: None,
      first_name: None,
      discord: None,
      phone: phone,
      consent_email: None,
      username: None
    }
  }

  pub fn set_newcoin_ticker(&mut self, newcoin_ticker: String) {
    self.newcoin_ticker = Some(newcoin_ticker);
  }

  pub fn with_newcoin_ticker(mut self, newcoin_ticker: String) -> UserCreateRequest {
    self.newcoin_ticker = Some(newcoin_ticker);
    self
  }

  pub fn newcoin_ticker(&self) -> Option<&String> {
    self.newcoin_ticker.as_ref()
  }

  pub fn reset_newcoin_ticker(&mut self) {
    self.newcoin_ticker = None;
  }

  pub fn set_youtube(&mut self, youtube: String) {
    self.youtube = Some(youtube);
  }

  pub fn with_youtube(mut self, youtube: String) -> UserCreateRequest {
    self.youtube = Some(youtube);
    self
  }

  pub fn youtube(&self) -> Option<&String> {
    self.youtube.as_ref()
  }

  pub fn reset_youtube(&mut self) {
    self.youtube = None;
  }

  pub fn set_last_name(&mut self, last_name: String) {
    self.last_name = Some(last_name);
  }

  pub fn with_last_name(mut self, last_name: String) -> UserCreateRequest {
    self.last_name = Some(last_name);
    self
  }

  pub fn last_name(&self) -> Option<&String> {
    self.last_name.as_ref()
  }

  pub fn reset_last_name(&mut self) {
    self.last_name = None;
  }

  pub fn set_consent_privacy_policy(&mut self, consent_privacy_policy: String) {
    self.consent_privacy_policy = Some(consent_privacy_policy);
  }

  pub fn with_consent_privacy_policy(mut self, consent_privacy_policy: String) -> UserCreateRequest {
    self.consent_privacy_policy = Some(consent_privacy_policy);
    self
  }

  pub fn consent_privacy_policy(&self) -> Option<&String> {
    self.consent_privacy_policy.as_ref()
  }

  pub fn reset_consent_privacy_policy(&mut self) {
    self.consent_privacy_policy = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> UserCreateRequest {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_latitude(&mut self, latitude: f32) {
    self.latitude = Some(latitude);
  }

  pub fn with_latitude(mut self, latitude: f32) -> UserCreateRequest {
    self.latitude = Some(latitude);
    self
  }

  pub fn latitude(&self) -> Option<&f32> {
    self.latitude.as_ref()
  }

  pub fn reset_latitude(&mut self) {
    self.latitude = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> UserCreateRequest {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_tumblr(&mut self, tumblr: String) {
    self.tumblr = Some(tumblr);
  }

  pub fn with_tumblr(mut self, tumblr: String) -> UserCreateRequest {
    self.tumblr = Some(tumblr);
    self
  }

  pub fn tumblr(&self) -> Option<&String> {
    self.tumblr.as_ref()
  }

  pub fn reset_tumblr(&mut self) {
    self.tumblr = None;
  }

  pub fn set_instagram(&mut self, instagram: String) {
    self.instagram = Some(instagram);
  }

  pub fn with_instagram(mut self, instagram: String) -> UserCreateRequest {
    self.instagram = Some(instagram);
    self
  }

  pub fn instagram(&self) -> Option<&String> {
    self.instagram.as_ref()
  }

  pub fn reset_instagram(&mut self) {
    self.instagram = None;
  }

  pub fn set_medium(&mut self, medium: String) {
    self.medium = Some(medium);
  }

  pub fn with_medium(mut self, medium: String) -> UserCreateRequest {
    self.medium = Some(medium);
    self
  }

  pub fn medium(&self) -> Option<&String> {
    self.medium.as_ref()
  }

  pub fn reset_medium(&mut self) {
    self.medium = None;
  }

  pub fn set_soundcloud(&mut self, soundcloud: String) {
    self.soundcloud = Some(soundcloud);
  }

  pub fn with_soundcloud(mut self, soundcloud: String) -> UserCreateRequest {
    self.soundcloud = Some(soundcloud);
    self
  }

  pub fn soundcloud(&self) -> Option<&String> {
    self.soundcloud.as_ref()
  }

  pub fn reset_soundcloud(&mut self) {
    self.soundcloud = None;
  }

  pub fn set_snapchat(&mut self, snapchat: String) {
    self.snapchat = Some(snapchat);
  }

  pub fn with_snapchat(mut self, snapchat: String) -> UserCreateRequest {
    self.snapchat = Some(snapchat);
    self
  }

  pub fn snapchat(&self) -> Option<&String> {
    self.snapchat.as_ref()
  }

  pub fn reset_snapchat(&mut self) {
    self.snapchat = None;
  }

  pub fn set_apple(&mut self, apple: String) {
    self.apple = Some(apple);
  }

  pub fn with_apple(mut self, apple: String) -> UserCreateRequest {
    self.apple = Some(apple);
    self
  }

  pub fn apple(&self) -> Option<&String> {
    self.apple.as_ref()
  }

  pub fn reset_apple(&mut self) {
    self.apple = None;
  }

  pub fn set_consent_testgroup(&mut self, consent_testgroup: String) {
    self.consent_testgroup = Some(consent_testgroup);
  }

  pub fn with_consent_testgroup(mut self, consent_testgroup: String) -> UserCreateRequest {
    self.consent_testgroup = Some(consent_testgroup);
    self
  }

  pub fn consent_testgroup(&self) -> Option<&String> {
    self.consent_testgroup.as_ref()
  }

  pub fn reset_consent_testgroup(&mut self) {
    self.consent_testgroup = None;
  }

  pub fn set_twitter(&mut self, twitter: String) {
    self.twitter = Some(twitter);
  }

  pub fn with_twitter(mut self, twitter: String) -> UserCreateRequest {
    self.twitter = Some(twitter);
    self
  }

  pub fn twitter(&self) -> Option<&String> {
    self.twitter.as_ref()
  }

  pub fn reset_twitter(&mut self) {
    self.twitter = None;
  }

  pub fn set_legacy_token(&mut self, legacy_token: String) {
    self.legacy_token = Some(legacy_token);
  }

  pub fn with_legacy_token(mut self, legacy_token: String) -> UserCreateRequest {
    self.legacy_token = Some(legacy_token);
    self
  }

  pub fn legacy_token(&self) -> Option<&String> {
    self.legacy_token.as_ref()
  }

  pub fn reset_legacy_token(&mut self) {
    self.legacy_token = None;
  }

  pub fn set_tiktok(&mut self, tiktok: String) {
    self.tiktok = Some(tiktok);
  }

  pub fn with_tiktok(mut self, tiktok: String) -> UserCreateRequest {
    self.tiktok = Some(tiktok);
    self
  }

  pub fn tiktok(&self) -> Option<&String> {
    self.tiktok.as_ref()
  }

  pub fn reset_tiktok(&mut self) {
    self.tiktok = None;
  }

  pub fn set_reddit(&mut self, reddit: String) {
    self.reddit = Some(reddit);
  }

  pub fn with_reddit(mut self, reddit: String) -> UserCreateRequest {
    self.reddit = Some(reddit);
    self
  }

  pub fn reddit(&self) -> Option<&String> {
    self.reddit.as_ref()
  }

  pub fn reset_reddit(&mut self) {
    self.reddit = None;
  }

  pub fn set_signal(&mut self, signal: String) {
    self.signal = Some(signal);
  }

  pub fn with_signal(mut self, signal: String) -> UserCreateRequest {
    self.signal = Some(signal);
    self
  }

  pub fn signal(&self) -> Option<&String> {
    self.signal.as_ref()
  }

  pub fn reset_signal(&mut self) {
    self.signal = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> UserCreateRequest {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_longitude(&mut self, longitude: f32) {
    self.longitude = Some(longitude);
  }

  pub fn with_longitude(mut self, longitude: f32) -> UserCreateRequest {
    self.longitude = Some(longitude);
    self
  }

  pub fn longitude(&self) -> Option<&f32> {
    self.longitude.as_ref()
  }

  pub fn reset_longitude(&mut self) {
    self.longitude = None;
  }

  pub fn set_website(&mut self, website: String) {
    self.website = Some(website);
  }

  pub fn with_website(mut self, website: String) -> UserCreateRequest {
    self.website = Some(website);
    self
  }

  pub fn website(&self) -> Option<&String> {
    self.website.as_ref()
  }

  pub fn reset_website(&mut self) {
    self.website = None;
  }

  pub fn set_spotify(&mut self, spotify: String) {
    self.spotify = Some(spotify);
  }

  pub fn with_spotify(mut self, spotify: String) -> UserCreateRequest {
    self.spotify = Some(spotify);
    self
  }

  pub fn spotify(&self) -> Option<&String> {
    self.spotify.as_ref()
  }

  pub fn reset_spotify(&mut self) {
    self.spotify = None;
  }

  pub fn set_facebook(&mut self, facebook: String) {
    self.facebook = Some(facebook);
  }

  pub fn with_facebook(mut self, facebook: String) -> UserCreateRequest {
    self.facebook = Some(facebook);
    self
  }

  pub fn facebook(&self) -> Option<&String> {
    self.facebook.as_ref()
  }

  pub fn reset_facebook(&mut self) {
    self.facebook = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> UserCreateRequest {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_telegram(&mut self, telegram: String) {
    self.telegram = Some(telegram);
  }

  pub fn with_telegram(mut self, telegram: String) -> UserCreateRequest {
    self.telegram = Some(telegram);
    self
  }

  pub fn telegram(&self) -> Option<&String> {
    self.telegram.as_ref()
  }

  pub fn reset_telegram(&mut self) {
    self.telegram = None;
  }

  pub fn set_pinterest(&mut self, pinterest: String) {
    self.pinterest = Some(pinterest);
  }

  pub fn with_pinterest(mut self, pinterest: String) -> UserCreateRequest {
    self.pinterest = Some(pinterest);
    self
  }

  pub fn pinterest(&self) -> Option<&String> {
    self.pinterest.as_ref()
  }

  pub fn reset_pinterest(&mut self) {
    self.pinterest = None;
  }

  pub fn set_first_name(&mut self, first_name: String) {
    self.first_name = Some(first_name);
  }

  pub fn with_first_name(mut self, first_name: String) -> UserCreateRequest {
    self.first_name = Some(first_name);
    self
  }

  pub fn first_name(&self) -> Option<&String> {
    self.first_name.as_ref()
  }

  pub fn reset_first_name(&mut self) {
    self.first_name = None;
  }

  pub fn set_discord(&mut self, discord: String) {
    self.discord = Some(discord);
  }

  pub fn with_discord(mut self, discord: String) -> UserCreateRequest {
    self.discord = Some(discord);
    self
  }

  pub fn discord(&self) -> Option<&String> {
    self.discord.as_ref()
  }

  pub fn reset_discord(&mut self) {
    self.discord = None;
  }

  pub fn set_phone(&mut self, phone: String) {
    self.phone = phone;
  }

  pub fn with_phone(mut self, phone: String) -> UserCreateRequest {
    self.phone = phone;
    self
  }

  pub fn phone(&self) -> &String {
    &self.phone
  }


  pub fn set_consent_email(&mut self, consent_email: String) {
    self.consent_email = Some(consent_email);
  }

  pub fn with_consent_email(mut self, consent_email: String) -> UserCreateRequest {
    self.consent_email = Some(consent_email);
    self
  }

  pub fn consent_email(&self) -> Option<&String> {
    self.consent_email.as_ref()
  }

  pub fn reset_consent_email(&mut self) {
    self.consent_email = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> UserCreateRequest {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



