/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BcDaoProposalExecuteRequest {
  #[serde(rename = "proposal_author")]
  proposal_author: Option<String>,
  #[serde(rename = "proposal_id")]
  proposal_id: Option<f32>,
  #[serde(rename = "dao_id")]
  dao_id: Option<String>,
  #[serde(rename = "dao_owner")]
  dao_owner: Option<String>,
  #[serde(rename = "exec")]
  exec: Option<String>,
  #[serde(rename = "exec_prv_key")]
  exec_prv_key: Option<String>
}

impl BcDaoProposalExecuteRequest {
  pub fn new() -> BcDaoProposalExecuteRequest {
    BcDaoProposalExecuteRequest {
      proposal_author: None,
      proposal_id: None,
      dao_id: None,
      dao_owner: None,
      exec: None,
      exec_prv_key: None
    }
  }

  pub fn set_proposal_author(&mut self, proposal_author: String) {
    self.proposal_author = Some(proposal_author);
  }

  pub fn with_proposal_author(mut self, proposal_author: String) -> BcDaoProposalExecuteRequest {
    self.proposal_author = Some(proposal_author);
    self
  }

  pub fn proposal_author(&self) -> Option<&String> {
    self.proposal_author.as_ref()
  }

  pub fn reset_proposal_author(&mut self) {
    self.proposal_author = None;
  }

  pub fn set_proposal_id(&mut self, proposal_id: f32) {
    self.proposal_id = Some(proposal_id);
  }

  pub fn with_proposal_id(mut self, proposal_id: f32) -> BcDaoProposalExecuteRequest {
    self.proposal_id = Some(proposal_id);
    self
  }

  pub fn proposal_id(&self) -> Option<&f32> {
    self.proposal_id.as_ref()
  }

  pub fn reset_proposal_id(&mut self) {
    self.proposal_id = None;
  }

  pub fn set_dao_id(&mut self, dao_id: String) {
    self.dao_id = Some(dao_id);
  }

  pub fn with_dao_id(mut self, dao_id: String) -> BcDaoProposalExecuteRequest {
    self.dao_id = Some(dao_id);
    self
  }

  pub fn dao_id(&self) -> Option<&String> {
    self.dao_id.as_ref()
  }

  pub fn reset_dao_id(&mut self) {
    self.dao_id = None;
  }

  pub fn set_dao_owner(&mut self, dao_owner: String) {
    self.dao_owner = Some(dao_owner);
  }

  pub fn with_dao_owner(mut self, dao_owner: String) -> BcDaoProposalExecuteRequest {
    self.dao_owner = Some(dao_owner);
    self
  }

  pub fn dao_owner(&self) -> Option<&String> {
    self.dao_owner.as_ref()
  }

  pub fn reset_dao_owner(&mut self) {
    self.dao_owner = None;
  }

  pub fn set_exec(&mut self, exec: String) {
    self.exec = Some(exec);
  }

  pub fn with_exec(mut self, exec: String) -> BcDaoProposalExecuteRequest {
    self.exec = Some(exec);
    self
  }

  pub fn exec(&self) -> Option<&String> {
    self.exec.as_ref()
  }

  pub fn reset_exec(&mut self) {
    self.exec = None;
  }

  pub fn set_exec_prv_key(&mut self, exec_prv_key: String) {
    self.exec_prv_key = Some(exec_prv_key);
  }

  pub fn with_exec_prv_key(mut self, exec_prv_key: String) -> BcDaoProposalExecuteRequest {
    self.exec_prv_key = Some(exec_prv_key);
    self
  }

  pub fn exec_prv_key(&self) -> Option<&String> {
    self.exec_prv_key.as_ref()
  }

  pub fn reset_exec_prv_key(&mut self) {
    self.exec_prv_key = None;
  }

}



