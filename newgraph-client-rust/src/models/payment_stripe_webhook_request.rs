/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PaymentStripeWebhookRequest {
  #[serde(rename = "request")]
  request: Option<Value>,
  #[serde(rename = "livemode")]
  livemode: Option<bool>,
  #[serde(rename = "data")]
  data: Option<::models::PaymentStripeWebhookRequestData>,
  #[serde(rename = "created")]
  created: Option<i32>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "api_version")]
  api_version: Option<String>,
  #[serde(rename = "pending_webhooks")]
  pending_webhooks: Option<i32>,
  #[serde(rename = "object")]
  object: Option<String>
}

impl PaymentStripeWebhookRequest {
  pub fn new() -> PaymentStripeWebhookRequest {
    PaymentStripeWebhookRequest {
      request: None,
      livemode: None,
      data: None,
      created: None,
      id: None,
      _type: None,
      api_version: None,
      pending_webhooks: None,
      object: None
    }
  }

  pub fn set_request(&mut self, request: Value) {
    self.request = Some(request);
  }

  pub fn with_request(mut self, request: Value) -> PaymentStripeWebhookRequest {
    self.request = Some(request);
    self
  }

  pub fn request(&self) -> Option<&Value> {
    self.request.as_ref()
  }

  pub fn reset_request(&mut self) {
    self.request = None;
  }

  pub fn set_livemode(&mut self, livemode: bool) {
    self.livemode = Some(livemode);
  }

  pub fn with_livemode(mut self, livemode: bool) -> PaymentStripeWebhookRequest {
    self.livemode = Some(livemode);
    self
  }

  pub fn livemode(&self) -> Option<&bool> {
    self.livemode.as_ref()
  }

  pub fn reset_livemode(&mut self) {
    self.livemode = None;
  }

  pub fn set_data(&mut self, data: ::models::PaymentStripeWebhookRequestData) {
    self.data = Some(data);
  }

  pub fn with_data(mut self, data: ::models::PaymentStripeWebhookRequestData) -> PaymentStripeWebhookRequest {
    self.data = Some(data);
    self
  }

  pub fn data(&self) -> Option<&::models::PaymentStripeWebhookRequestData> {
    self.data.as_ref()
  }

  pub fn reset_data(&mut self) {
    self.data = None;
  }

  pub fn set_created(&mut self, created: i32) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i32) -> PaymentStripeWebhookRequest {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i32> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> PaymentStripeWebhookRequest {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> PaymentStripeWebhookRequest {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> PaymentStripeWebhookRequest {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_pending_webhooks(&mut self, pending_webhooks: i32) {
    self.pending_webhooks = Some(pending_webhooks);
  }

  pub fn with_pending_webhooks(mut self, pending_webhooks: i32) -> PaymentStripeWebhookRequest {
    self.pending_webhooks = Some(pending_webhooks);
    self
  }

  pub fn pending_webhooks(&self) -> Option<&i32> {
    self.pending_webhooks.as_ref()
  }

  pub fn reset_pending_webhooks(&mut self) {
    self.pending_webhooks = None;
  }

  pub fn set_object(&mut self, object: String) {
    self.object = Some(object);
  }

  pub fn with_object(mut self, object: String) -> PaymentStripeWebhookRequest {
    self.object = Some(object);
    self
  }

  pub fn object(&self) -> Option<&String> {
    self.object.as_ref()
  }

  pub fn reset_object(&mut self) {
    self.object = None;
  }

}



