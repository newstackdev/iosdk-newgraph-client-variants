/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreativeSearchResponseSource {
  #[serde(rename = "image")]
  image: Option<String>,
  #[serde(rename = "meta")]
  meta: Option<::models::CreativeSearchResponseSourceMeta>,
  #[serde(rename = "aesthetics")]
  aesthetics: Option<Value>,
  #[serde(rename = "content")]
  content: Option<Value>
}

impl CreativeSearchResponseSource {
  pub fn new() -> CreativeSearchResponseSource {
    CreativeSearchResponseSource {
      image: None,
      meta: None,
      aesthetics: None,
      content: None
    }
  }

  pub fn set_image(&mut self, image: String) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: String) -> CreativeSearchResponseSource {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&String> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_meta(&mut self, meta: ::models::CreativeSearchResponseSourceMeta) {
    self.meta = Some(meta);
  }

  pub fn with_meta(mut self, meta: ::models::CreativeSearchResponseSourceMeta) -> CreativeSearchResponseSource {
    self.meta = Some(meta);
    self
  }

  pub fn meta(&self) -> Option<&::models::CreativeSearchResponseSourceMeta> {
    self.meta.as_ref()
  }

  pub fn reset_meta(&mut self) {
    self.meta = None;
  }

  pub fn set_aesthetics(&mut self, aesthetics: Value) {
    self.aesthetics = Some(aesthetics);
  }

  pub fn with_aesthetics(mut self, aesthetics: Value) -> CreativeSearchResponseSource {
    self.aesthetics = Some(aesthetics);
    self
  }

  pub fn aesthetics(&self) -> Option<&Value> {
    self.aesthetics.as_ref()
  }

  pub fn reset_aesthetics(&mut self) {
    self.aesthetics = None;
  }

  pub fn set_content(&mut self, content: Value) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: Value) -> CreativeSearchResponseSource {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&Value> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

}



