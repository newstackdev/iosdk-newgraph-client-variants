/* 
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserPreRegisterRequest {
  #[serde(rename = "consentTestgroup")]
  consent_testgroup: Option<String>,
  #[serde(rename = "consentPrivacyPolicy")]
  consent_privacy_policy: Option<String>,
  #[serde(rename = "phone")]
  phone: String,
  #[serde(rename = "fullName")]
  full_name: Option<String>,
  #[serde(rename = "consentEmail")]
  consent_email: Option<String>,
  #[serde(rename = "email")]
  email: Option<String>
}

impl UserPreRegisterRequest {
  pub fn new(phone: String) -> UserPreRegisterRequest {
    UserPreRegisterRequest {
      consent_testgroup: None,
      consent_privacy_policy: None,
      phone: phone,
      full_name: None,
      consent_email: None,
      email: None
    }
  }

  pub fn set_consent_testgroup(&mut self, consent_testgroup: String) {
    self.consent_testgroup = Some(consent_testgroup);
  }

  pub fn with_consent_testgroup(mut self, consent_testgroup: String) -> UserPreRegisterRequest {
    self.consent_testgroup = Some(consent_testgroup);
    self
  }

  pub fn consent_testgroup(&self) -> Option<&String> {
    self.consent_testgroup.as_ref()
  }

  pub fn reset_consent_testgroup(&mut self) {
    self.consent_testgroup = None;
  }

  pub fn set_consent_privacy_policy(&mut self, consent_privacy_policy: String) {
    self.consent_privacy_policy = Some(consent_privacy_policy);
  }

  pub fn with_consent_privacy_policy(mut self, consent_privacy_policy: String) -> UserPreRegisterRequest {
    self.consent_privacy_policy = Some(consent_privacy_policy);
    self
  }

  pub fn consent_privacy_policy(&self) -> Option<&String> {
    self.consent_privacy_policy.as_ref()
  }

  pub fn reset_consent_privacy_policy(&mut self) {
    self.consent_privacy_policy = None;
  }

  pub fn set_phone(&mut self, phone: String) {
    self.phone = phone;
  }

  pub fn with_phone(mut self, phone: String) -> UserPreRegisterRequest {
    self.phone = phone;
    self
  }

  pub fn phone(&self) -> &String {
    &self.phone
  }


  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> UserPreRegisterRequest {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_consent_email(&mut self, consent_email: String) {
    self.consent_email = Some(consent_email);
  }

  pub fn with_consent_email(mut self, consent_email: String) -> UserPreRegisterRequest {
    self.consent_email = Some(consent_email);
    self
  }

  pub fn consent_email(&self) -> Option<&String> {
    self.consent_email.as_ref()
  }

  pub fn reset_consent_email(&mut self) {
    self.consent_email = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> UserPreRegisterRequest {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

}



