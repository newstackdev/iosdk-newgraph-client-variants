---
swagger: "2.0"
info:
  version: "2022-10-04T15:34:01Z"
  title: "newgraph-api-eu-dev"
host: "api-eu-dev.newgra.ph"
basePath: "/v1"
schemes:
- "https"
paths:
  /auth/callback/{path+}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "200 response"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-connect-eu-dev-connect-callback/invocations"
        passthroughBehavior: "when_no_match"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /auth/provider/{path+}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "200 response"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-connect-eu-dev-connect-request/invocations"
        passthroughBehavior: "when_no_match"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Path"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /folder:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodReadResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-folder-read/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              text/html: "#set ($context.responseOverride.header.Content-Type = \"\
                text/html\")\n#set ($item = $util.parseJson($input.path(\"$.body\"\
                )))\n#set ($post = $item.posts[0])\n\n#set ($domain = $stageVariables[\"\
                domain\"])\n#set ($cdn = $stageVariables[\"cdn_domain\"])\n\n#set\
                \ ($url = \"https://${domain}/folder/$item.id\")\n#set ($title = $util.escapeJavaScript($item.title))\n\
                #set ($description = $util.escapeJavaScript($item.description))\n\n\
                #if( $item.author.displayName )\n#set ($author = $util.escapeJavaScript($item.author.displayName))\n\
                #else\n#set ($author = $util.escapeJavaScript($item.author.username))\n\
                #end\n\n#set ($image = \"https://${cdn}/images/$post.id/500x500/${post.contentUrl}\"\
                )\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n\
                \  <meta name=\"description\" content=\"$description\" />\n  <meta\
                \ name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"\
                $url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"\
                name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"\
                $image\" />\n  <meta itemprop=\"description\" content=\"$description\"\
                \ />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\"\
                \ content=\"$image\" />\n  <meta property=\"og:title\" content=\"\
                $title\" />\n  <meta property=\"og:type\" content=\"article\" />\n\
                \  <meta property=\"og:description\" content=\"$description\" />\n\
                \  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"\
                og:site_name\" content=\"${domain}\" />\n\n  <!-- Open Graph / Articles\
                \ -->\n  <meta property=\"article:author\" content=\"$author\" />\n\
                \  <meta property=\"article:published_time\" content=\"$item.created\"\
                \ />\n  <meta property=\"article:section\" content=\"$description\"\
                \ />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"\
                $description\">\n  <meta name=\"twitter:title\" content=\"$title\"\
                >\n  <meta name=\"twitter:description\" content=\"$description\">\n\
                \  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"\
                twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\"\
                \ content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"\
                icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\"\
                >\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\"\
                >\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\"\
                >\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\"\
                >\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\
                \n</head>\n<body>\n<!-- $item.id -->\n<script>\n  window.location\
                \ = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img\
                \ src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n\
                </body>\n</html>\n\n"
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /info:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-info-read/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /info-auth:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      security:
      - lambdaAuthorizer: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-info-authorized/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodReadResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-read/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              text/html: "#set ($context.responseOverride.header.Content-Type = \"\
                text/html\")\n#set ($item = $util.parseJson($input.path(\"$.body\"\
                )))\n#set ($post = $item.posts[0])\n\n#set ($domain = $stageVariables[\"\
                domain\"])\n#set ($cdn = $stageVariables[\"cdn_domain\"])\n\n#set\
                \ ($url = \"https://${domain}/folder/$item.id\")\n#set ($title = $util.escapeJavaScript($item.title))\n\
                #set ($description = $util.escapeJavaScript($item.description))\n\n\
                #if( $item.author.displayName )\n#set ($author = $util.escapeJavaScript($item.author.displayName))\n\
                #else\n#set ($author = $util.escapeJavaScript($item.author.username))\n\
                #end\n\n#set ($image = \"https://${cdn}/images/$post.id/500x500/${post.contentUrl}\"\
                )\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n\
                \  <meta name=\"description\" content=\"$description\" />\n  <meta\
                \ name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"\
                $url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"\
                name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"\
                $image\" />\n  <meta itemprop=\"description\" content=\"$description\"\
                \ />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\"\
                \ content=\"$image\" />\n  <meta property=\"og:title\" content=\"\
                $title\" />\n  <meta property=\"og:type\" content=\"article\" />\n\
                \  <meta property=\"og:description\" content=\"$description\" />\n\
                \  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"\
                og:site_name\" content=\"${domain}\" />\n\n  <!-- Open Graph / Articles\
                \ -->\n  <meta property=\"article:author\" content=\"$author\" />\n\
                \  <meta property=\"article:published_time\" content=\"$item.created\"\
                \ />\n  <meta property=\"article:section\" content=\"$description\"\
                \ />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"\
                $description\">\n  <meta name=\"twitter:title\" content=\"$title\"\
                >\n  <meta name=\"twitter:description\" content=\"$description\">\n\
                \  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"\
                twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\"\
                \ content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"\
                icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\"\
                >\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\"\
                >\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\"\
                >\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\"\
                >\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\
                \n</head>\n<body>\n<!-- $item.id -->\n<script>\n  window.location\
                \ = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img\
                \ src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n\
                </body>\n</html>\n\n"
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "MoodCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/MoodCreateRequest"
        x-exportParamName: "MoodCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodCreateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    put:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "MoodUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/MoodUpdateRequest"
        x-exportParamName: "MoodUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodReadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-update/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood/attach/post:
    put:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "MoodAttachRequest"
        required: true
        schema:
          $ref: "#/definitions/MoodAttachRequest"
        x-exportParamName: "MoodAttachRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostReadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-attach-post/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood/list/top:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-list-top/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
        cacheNamespace: "ApiGatewayMethodMoodListTopGetCacheNS"
        cacheKeyParameters:
        - "method.request.querystring.page"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood/posts:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodListAttachedPostsResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-posts-list/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood/rate:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RatingUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/RatingUpdateRequest"
        x-exportParamName: "RatingUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/RatingUpdateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-rate/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /mood/upload:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UploadRequestGeneric"
        required: true
        schema:
          $ref: "#/definitions/UploadRequestGeneric"
        x-exportParamName: "UploadRequestGeneric"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UploadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-mood-eu-dev-mood-upload/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcaccopen:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcAccCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/BcAccCreateRequest"
        x-exportParamName: "BcAccCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-acc-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcautheth:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcAuthEthRequest"
        required: true
        schema:
          $ref: "#/definitions/BcAuthEthRequest"
        x-exportParamName: "BcAuthEthRequest"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcAuthEthResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-bc-auth-eth/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bccolcreate:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcCollectionCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/BcCollectionCreateRequest"
        x-exportParamName: "BcCollectionCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-col-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcgetacc:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcGetAccountInfo"
        required: true
        schema:
          $ref: "#/definitions/BcGetAccountInfo"
        x-exportParamName: "BcGetAccountInfo"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcGetInfoResp"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-getaccinfo/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcgetpool:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcGetPoolInfo"
        required: true
        schema:
          $ref: "#/definitions/BcGetPoolInfo"
        x-exportParamName: "BcGetPoolInfo"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcGetInfoResp"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-getpoolinfo/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bckeypair:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcKeyPairCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/BcKeyPairCreateRequest"
        x-exportParamName: "BcKeyPairCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcKeyPairCreateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-keypair-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcmaindaodldunstake:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcStakeMainDAORequest"
        required: true
        schema:
          $ref: "#/definitions/BcStakeMainDAORequest"
        x-exportParamName: "BcStakeMainDAORequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-mdao-dldunstk/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcmaindaoinstunstake:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcStakePoolRequest"
        required: true
        schema:
          $ref: "#/definitions/BcStakePoolRequest"
        x-exportParamName: "BcStakePoolRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-mdao-instunstk/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcmaindaostake:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcStakeMainDAORequest"
        required: true
        schema:
          $ref: "#/definitions/BcStakeMainDAORequest"
        x-exportParamName: "BcStakeMainDAORequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-mdao-stake/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcmintasset:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcMintAssetRequest"
        required: true
        schema:
          $ref: "#/definitions/BcMintAssetRequest"
        x-exportParamName: "BcMintAssetRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-mint-asset/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcpoolcreate:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcPoolCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/BcPoolCreateRequest"
        x-exportParamName: "BcPoolCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-pool-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/bcpoolstake:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcStakePoolRequest"
        required: true
        schema:
          $ref: "#/definitions/BcStakePoolRequest"
        x-exportParamName: "BcStakePoolRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcTxResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoin-eu-dev-pool-stake/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/create:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcCreateDaoRequest"
        required: true
        schema:
          $ref: "#/definitions/BcCreateDaoRequest"
        x-exportParamName: "BcCreateDaoRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcCreateDaoResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcCreateDaoProposal"
        required: true
        schema:
          $ref: "#/definitions/BcCreateDaoProposal"
        x-exportParamName: "BcCreateDaoProposal"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal-whitelist:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcCreateWhitelistDaoProposal"
        required: true
        schema:
          $ref: "#/definitions/BcCreateWhitelistDaoProposal"
        x-exportParamName: "BcCreateWhitelistDaoProposal"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-wl-crea/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal-whitelist/approve:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcApproveDaoProposalRequest"
        required: true
        schema:
          $ref: "#/definitions/BcApproveDaoProposalRequest"
        x-exportParamName: "BcApproveDaoProposalRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-wl-appr/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal-whitelist/execute:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcDaoProposalExecuteRequest"
        required: true
        schema:
          $ref: "#/definitions/BcDaoProposalExecuteRequest"
        x-exportParamName: "BcDaoProposalExecuteRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcDaoProposalExecuteResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-wl-exec/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal-whitelist/list:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "reverse"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Reverse"
        x-optionalDataType: "String"
      - name: "proposalAuthor"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ProposalAuthor"
        x-optionalDataType: "String"
      - name: "dao_owner"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoOwner"
        x-optionalDataType: "String"
      - name: "dao_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      - name: "lower_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LowerBound"
        x-optionalDataType: "String"
      - name: "upper_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UpperBound"
        x-optionalDataType: "String"
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcListDaoProposalsResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-wl-list/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.dao_id: "method.request.querystring.dao_id"
          integration.request.querystring.proposalAuthor: "method.request.querystring.proposalAuthor"
          integration.request.querystring.limit: "method.request.querystring.limit"
          integration.request.querystring.reverse: "method.request.querystring.reverse"
          integration.request.querystring.id: "method.request.querystring.id"
          integration.request.querystring.lower_bound: "method.request.querystring.lower_bound"
          integration.request.querystring.dao_owner: "method.request.querystring.dao_owner"
          integration.request.querystring.upper_bound: "method.request.querystring.upper_bound"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal/approve:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcApproveDaoProposalRequest"
        required: true
        schema:
          $ref: "#/definitions/BcApproveDaoProposalRequest"
        x-exportParamName: "BcApproveDaoProposalRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-apprv/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal/execute:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcDaoProposalExecuteRequest"
        required: true
        schema:
          $ref: "#/definitions/BcDaoProposalExecuteRequest"
        x-exportParamName: "BcDaoProposalExecuteRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcDaoProposalExecuteResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-exec/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal/list:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "reverse"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Reverse"
        x-optionalDataType: "String"
      - name: "proposalAuthor"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ProposalAuthor"
        x-optionalDataType: "String"
      - name: "dao_owner"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoOwner"
        x-optionalDataType: "String"
      - name: "dao_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      - name: "lower_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LowerBound"
        x-optionalDataType: "String"
      - name: "upper_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UpperBound"
        x-optionalDataType: "String"
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcListDaoProposalsResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-list/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.dao_id: "method.request.querystring.dao_id"
          integration.request.querystring.proposalAuthor: "method.request.querystring.proposalAuthor"
          integration.request.querystring.limit: "method.request.querystring.limit"
          integration.request.querystring.reverse: "method.request.querystring.reverse"
          integration.request.querystring.id: "method.request.querystring.id"
          integration.request.querystring.lower_bound: "method.request.querystring.lower_bound"
          integration.request.querystring.dao_owner: "method.request.querystring.dao_owner"
          integration.request.querystring.upper_bound: "method.request.querystring.upper_bound"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal/vote:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcDaoProposalVoteRequest"
        required: true
        schema:
          $ref: "#/definitions/BcDaoProposalVoteRequest"
        x-exportParamName: "BcDaoProposalVoteRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcListDaoProposalsResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-vote/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/proposal/votes:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "reverse"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Reverse"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      - name: "upper_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UpperBound"
        x-optionalDataType: "String"
      - name: "voter"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Voter"
        x-optionalDataType: "String"
      - name: "lower_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LowerBound"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcDaoProposalVoteResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-votes/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.limit: "method.request.querystring.limit"
          integration.request.querystring.voter: "method.request.querystring.voter"
          integration.request.querystring.reverse: "method.request.querystring.reverse"
          integration.request.querystring.lower_bound: "method.request.querystring.lower_bound"
          integration.request.querystring.upper_bound: "method.request.querystring.upper_bound"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/whitelist:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "reverse"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Reverse"
        x-optionalDataType: "String"
      - name: "dao_owner"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoOwner"
        x-optionalDataType: "String"
      - name: "dao_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DaoId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      - name: "upper_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UpperBound"
        x-optionalDataType: "String"
      - name: "lower_bound"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LowerBound"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcListDaoWhitelistResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-wl-list/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.dao_id: "method.request.querystring.dao_id"
          integration.request.querystring.limit: "method.request.querystring.limit"
          integration.request.querystring.reverse: "method.request.querystring.reverse"
          integration.request.querystring.lower_bound: "method.request.querystring.lower_bound"
          integration.request.querystring.dao_owner: "method.request.querystring.dao_owner"
          integration.request.querystring.upper_bound: "method.request.querystring.upper_bound"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /newcoin/dao/withdrawVoteDeposit:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "BcDaoWidthdrawVoteDepositRequest"
        required: true
        schema:
          $ref: "#/definitions/BcDaoWidthdrawVoteDepositRequest"
        x-exportParamName: "BcDaoWidthdrawVoteDepositRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/BcDaoWidthdrawVoteDepositResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-newcoinDaos-eu-dev-dao-prop-wthd/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /payment/stripe/intent:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "PaymentStripePaymentIntentCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/PaymentStripePaymentIntentCreateRequest"
        x-exportParamName: "PaymentStripePaymentIntentCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PaymentStripePaymentIntentCreateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-payment-eu-dev-stripe-intent-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /payment/stripe/subscription/payment:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-payment-eu-dev-stripe-sub-payment/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /payment/stripe/webhook:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "PaymentStripeWebhookRequest"
        required: true
        schema:
          $ref: "#/definitions/PaymentStripeWebhookRequest"
        x-exportParamName: "PaymentStripeWebhookRequest"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-payment-eu-dev-stripe-webhook/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostReadResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-read/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              text/html: "#set ($context.responseOverride.header.Content-Type = \"\
                text/html\")\n#set ($post = $util.parseJson($input.path(\"$.body\"\
                )))\n#set ($domain = $stageVariables[\"domain\"])\n#set ($cdn = $stageVariables[\"\
                cdn_domain\"])\n\n#set ($url = \"https://${domain}/post/$post.id\"\
                )\n#set ($description = $util.escapeJavaScript($post.description))\n\
                \n#if( $item.author.displayName == \"\" )\n#set ($author = $util.escapeJavaScript($post.author.username))\n\
                #else\n#set ($author = $util.escapeJavaScript($post.author.displayName))\n\
                #end\n\n#if( $post.title == \"\" )\n#set ($title = $author)\n#else\n\
                #set ($title = $util.escapeJavaScript($post.title))\n#end\n\n#set\
                \ ($image = \"https://${cdn}/images/$post.id/500x500/${post.contentUrl}\"\
                )\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n\
                \  <meta name=\"description\" content=\"$description\" />\n  <meta\
                \ name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"\
                $url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"\
                name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"\
                $image\" />\n  <meta itemprop=\"description\" content=\"$description\"\
                \ />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\"\
                \ content=\"$image\" />\n  <meta property=\"og:title\" content=\"\
                $title\" />\n  <meta property=\"og:type\" content=\"article\" />\n\
                \  <meta property=\"og:description\" content=\"$description\" />\n\
                \  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"\
                og:site_name\" content=\"${domain}\" />\n\n  <!-- Open Graph / Articles\
                \ -->\n  <meta property=\"article:author\" content=\"$author\" />\n\
                \  <meta property=\"article:published_time\" content=\"$post.created\"\
                \ />\n  <meta property=\"article:section\" content=\"$description\"\
                \ />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"\
                summary\">\n  <meta name=\"twitter:title\" content=\"$title\">\n \
                \ <meta name=\"twitter:description\" content=\"$description\">\n \
                \ <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"\
                twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\"\
                \ content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"\
                icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\"\
                >\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\"\
                >\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\"\
                >\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\"\
                >\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\
                \n</head>\n<body>\n<!-- $post.id -->\n<script>\n  window.location\
                \ = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img\
                \ src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n\
                </body>\n</html>\n\n"
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "PostCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/PostCreateRequest"
        x-exportParamName: "PostCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostCreateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    put:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "PostUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/PostUpdateRequest"
        x-exportParamName: "PostUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostReadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-update/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/list/search:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-list-search/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.q: "method.request.querystring.q"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/list/tags-search:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostTagsSearchPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-tags-search/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.q: "method.request.querystring.q"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/list/top:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-list-top/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/rate:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RatingUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/RatingUpdateRequest"
        x-exportParamName: "RatingUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/RatingUpdateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-rate/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/report:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ReportUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/ReportUpdateRequest"
        x-exportParamName: "ReportUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ReportUpdateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-report/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/upload:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UploadRequestGeneric"
        required: true
        schema:
          $ref: "#/definitions/UploadRequestGeneric"
        x-exportParamName: "UploadRequestGeneric"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UploadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-upload/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /post/utils/remote-meta-proxy:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Url"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PostRemoteMetaProxyResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-post-eu-dev-post-remote-meta-proxy/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.url: "method.request.querystring.url"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /search/creative:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "aesthetics"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Aesthetics"
        x-optionalDataType: "String"
      - name: "tags"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Tags"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/CreativeSearchResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-search-eu-dev-search-creative/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.aesthetics: "method.request.querystring.aesthetics"
          integration.request.querystring.tags: "method.request.querystring.tags"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /test-utils/user/configure/imported:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ConfigureUserRequest"
        required: true
        schema:
          $ref: "#/definitions/ConfigureUserRequest"
        x-exportParamName: "ConfigureUserRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-testUtils-eu-dev-userconfig-imported/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /test-utils/user/configure/imported-whitelisted:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ConfigureUserRequest"
        required: true
        schema:
          $ref: "#/definitions/ConfigureUserRequest"
        x-exportParamName: "ConfigureUserRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-testUtils-eu-dev-userconfig-importedwl/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /test-utils/user/configure/invited:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ConfigureUserRequest"
        required: true
        schema:
          $ref: "#/definitions/ConfigureUserRequest"
        x-exportParamName: "ConfigureUserRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-testUtils-eu-dev-userconfig-invited/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /upload/node:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UploadRequest"
        required: true
        schema:
          $ref: "#/definitions/UploadRequest"
        x-exportParamName: "UploadRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UploadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-upload-eu-dev-upload-node/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - name: "username"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-read/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              text/html: "#set ($context.responseOverride.header.Content-Type = \"\
                text/html\")\n#set ($user = $util.parseJson($input.path(\"$.body\"\
                )))\n#set ($domain = $stageVariables[\"domain\"])\n#set ($cdn = $stageVariables[\"\
                cdn_domain\"])\n\n#set ($url = \"https://${domain}/user/$user.username\"\
                )\n#set ($description = $util.escapeJavaScript($user.description))\n\
                \n#if( $item.author.displayName == \"\" )\n#set ($author = $util.escapeJavaScript($user.username))\n\
                #else\n#set ($author = $util.escapeJavaScript($user.author.displayName))\n\
                #end\n\n#set ($title = $author)\n\n#set ($image = \"https://${cdn}/images/$user.id/500x500/${user.contentUrl}\"\
                )\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n\
                \  <meta name=\"description\" content=\"$description\" />\n  <meta\
                \ name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"\
                $url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"\
                name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"\
                $image\" />\n  <meta itemprop=\"description\" content=\"$description\"\
                \ />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\"\
                \ content=\"$image\" />\n  <meta property=\"og:title\" content=\"\
                $title\" />\n  <meta property=\"og:type\" content=\"article\" />\n\
                \  <meta property=\"og:description\" content=\"$description\" />\n\
                \  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"\
                og:site_name\" content=\"${domain}}\" />\n\n  <!-- Open Graph / Articles\
                \ -->\n  <meta property=\"article:author\" content=\"$author\" />\n\
                \  <meta property=\"article:published_time\" content=\"$user.created\"\
                \ />\n  <meta property=\"article:section\" content=\"$description\"\
                \ />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"\
                summary\">\n  <meta name=\"twitter:title\" content=\"$title\">\n \
                \ <meta name=\"twitter:description\" content=\"$description\">\n \
                \ <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"\
                twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\"\
                \ content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"\
                icon\" type=\"image/svg+xml\" href=\"https://${domain}}/favicon.svg\"\
                >\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}}/favicon.png\"\
                >\n  <link rel=\"manifest\" href=\"https://${domain}}/manifest.json\"\
                >\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}}/favicon.png\"\
                >\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\
                \n</head>\n<body>\n<!-- $user.id -->\n<script>\n  window.location\
                \ = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img\
                \ src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n\
                </body>\n</html>\n\n"
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.id: "method.request.querystring.id"
          integration.request.querystring.username: "method.request.querystring.username"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserCreateRequest"
        required: true
        schema:
          $ref: "#/definitions/UserCreateRequest"
        x-exportParamName: "UserCreateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPrivateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-create/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    put:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/UserUpdateRequest"
        x-exportParamName: "UserUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPrivateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-update/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    delete:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserDeleteRequest"
        required: true
        schema:
          $ref: "#/definitions/UserDeleteRequest"
        x-exportParamName: "UserDeleteRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/OkResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-delete/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,PUT,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/activityStream:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "after"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "After"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/AnyResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-activityStream/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.limit: "method.request.querystring.limit"
          integration.request.querystring.after: "method.request.querystring.after"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/availability:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserAvailabilityResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-availability/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.username: "method.request.querystring.username"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/current:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPrivateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-current/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/invite:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserInviteRequest"
        required: true
        schema:
          $ref: "#/definitions/UserInviteRequest"
        x-exportParamName: "UserInviteRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-invite/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/invite/hash:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "hash"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Hash"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-resolveInviteHash/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.hash: "method.request.querystring.hash"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/invitees:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-inviteesList/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/invitor:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserInvitationPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-invitorList/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/list/search:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-list-search/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.q: "method.request.querystring.q"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/list/top:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "contentType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Vary:
              type: "string"
            Last-Modified:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-list-top/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'public, max-age=300'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Last-Modified: "integration.response.header.Last-Modified"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Vary: "'origin'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.orderBy: "method.request.querystring.orderBy"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.direction: "method.request.querystring.direction"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/moods:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/MoodPagedListReadPublicResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-moods-list/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/preregister:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserPreRegisterRequest"
        required: true
        schema:
          $ref: "#/definitions/UserPreRegisterRequest"
        x-exportParamName: "UserPreRegisterRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPrivateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-preregister/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/rated/in:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PagedRatedResponseUser"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-userRate-eu-dev-rated-in/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/rated/out/posts:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PagedRatedResponsePost"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-userRate-eu-dev-rated-out-posts/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/rated/out/users:
    get:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/PagedRatedResponseUser"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-userRate-eu-dev-rated-out-users/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.querystring.id: "method.request.querystring.id"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/stake:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserStakeRequest"
        required: true
        schema:
          $ref: "#/definitions/UserStakeRequest"
        x-exportParamName: "UserStakeRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/AnyResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-stake/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/syncContacts:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "SyncContactsRequest"
        required: true
        schema:
          $ref: "#/definitions/SyncContactsRequest"
        x-exportParamName: "SyncContactsRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/SyncContactsResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-syncContacts/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/transfer:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserTransferRequest"
        required: true
        schema:
          $ref: "#/definitions/UserTransferRequest"
        x-exportParamName: "UserTransferRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UserReadPrivateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-transfer/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/upload:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "UserUploadRequest"
        required: true
        schema:
          $ref: "#/definitions/UserUploadRequest"
        x-exportParamName: "UserUploadRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/UploadResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-user-eu-dev-upload/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /user/userRate:
    post:
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RatingUpdateRequest"
        required: true
        schema:
          $ref: "#/definitions/RatingUpdateRequest"
        x-exportParamName: "RatingUpdateRequest"
      security:
      - newgraph-api-eu-dev: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/RatingUpdateResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Content-Type:
              type: "string"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:958977537770:function:newgraph-api-eu-dev-userRate-eu-dev-rate/invocations"
        responses:
          ".*\"statusCode\":409,.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.path(\"$.body\")"
          ".*\"statusCode\":400,.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":401,.*":
            statusCode: "401"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":403,.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":404,.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
          ".*\"statusCode\":500,.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($err = $util.parseJson($input.path(\"$.errorMessage\"\
                )))\n$err.errorMessage"
        requestTemplates:
          application/json: "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define(\
            \ $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k\
            \ = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          application/x-www-form-urlencoded: "\n    #define( $body )\n      {\n  \
            \    #foreach( $token in $input.path('$').split('&') )\n        #set(\
            \ $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size()\
            \ )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0]))\
            \ )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\
            \\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n    \
            \      #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n\
            \        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop\
            \ )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key)\
            \ )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\
            \\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext\
            \ ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\"\
            ,\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n\
            \       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\
            \n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\"\
            : $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\"\
            : $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\"\
            : $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\
            \n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n \
            \   #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n\
            \    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
        passthroughBehavior: "never"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{statusCode:200}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
securityDefinitions:
  newgraph-api-eu-dev:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
  lambdaAuthorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
definitions:
  AnyResponse:
    type: "object"
  OkResponse:
    type: "object"
    properties:
      ok:
        type: "boolean"
    example:
      ok: true
  ErrorResponse:
    type: "object"
    properties:
      errorMessage:
        type: "string"
      errorCode:
        type: "string"
      statusCode:
        type: "number"
  MoodPagedListReadPublicResponse:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_value"
      done:
        type: "boolean"
    example:
      value:
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 0.80082819046101150206595775671303272247314453125
        description: "description"
        aspectRatio: 6.02745618307040320615897144307382404804229736328125
        title: "title"
        posts:
        - coverContentUrl: "coverContentUrl"
          moodId: "moodId"
          created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 3.61607674925191080461672754609026014804840087890625
          moods:
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          description: "description"
          aspectRatio: 6.8468526983526398765889098285697400569915771484375
          title: "title"
          content: "content"
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          license: "license"
          contentUrl: "contentUrl"
          blurHash: "blurHash"
          newcoinMintTx: "newcoinMintTx"
          id: "id"
          embed: "embed"
          updated: "updated"
          contentType: "contentType"
          longitude: 7.4577447736837658709418974467553198337554931640625
        - coverContentUrl: "coverContentUrl"
          moodId: "moodId"
          created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 3.61607674925191080461672754609026014804840087890625
          moods:
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          description: "description"
          aspectRatio: 6.8468526983526398765889098285697400569915771484375
          title: "title"
          content: "content"
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          license: "license"
          contentUrl: "contentUrl"
          blurHash: "blurHash"
          newcoinMintTx: "newcoinMintTx"
          id: "id"
          embed: "embed"
          updated: "updated"
          contentType: "contentType"
          longitude: 7.4577447736837658709418974467553198337554931640625
        content: "content"
        stakeToAccess: 1.46581298050294517310021547018550336360931396484375
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 5.962133916683182377482808078639209270477294921875
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 5.63737665663332876420099637471139430999755859375
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 0.80082819046101150206595775671303272247314453125
        description: "description"
        aspectRatio: 6.02745618307040320615897144307382404804229736328125
        title: "title"
        posts:
        - coverContentUrl: "coverContentUrl"
          moodId: "moodId"
          created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 3.61607674925191080461672754609026014804840087890625
          moods:
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          description: "description"
          aspectRatio: 6.8468526983526398765889098285697400569915771484375
          title: "title"
          content: "content"
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          license: "license"
          contentUrl: "contentUrl"
          blurHash: "blurHash"
          newcoinMintTx: "newcoinMintTx"
          id: "id"
          embed: "embed"
          updated: "updated"
          contentType: "contentType"
          longitude: 7.4577447736837658709418974467553198337554931640625
        - coverContentUrl: "coverContentUrl"
          moodId: "moodId"
          created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 3.61607674925191080461672754609026014804840087890625
          moods:
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          - created: "created"
            author:
              newcoinTicker: "newcoinTicker"
              youtube: "youtube"
              powered: 0.80082819046101150206595775671303272247314453125
              displayName: "displayName"
              newcoinAccTx: "newcoinAccTx"
              latitude: 6.02745618307040320615897144307382404804229736328125
              description: "description"
              newcoinPoolId: "newcoinPoolId"
              tumblr: "tumblr"
              aspectRatio: 1.46581298050294517310021547018550336360931396484375
              instagram: "instagram"
              medium: "medium"
              newcoinActivePublicKey: "newcoinActivePublicKey"
              soundcloud: "soundcloud"
              newcoinPublicKey: "newcoinPublicKey"
              powering: 5.962133916683182377482808078639209270477294921875
              snapchat: "snapchat"
              apple: "apple"
              twitter: "twitter"
              newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
              tiktok: "tiktok"
              reddit: "reddit"
              youtubeId: "youtubeId"
              id: "id"
              newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
              contentType: "contentType"
              signal: "signal"
              longitude: 2.3021358869347654518833223846741020679473876953125
              newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
              website: "website"
              created: "created"
              spotify: "spotify"
              facebook: "facebook"
              facebookId: "facebookId"
              fullName: "fullName"
              telegram: "telegram"
              pinterest: "pinterest"
              verifiedSocialIds:
              - "verifiedSocialIds"
              - "verifiedSocialIds"
              newcoinPoolTx: "newcoinPoolTx"
              license: "license"
              contentUrl: "contentUrl"
              discord: "discord"
              blurHash: "blurHash"
              consentEmail: "consentEmail"
              updated: "updated"
              username: "username"
            latitude: 2.027123023002321833274663731572218239307403564453125
            description: "description"
            aspectRatio: 4.1456080298839363962315474054776132106781005859375
            title: "title"
            content: "content"
            stakeToAccess: 7.3862819483858839220147274318151175975799560546875
            tags:
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            - _rel:
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              - displayValue: "displayValue"
                score: 1.231513536777255612975068288506008684635162353515625
                polygons: "polygons"
                source: "source"
                category: "category"
              id: "id"
              value: "value"
            contentUrl: "contentUrl"
            postsCount: 1.024645700144157789424070870154537260532379150390625
            blurHash: "blurHash"
            id: "id"
            updated: "updated"
            contentType: "contentType"
            longitude: 1.489415909854170383397331534069962799549102783203125
          description: "description"
          aspectRatio: 6.8468526983526398765889098285697400569915771484375
          title: "title"
          content: "content"
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          license: "license"
          contentUrl: "contentUrl"
          blurHash: "blurHash"
          newcoinMintTx: "newcoinMintTx"
          id: "id"
          embed: "embed"
          updated: "updated"
          contentType: "contentType"
          longitude: 7.4577447736837658709418974467553198337554931640625
        content: "content"
        stakeToAccess: 1.46581298050294517310021547018550336360931396484375
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 5.962133916683182377482808078639209270477294921875
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 5.63737665663332876420099637471139430999755859375
      done: true
  UploadRequest:
    type: "object"
    required:
    - "contentType"
    - "filename"
    - "targetId"
    - "targetModel"
    properties:
      filename:
        type: "string"
      targetId:
        type: "string"
      targetModel:
        type: "string"
      contentType:
        type: "string"
    example:
      filename: "filename"
      targetId: "targetId"
      targetModel: "targetModel"
      contentType: "contentType"
  UploadRequestGeneric:
    type: "object"
    required:
    - "contentType"
    - "filename"
    - "targetId"
    properties:
      filename:
        type: "string"
      targetId:
        type: "string"
      contentType:
        type: "string"
    example:
      filename: "filename"
      targetId: "targetId"
      contentType: "contentType"
  UploadResponse:
    type: "object"
    properties:
      filename:
        type: "string"
      key:
        type: "string"
      url:
        type: "string"
    example:
      filename: "filename"
      key: "key"
      url: "url"
  UserReadPublicResponse:
    type: "object"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      powered:
        type: "number"
      displayName:
        type: "string"
      newcoinAccTx:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      newcoinPoolId:
        type: "string"
      tumblr:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      medium:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      soundcloud:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      youtubeId:
        type: "string"
      id:
        type: "string"
      newcoinPoolStake:
        type: "number"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      created:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      facebookId:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      newcoinPoolTx:
        type: "string"
      license:
        type: "string"
      contentUrl:
        type: "string"
      discord:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      updated:
        type: "string"
      username:
        type: "string"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      powered: 0.80082819046101150206595775671303272247314453125
      displayName: "displayName"
      newcoinAccTx: "newcoinAccTx"
      latitude: 6.02745618307040320615897144307382404804229736328125
      description: "description"
      newcoinPoolId: "newcoinPoolId"
      tumblr: "tumblr"
      aspectRatio: 1.46581298050294517310021547018550336360931396484375
      instagram: "instagram"
      medium: "medium"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      soundcloud: "soundcloud"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 5.962133916683182377482808078639209270477294921875
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      youtubeId: "youtubeId"
      id: "id"
      newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
      contentType: "contentType"
      signal: "signal"
      longitude: 2.3021358869347654518833223846741020679473876953125
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      created: "created"
      spotify: "spotify"
      facebook: "facebook"
      facebookId: "facebookId"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      newcoinPoolTx: "newcoinPoolTx"
      license: "license"
      contentUrl: "contentUrl"
      discord: "discord"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      updated: "updated"
      username: "username"
  UserReadPrivateResponse:
    type: "object"
    properties:
      powered:
        type: "number"
      newcoinAccTx:
        type: "string"
      newcoinPoolId:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      stripeUid:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      id:
        type: "string"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      subscriptionExpiry:
        type: "string"
      created:
        type: "string"
      availableInvites:
        type: "number"
      facebookId:
        type: "string"
      newcoinPoolTx:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      firstName:
        type: "string"
      license:
        type: "string"
      discord:
        type: "string"
      phone:
        type: "string"
      updated:
        type: "string"
      status:
        type: "string"
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      lastName:
        type: "string"
      consentPrivacyPolicy:
        type: "string"
      displayName:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      tumblr:
        type: "string"
      medium:
        type: "string"
      soundcloud:
        type: "string"
      snapchat:
        type: "string"
      apple:
        type: "string"
      consentTestgroup:
        type: "string"
      newcoinPrivateKey:
        type: "string"
      subscriptionStatus:
        type: "string"
      newcoinPublisherPrivateKey:
        type: "string"
      youtubeId:
        type: "string"
      newcoinPoolStake:
        type: "number"
      email:
        type: "string"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      contentUrl:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      username:
        type: "string"
    example:
      powered: 0.80082819046101150206595775671303272247314453125
      newcoinAccTx: "newcoinAccTx"
      newcoinPoolId: "newcoinPoolId"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      instagram: "instagram"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 1.46581298050294517310021547018550336360931396484375
      stripeUid: "stripeUid"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      id: "id"
      contentType: "contentType"
      signal: "signal"
      longitude: 5.962133916683182377482808078639209270477294921875
      subscriptionExpiry: "subscriptionExpiry"
      created: "created"
      availableInvites: 5.63737665663332876420099637471139430999755859375
      facebookId: "facebookId"
      newcoinPoolTx: "newcoinPoolTx"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      firstName: "firstName"
      license: "license"
      discord: "discord"
      phone: "phone"
      updated: "updated"
      status: "status"
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      lastName: "lastName"
      consentPrivacyPolicy: "consentPrivacyPolicy"
      displayName: "displayName"
      latitude: 2.3021358869347654518833223846741020679473876953125
      description: "description"
      tumblr: "tumblr"
      medium: "medium"
      soundcloud: "soundcloud"
      snapchat: "snapchat"
      apple: "apple"
      consentTestgroup: "consentTestgroup"
      newcoinPrivateKey: "newcoinPrivateKey"
      subscriptionStatus: "subscriptionStatus"
      newcoinPublisherPrivateKey: "newcoinPublisherPrivateKey"
      youtubeId: "youtubeId"
      newcoinPoolStake: 7.061401241503109105224211816675961017608642578125
      email: "email"
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      spotify: "spotify"
      facebook: "facebook"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      contentUrl: "contentUrl"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      username: "username"
  UserStakeRequest:
    type: "object"
    required:
    - "amount"
    - "username"
    properties:
      amount:
        type: "string"
      key:
        type: "string"
      username:
        type: "string"
    example:
      amount: "amount"
      key: "key"
      username: "username"
  UserTransferRequest:
    type: "object"
    properties:
      encryptedPayload:
        type: "string"
      payload:
        type: "string"
    example:
      encryptedPayload: "encryptedPayload"
      payload: "payload"
  UserCreateRequest:
    type: "object"
    required:
    - "phone"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      lastName:
        type: "string"
      consentPrivacyPolicy:
        type: "string"
      displayName:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      tumblr:
        type: "string"
      instagram:
        type: "string"
      medium:
        type: "string"
      soundcloud:
        type: "string"
      snapchat:
        type: "string"
      apple:
        type: "string"
      consentTestgroup:
        type: "string"
      twitter:
        type: "string"
      legacyToken:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      signal:
        type: "string"
      email:
        type: "string"
      longitude:
        type: "number"
      website:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      firstName:
        type: "string"
      discord:
        type: "string"
      phone:
        type: "string"
      consentEmail:
        type: "string"
      username:
        type: "string"
        pattern: "^[a-z0-5\\.]{2,9}\\.io$"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      lastName: "lastName"
      consentPrivacyPolicy: "consentPrivacyPolicy"
      displayName: "displayName"
      latitude: 0.80082819046101150206595775671303272247314453125
      description: "description"
      tumblr: "tumblr"
      instagram: "instagram"
      medium: "medium"
      soundcloud: "soundcloud"
      snapchat: "snapchat"
      apple: "apple"
      consentTestgroup: "consentTestgroup"
      twitter: "twitter"
      legacyToken: "legacyToken"
      tiktok: "tiktok"
      reddit: "reddit"
      signal: "signal"
      email: "email"
      longitude: 6.02745618307040320615897144307382404804229736328125
      website: "website"
      spotify: "spotify"
      facebook: "facebook"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      firstName: "firstName"
      discord: "discord"
      phone: "phone"
      consentEmail: "consentEmail"
      username: "username"
  UserPreRegisterRequest:
    type: "object"
    required:
    - "phone"
    properties:
      consentTestgroup:
        type: "string"
      consentPrivacyPolicy:
        type: "string"
      phone:
        type: "string"
      fullName:
        type: "string"
      consentEmail:
        type: "string"
      email:
        type: "string"
    example:
      consentTestgroup: "consentTestgroup"
      consentPrivacyPolicy: "consentPrivacyPolicy"
      phone: "phone"
      fullName: "fullName"
      consentEmail: "consentEmail"
      email: "email"
  UserAvailabilityResponse:
    type: "object"
    properties:
      offer:
        type: "string"
      available:
        type: "boolean"
    example:
      offer: "offer"
      available: true
  UserUpdateRequest:
    type: "object"
    required:
    - "id"
    properties:
      youtube:
        type: "string"
      lastName:
        type: "string"
      consentPrivacyPolicy:
        type: "string"
      displayName:
        type: "string"
      latitude:
        type: "number"
      newcoinCreateAccount:
        type: "string"
      description:
        type: "string"
      tumblr:
        type: "string"
      instagram:
        type: "string"
      medium:
        type: "string"
      soundcloud:
        type: "string"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      id:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      website:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      firstName:
        type: "string"
      discord:
        type: "string"
      consentEmail:
        type: "string"
    example:
      youtube: "youtube"
      lastName: "lastName"
      consentPrivacyPolicy: "consentPrivacyPolicy"
      displayName: "displayName"
      latitude: 0.80082819046101150206595775671303272247314453125
      newcoinCreateAccount: "newcoinCreateAccount"
      description: "description"
      tumblr: "tumblr"
      instagram: "instagram"
      medium: "medium"
      soundcloud: "soundcloud"
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      tiktok: "tiktok"
      reddit: "reddit"
      id: "id"
      signal: "signal"
      longitude: 6.02745618307040320615897144307382404804229736328125
      website: "website"
      spotify: "spotify"
      facebook: "facebook"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      firstName: "firstName"
      discord: "discord"
      consentEmail: "consentEmail"
  SyncContactsRequest:
    type: "object"
    properties:
      contacts:
        type: "array"
        items:
          $ref: "#/definitions/SyncContactsRequest_contacts"
    example:
      contacts:
      - birthday: "birthday"
        identifier: "identifier"
        androidAccountName: "androidAccountName"
        displayName: "displayName"
        prefix: "prefix"
        givenName: "givenName"
        jobTitle: "jobTitle"
        phones:
        - label: "label"
          value: "value"
        - label: "label"
          value: "value"
        avatar: "avatar"
        suffix: "suffix"
        postalAddresses:
        - country: "country"
          city: "city"
          street: "street"
          postcode: "postcode"
          label: "label"
          region: "region"
        - country: "country"
          city: "city"
          street: "street"
          postcode: "postcode"
          label: "label"
          region: "region"
        emails:
        - label: "label"
          value: "value"
        - label: "label"
          value: "value"
        androidAccountType: "androidAccountType"
        familyName: "familyName"
        middleName: "middleName"
        company: "company"
        androidAccountTypeRaw: "androidAccountTypeRaw"
      - birthday: "birthday"
        identifier: "identifier"
        androidAccountName: "androidAccountName"
        displayName: "displayName"
        prefix: "prefix"
        givenName: "givenName"
        jobTitle: "jobTitle"
        phones:
        - label: "label"
          value: "value"
        - label: "label"
          value: "value"
        avatar: "avatar"
        suffix: "suffix"
        postalAddresses:
        - country: "country"
          city: "city"
          street: "street"
          postcode: "postcode"
          label: "label"
          region: "region"
        - country: "country"
          city: "city"
          street: "street"
          postcode: "postcode"
          label: "label"
          region: "region"
        emails:
        - label: "label"
          value: "value"
        - label: "label"
          value: "value"
        androidAccountType: "androidAccountType"
        familyName: "familyName"
        middleName: "middleName"
        company: "company"
        androidAccountTypeRaw: "androidAccountTypeRaw"
  SyncContactsResponse: {}
  UserUploadRequest:
    type: "object"
    required:
    - "contentType"
    - "filename"
    properties:
      filename:
        type: "string"
      contentType:
        type: "string"
    example:
      filename: "filename"
      contentType: "contentType"
  UserPagedListReadPublicResponse:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      done:
        type: "boolean"
    example:
      value:
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      done: true
  UserInvitationPagedListReadPublicResponse:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/UserInvitationPagedListReadPublicResponse_value"
      done:
        type: "boolean"
    example:
      value:
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        invitation:
          youtube: "youtube"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          tumblr: "tumblr"
          telegram: "telegram"
          pinterest: "pinterest"
          instagram: "instagram"
          medium: "medium"
          soundcloud: "soundcloud"
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          discord: "discord"
          tiktok: "tiktok"
          reddit: "reddit"
          signal: "signal"
          hash: "hash"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        invitation:
          youtube: "youtube"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          tumblr: "tumblr"
          telegram: "telegram"
          pinterest: "pinterest"
          instagram: "instagram"
          medium: "medium"
          soundcloud: "soundcloud"
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          discord: "discord"
          tiktok: "tiktok"
          reddit: "reddit"
          signal: "signal"
          hash: "hash"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      done: true
  UserInvitationReadPublicResponse:
    type: "object"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      powered:
        type: "number"
      displayName:
        type: "string"
      newcoinAccTx:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      newcoinPoolId:
        type: "string"
      tumblr:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      medium:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      soundcloud:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      youtubeId:
        type: "string"
      id:
        type: "string"
      newcoinPoolStake:
        type: "number"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      created:
        type: "string"
      invitation:
        $ref: "#/definitions/UserInvitationPagedListReadPublicResponse_invitation"
      spotify:
        type: "string"
      facebook:
        type: "string"
      facebookId:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      newcoinPoolTx:
        type: "string"
      license:
        type: "string"
      contentUrl:
        type: "string"
      discord:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      updated:
        type: "string"
      username:
        type: "string"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      powered: 0.80082819046101150206595775671303272247314453125
      displayName: "displayName"
      newcoinAccTx: "newcoinAccTx"
      latitude: 6.02745618307040320615897144307382404804229736328125
      description: "description"
      newcoinPoolId: "newcoinPoolId"
      tumblr: "tumblr"
      aspectRatio: 1.46581298050294517310021547018550336360931396484375
      instagram: "instagram"
      medium: "medium"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      soundcloud: "soundcloud"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 5.962133916683182377482808078639209270477294921875
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      youtubeId: "youtubeId"
      id: "id"
      newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
      contentType: "contentType"
      signal: "signal"
      longitude: 2.3021358869347654518833223846741020679473876953125
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      created: "created"
      invitation:
        youtube: "youtube"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        tumblr: "tumblr"
        telegram: "telegram"
        pinterest: "pinterest"
        instagram: "instagram"
        medium: "medium"
        soundcloud: "soundcloud"
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        discord: "discord"
        tiktok: "tiktok"
        reddit: "reddit"
        signal: "signal"
        hash: "hash"
      spotify: "spotify"
      facebook: "facebook"
      facebookId: "facebookId"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      newcoinPoolTx: "newcoinPoolTx"
      license: "license"
      contentUrl: "contentUrl"
      discord: "discord"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      updated: "updated"
      username: "username"
  UserInviteRequest:
    type: "object"
    required:
    - "fullName"
    - "phone"
    properties:
      youtube:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      fullName:
        type: "string"
      tumblr:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      instagram:
        type: "string"
      medium:
        type: "string"
      soundcloud:
        type: "string"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      discord:
        type: "string"
      phone:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      signal:
        type: "string"
      email:
        type: "string"
    example:
      youtube: "youtube"
      spotify: "spotify"
      facebook: "facebook"
      fullName: "fullName"
      tumblr: "tumblr"
      telegram: "telegram"
      pinterest: "pinterest"
      instagram: "instagram"
      medium: "medium"
      soundcloud: "soundcloud"
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      discord: "discord"
      phone: "phone"
      tiktok: "tiktok"
      reddit: "reddit"
      signal: "signal"
      email: "email"
  UserDeleteRequest:
    type: "object"
    properties:
      phone:
        type: "string"
      email:
        type: "string"
    example:
      phone: "phone"
      email: "email"
  RatingUpdateRequest:
    type: "object"
    required:
    - "value"
    properties:
      targetId:
        type: "string"
      contextType:
        type: "string"
      contextValue:
        type: "string"
      value:
        type: "number"
        minimum: 0
        maximum: 100
    example:
      targetId: "targetId"
      contextType: "contextType"
      contextValue: "contextValue"
      value: 8.0082819046101150206595775671303272247314453125
  PagedRatedResponseUser:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/PagedRatedResponseUser_value"
      done:
        type: "boolean"
    example:
      value:
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        rating:
          created: "created"
          TxID_mintAsset: "TxID_mintAsset"
          value: 14.6581298050294517310021547018550336360931396484375
          updated: "updated"
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 5.962133916683182377482808078639209270477294921875
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.63737665663332876420099637471139430999755859375
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 2.3021358869347654518833223846741020679473876953125
        contentType: "contentType"
        signal: "signal"
        longitude: 7.061401241503109105224211816675961017608642578125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      - newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        rating:
          created: "created"
          TxID_mintAsset: "TxID_mintAsset"
          value: 14.6581298050294517310021547018550336360931396484375
          updated: "updated"
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 5.962133916683182377482808078639209270477294921875
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.63737665663332876420099637471139430999755859375
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 2.3021358869347654518833223846741020679473876953125
        contentType: "contentType"
        signal: "signal"
        longitude: 7.061401241503109105224211816675961017608642578125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      done: true
  PagedRatedResponsePost:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/PagedRatedResponsePost_value"
      done:
        type: "boolean"
    example:
      value:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 0.80082819046101150206595775671303272247314453125
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        rating:
          created: "created"
          TxID_mintAsset: "TxID_mintAsset"
          value: 14.6581298050294517310021547018550336360931396484375
          updated: "updated"
        description: "description"
        aspectRatio: 6.02745618307040320615897144307382404804229736328125
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.46581298050294517310021547018550336360931396484375
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 0.80082819046101150206595775671303272247314453125
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        rating:
          created: "created"
          TxID_mintAsset: "TxID_mintAsset"
          value: 14.6581298050294517310021547018550336360931396484375
          updated: "updated"
        description: "description"
        aspectRatio: 6.02745618307040320615897144307382404804229736328125
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.46581298050294517310021547018550336360931396484375
      done: true
  RatingUpdateResponse:
    type: "object"
    properties:
      created:
        type: "string"
      TxID_mintAsset:
        type: "string"
      value:
        type: "number"
        minimum: 0
        maximum: 100
      updated:
        type: "string"
    example:
      created: "created"
      TxID_mintAsset: "TxID_mintAsset"
      value: 8.0082819046101150206595775671303272247314453125
      updated: "updated"
  ReportUpdateRequest:
    type: "object"
    required:
    - "reason"
    - "targetId"
    properties:
      reason:
        type: "string"
      targetId:
        type: "string"
      comment:
        type: "string"
    example:
      reason: "reason"
      targetId: "targetId"
      comment: "comment"
  ReportUpdateResponse:
    type: "object"
    properties:
      id:
        type: "number"
    example:
      id: 0.80082819046101150206595775671303272247314453125
  PostCreateResponse:
    type: "object"
    properties:
      coverContentUrl:
        type: "string"
      moodId:
        type: "string"
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      moods:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_moods"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      content:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      license:
        type: "string"
      contentUrl:
        type: "string"
      blurHash:
        type: "string"
      newcoinMintTx:
        type: "string"
      id:
        type: "string"
      embed:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      coverContentUrl: "coverContentUrl"
      moodId: "moodId"
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 0.80082819046101150206595775671303272247314453125
      moods:
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      description: "description"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      title: "title"
      content: "content"
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      license: "license"
      contentUrl: "contentUrl"
      blurHash: "blurHash"
      newcoinMintTx: "newcoinMintTx"
      id: "id"
      embed: "embed"
      updated: "updated"
      contentType: "contentType"
      longitude: 1.46581298050294517310021547018550336360931396484375
  PostReadResponse:
    type: "object"
    properties:
      coverContentUrl:
        type: "string"
      moodId:
        type: "string"
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      moods:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_moods"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      content:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      license:
        type: "string"
      contentUrl:
        type: "string"
      blurHash:
        type: "string"
      newcoinMintTx:
        type: "string"
      id:
        type: "string"
      embed:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      coverContentUrl: "coverContentUrl"
      moodId: "moodId"
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 0.80082819046101150206595775671303272247314453125
      moods:
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      description: "description"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      title: "title"
      content: "content"
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      license: "license"
      contentUrl: "contentUrl"
      blurHash: "blurHash"
      newcoinMintTx: "newcoinMintTx"
      id: "id"
      embed: "embed"
      updated: "updated"
      contentType: "contentType"
      longitude: 1.46581298050294517310021547018550336360931396484375
  PostCreateRequest:
    type: "object"
    properties:
      license:
        type: "string"
      doMint:
        type: "string"
      description:
        type: "string"
      embed:
        type: "string"
      title:
        type: "string"
      contentType:
        type: "string"
      content:
        type: "string"
    example:
      license: "license"
      doMint: "doMint"
      description: "description"
      embed: "embed"
      title: "title"
      contentType: "contentType"
      content: "content"
  PostUpdateRequest:
    type: "object"
    required:
    - "id"
    properties:
      license:
        type: "string"
      latitude:
        type: "number"
      doMint:
        type: "boolean"
      description:
        type: "string"
      id:
        type: "string"
      title:
        type: "string"
      longitude:
        type: "number"
    example:
      license: "license"
      latitude: 0.80082819046101150206595775671303272247314453125
      doMint: true
      description: "description"
      id: "id"
      title: "title"
      longitude: 6.02745618307040320615897144307382404804229736328125
  PostPagedListReadPublicResponse:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_posts"
      done:
        type: "boolean"
    example:
      value:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      done: true
  PostTagsSearchPublicResponse:
    type: "object"
    properties:
      done:
        type: "boolean"
      value:
        type: "array"
        items:
          $ref: "#/definitions/PostTagsSearchPublicResponse_value"
    example:
      done: true
      value:
      - created: "created"
        tag: "tag"
      - created: "created"
        tag: "tag"
  PostRemoteMetaProxyResponse:
    type: "object"
    properties:
      text:
        type: "string"
      status:
        type: "number"
    example:
      text: "text"
      status: 0.80082819046101150206595775671303272247314453125
  MoodCreateResponse:
    type: "object"
    properties:
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_posts"
      content:
        type: "string"
      stakeToAccess:
        type: "number"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      contentUrl:
        type: "string"
      postsCount:
        type: "number"
      blurHash:
        type: "string"
      id:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 0.80082819046101150206595775671303272247314453125
      description: "description"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      title: "title"
      posts:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      content: "content"
      stakeToAccess: 1.46581298050294517310021547018550336360931396484375
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      contentUrl: "contentUrl"
      postsCount: 5.962133916683182377482808078639209270477294921875
      blurHash: "blurHash"
      id: "id"
      updated: "updated"
      contentType: "contentType"
      longitude: 5.63737665663332876420099637471139430999755859375
  MoodReadResponse:
    type: "object"
    properties:
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_posts"
      content:
        type: "string"
      stakeToAccess:
        type: "number"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      contentUrl:
        type: "string"
      postsCount:
        type: "number"
      blurHash:
        type: "string"
      id:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 7.061401241503109105224211816675961017608642578125
      description: "description"
      aspectRatio: 9.301444243932575517419536481611430644989013671875
      title: "title"
      posts:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      content: "content"
      stakeToAccess: 1.173074250955943309548956676735542714595794677734375
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      contentUrl: "contentUrl"
      postsCount: 4.9652184929849543237878606305457651615142822265625
      blurHash: "blurHash"
      id: "id"
      updated: "updated"
      contentType: "contentType"
      longitude: 5.02500479152029466689555192715488374233245849609375
  MoodListAttachedPostsResponse:
    type: "object"
    properties:
      value:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_posts"
      done:
        type: "boolean"
    example:
      value:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      done: true
  MoodCreateRequest:
    type: "object"
    required:
    - "description"
    - "title"
    properties:
      latitude:
        type: "number"
      description:
        type: "string"
      title:
        type: "string"
      longitude:
        type: "number"
    example:
      latitude: 0.80082819046101150206595775671303272247314453125
      description: "description"
      title: "title"
      longitude: 6.02745618307040320615897144307382404804229736328125
  MoodUpdateRequest:
    type: "object"
    required:
    - "id"
    properties:
      latitude:
        type: "number"
      description:
        type: "string"
      id:
        type: "string"
      title:
        type: "string"
      longitude:
        type: "number"
    example:
      latitude: 0.80082819046101150206595775671303272247314453125
      description: "description"
      id: "id"
      title: "title"
      longitude: 6.02745618307040320615897144307382404804229736328125
  MoodAttachRequest:
    type: "object"
    required:
    - "id"
    - "targetId"
    properties:
      targetId:
        type: "string"
      id:
        type: "string"
    example:
      targetId: "targetId"
      id: "id"
  CreativeSearchResponse:
    type: "object"
    properties:
      hits:
        type: "array"
        items:
          $ref: "#/definitions/CreativeSearchResponse_hits"
    example:
      hits:
      - _source:
          image: "image"
          meta:
            date: "date"
            summary: "summary"
            id: 0
            blog_name: "blog_name"
            tags:
            - "tags"
            - "tags"
            short_url: "short_url"
          aesthetics: "{}"
          content: "{}"
        _id: "_id"
      - _source:
          image: "image"
          meta:
            date: "date"
            summary: "summary"
            id: 0
            blog_name: "blog_name"
            tags:
            - "tags"
            - "tags"
            short_url: "short_url"
          aesthetics: "{}"
          content: "{}"
        _id: "_id"
  PaymentStripePaymentIntentCreateRequest:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/PaymentStripePaymentIntentCreateRequest_items"
      username:
        type: "string"
    example:
      items:
      - productId: "productId"
        priceId: "priceId"
      - productId: "productId"
        priceId: "priceId"
      username: "username"
  PaymentStripeWebhookRequest:
    type: "object"
    properties:
      request:
        type: "object"
        properties: {}
      livemode:
        type: "boolean"
      data:
        $ref: "#/definitions/PaymentStripeWebhookRequest_data"
      created:
        type: "integer"
      id:
        type: "string"
      type:
        type: "string"
      api_version:
        type: "string"
      pending_webhooks:
        type: "integer"
      object:
        type: "string"
    example:
      request: "{}"
      livemode: true
      data:
        object: "{}"
      created: 0
      id: "id"
      type: "type"
      api_version: "api_version"
      pending_webhooks: 6
      object: "object"
  PaymentStripePaymentIntentCreateResponse:
    type: "object"
    properties:
      client_secret:
        type: "string"
    example:
      client_secret: "client_secret"
  BcAuthEthRequest:
    type: "object"
    properties:
      encryptedPayload:
        type: "string"
      payload:
        type: "string"
    example:
      encryptedPayload: "encryptedPayload"
      payload: "payload"
  BcAuthEthResponse:
    type: "object"
    required:
    - "result"
    properties:
      result:
        type: "boolean"
      signedAddr:
        type: "string"
      comment:
        type: "string"
      owningAddr:
        type: "string"
    example:
      result: true
      signedAddr: "signedAddr"
      comment: "comment"
      owningAddr: "owningAddr"
  BcKeyPairCreateRequest: {}
  BcKeyPairCreateResponse:
    type: "object"
    required:
    - "prv_key"
    - "pub_key"
    properties:
      prv_key:
        type: "string"
      pub_key:
        type: "string"
    example:
      prv_key: "prv_key"
      pub_key: "pub_key"
  BcAccCreateRequest:
    type: "object"
    required:
    - "newUser"
    - "newacc_pub_active_key"
    - "newacc_pub_owner_key"
    - "payer"
    - "payer_prv_key"
    properties:
      newacc_pub_active_key:
        type: "string"
      newacc_pub_owner_key:
        type: "string"
      payer_prv_key:
        type: "string"
      xfer:
        type: "boolean"
      stake_cpu:
        type: "string"
      newUser:
        type: "string"
      stake_ram:
        type: "number"
      payer:
        type: "string"
      stake_net:
        type: "string"
    example:
      newacc_pub_active_key: "newacc_pub_active_key"
      newacc_pub_owner_key: "newacc_pub_owner_key"
      payer_prv_key: "payer_prv_key"
      xfer: true
      stake_cpu: "stake_cpu"
      newUser: "newUser"
      stake_ram: 0.80082819046101150206595775671303272247314453125
      payer: "payer"
      stake_net: "stake_net"
  BcCollectionCreateRequest:
    type: "object"
    required:
    - "collection_name"
    - "schema_fields"
    - "schema_name"
    - "template_fields"
    - "template_name"
    - "user"
    - "user_prv_active_key"
    properties:
      mkt_fee:
        type: "number"
      template_name:
        type: "string"
      template_fields:
        type: "array"
        items:
          $ref: "#/definitions/BcCollectionCreateRequest_template_fields"
      xferable:
        type: "boolean"
      max_supply:
        type: "number"
      allow_notify:
        type: "boolean"
      burnable:
        type: "boolean"
      schema_name:
        type: "string"
      schema_fields:
        type: "array"
        items:
          $ref: "#/definitions/BcCollectionCreateRequest_template_fields"
      user:
        type: "string"
      user_prv_active_key:
        type: "string"
      collection_name:
        type: "string"
    example:
      mkt_fee: 0.80082819046101150206595775671303272247314453125
      template_name: "template_name"
      template_fields:
      - name: "name"
        type: "type"
      - name: "name"
        type: "type"
      xferable: true
      max_supply: 6.02745618307040320615897144307382404804229736328125
      allow_notify: true
      burnable: true
      schema_name: "schema_name"
      schema_fields:
      - name: "name"
        type: "type"
      - name: "name"
        type: "type"
      user: "user"
      user_prv_active_key: "user_prv_active_key"
      collection_name: "collection_name"
  BcPoolCreateRequest:
    type: "object"
    required:
    - "owner"
    properties:
      owner:
        type: "string"
      owner_prv_active_key:
        type: "string"
      payer:
        type: "string"
    example:
      owner: "owner"
      owner_prv_active_key: "owner_prv_active_key"
      payer: "payer"
  BcStakeMainDAORequest:
    type: "object"
    required:
    - "amt"
    - "payer"
    - "payer_prv_key"
    properties:
      payer_prv_key:
        type: "string"
      amt:
        type: "string"
      payer:
        type: "string"
  BcStakePoolRequest:
    type: "object"
    required:
    - "amt"
    - "owner"
    - "payer"
    - "payer_prv_key"
    properties:
      owner:
        type: "string"
      payer_prv_key:
        type: "string"
      amt:
        type: "string"
      payer:
        type: "string"
    example:
      owner: "owner"
      payer_prv_key: "payer_prv_key"
      amt: "amt"
      payer: "payer"
  BcMintAssetRequest:
    type: "object"
    required:
    - "creator"
    - "payer"
    - "payer_prv_key"
    - "payer_public_key"
    properties:
      immutable_data:
        type: "array"
        items:
          $ref: "#/definitions/BcMintAssetRequest_immutable_data"
      tpl_name:
        type: "string"
      payer_prv_key:
        type: "string"
      creator:
        type: "string"
      sch_name:
        type: "string"
      mutable_data:
        type: "array"
        items:
          $ref: "#/definitions/BcMintAssetRequest_immutable_data"
      col_name:
        type: "string"
      payer:
        type: "string"
      payer_public_key:
        type: "string"
    example:
      immutable_data:
      - value:
        - "value"
        - "value"
        key: "key"
      - value:
        - "value"
        - "value"
        key: "key"
      tpl_name: "tpl_name"
      payer_prv_key: "payer_prv_key"
      creator: "creator"
      sch_name: "sch_name"
      mutable_data:
      - value:
        - "value"
        - "value"
        key: "key"
      - value:
        - "value"
        - "value"
        key: "key"
      col_name: "col_name"
      payer: "payer"
      payer_public_key: "payer_public_key"
  BcTxResponse:
    type: "object"
    properties:
      TxID_createTpl:
        type: "string"
      TxID_createPool:
        type: "string"
      TxID_createAcc:
        type: "string"
      TxID_createCol:
        type: "string"
      TxID_createSch:
        type: "string"
      TxID_stakeToPool:
        type: "string"
      TxID_mintAsset:
        type: "string"
    example:
      TxID_createTpl: "TxID_createTpl"
      TxID_createPool: "TxID_createPool"
      TxID_createAcc: "TxID_createAcc"
      TxID_createCol: "TxID_createCol"
      TxID_createSch: "TxID_createSch"
      TxID_stakeToPool: "TxID_stakeToPool"
      TxID_mintAsset: "TxID_mintAsset"
  BcGetAccountInfo:
    type: "object"
    required:
    - "owner"
    properties:
      owner:
        type: "string"
      contract:
        type: "string"
    example:
      owner: "owner"
      contract: "contract"
  BcGetPoolInfo:
    type: "object"
    required:
    - "owner"
    properties:
      owner:
        type: "string"
    example:
      owner: "owner"
  BcGetInfoResp: {}
  BcCreateDaoRequest:
    type: "object"
    properties:
      descr:
        type: "string"
      authpr_prv_key:
        type: "string"
      author:
        type: "string"
      token:
        type: "string"
    example:
      descr: "descr"
      authpr_prv_key: "authpr_prv_key"
      author: "author"
      token: "token"
  BcCreateDaoResponse:
    type: "object"
    properties:
      TxID_createDao:
        type: "string"
      dao_id:
        type: "string"
    example:
      TxID_createDao: "TxID_createDao"
      dao_id: "dao_id"
  BcCreateDaoProposal:
    type: "object"
    properties:
      summary:
        type: "string"
      vote_start:
        type: "string"
      dao_id:
        type: "string"
      dao_owner:
        type: "string"
      vote_end:
        type: "string"
      title:
        type: "string"
      url:
        type: "string"
    example:
      summary: "summary"
      vote_start: "vote_start"
      dao_id: "dao_id"
      dao_owner: "dao_owner"
      vote_end: "vote_end"
      title: "title"
      url: "url"
  BcCreateWhitelistDaoProposal:
    type: "object"
    properties:
      quantity:
        type: "string"
      proposer:
        type: "string"
      vote_start:
        type: "string"
      dao_id:
        type: "string"
      dao_owner:
        type: "string"
      vote_end:
        type: "string"
      user:
        type: "string"
      proposer_prv_key:
        type: "string"
    example:
      quantity: "quantity"
      proposer: "proposer"
      vote_start: "vote_start"
      dao_id: "dao_id"
      dao_owner: "dao_owner"
      vote_end: "vote_end"
      user: "user"
      proposer_prv_key: "proposer_prv_key"
  BcApproveDaoProposalRequest:
    type: "object"
    properties:
      approver:
        type: "string"
      proposal_author:
        type: "string"
      proposal_id:
        type: "string"
      dao_id:
        type: "number"
      dao_owner:
        type: "string"
      approver_prv_key:
        type: "string"
    example:
      approver: "approver"
      proposal_author: "proposal_author"
      proposal_id: "proposal_id"
      dao_id: 0.80082819046101150206595775671303272247314453125
      dao_owner: "dao_owner"
      approver_prv_key: "approver_prv_key"
  BcListDaoWhitelistResponse: {}
  BcListDaoProposalsResponse:
    type: "object"
    properties:
      more:
        type: "boolean"
      dao_id:
        type: "string"
      next_key:
        type: "string"
      rows:
        type: "array"
        items:
          $ref: "#/definitions/BcListDaoProposalsResponse_rows"
    example:
      more: true
      dao_id: "dao_id"
      next_key: "next_key"
      rows:
      - summary: "summary"
        proposer: "proposer"
        vote_start: "vote_start"
        more: true
        next_key: "next_key"
        vote_end: "vote_end"
        id: 0.80082819046101150206595775671303272247314453125
        title: "title"
        vote_no:
          quantity: "quantity"
          contract: "contract"
        url: "url"
        vote_yes:
          quantity: "quantity"
          contract: "contract"
        status: "status"
      - summary: "summary"
        proposer: "proposer"
        vote_start: "vote_start"
        more: true
        next_key: "next_key"
        vote_end: "vote_end"
        id: 0.80082819046101150206595775671303272247314453125
        title: "title"
        vote_no:
          quantity: "quantity"
          contract: "contract"
        url: "url"
        vote_yes:
          quantity: "quantity"
          contract: "contract"
        status: "status"
  BcDaoProposalVoteRequest:
    type: "object"
    required:
    - "option"
    - "proposal_id"
    - "quantity"
    - "voter"
    properties:
      proposal_type:
        type: "string"
      quantity:
        type: "string"
      proposal_id:
        type: "string"
      dao_id:
        type: "string"
      dao_owner:
        type: "string"
      voter:
        type: "string"
      option:
        type: "string"
    example:
      proposal_type: "proposal_type"
      quantity: "quantity"
      proposal_id: "proposal_id"
      dao_id: "dao_id"
      dao_owner: "dao_owner"
      voter: "voter"
      option: "option"
  BcDaoProposalExecuteRequest:
    type: "object"
    properties:
      proposal_author:
        type: "string"
      proposal_id:
        type: "number"
      dao_id:
        type: "string"
      dao_owner:
        type: "string"
      exec:
        type: "string"
      exec_prv_key:
        type: "string"
    example:
      proposal_author: "proposal_author"
      proposal_id: 0.80082819046101150206595775671303272247314453125
      dao_id: "dao_id"
      dao_owner: "dao_owner"
      exec: "exec"
      exec_prv_key: "exec_prv_key"
  BcDaoProposalExecuteResponse:
    type: "object"
    properties:
      TxID_executeDaoProposal:
        type: "string"
    example:
      TxID_executeDaoProposal: "TxID_executeDaoProposal"
  BcDaoWidthdrawVoteDepositRequest:
    type: "object"
    properties:
      vote_id:
        type: "string"
    example:
      vote_id: "vote_id"
  BcDaoWidthdrawVoteDepositResponse:
    type: "object"
    properties:
      TxID_WithdrawVoteDeposit:
        type: "string"
    example:
      TxID_WithdrawVoteDeposit: "TxID_WithdrawVoteDeposit"
  BcDaoProposalVoteResponse:
    type: "object"
    properties:
      daoId:
        type: "string"
      more:
        type: "boolean"
      next_key:
        type: "string"
      rows:
        type: "array"
        items:
          $ref: "#/definitions/BcDaoProposalVoteResponse_rows"
    example:
      daoId: "daoId"
      more: true
      next_key: "next_key"
      rows:
      - proposal_type: "proposal_type"
        quantity:
          quantity: "quantity"
          contract: "contract"
        proposal_id: 0.80082819046101150206595775671303272247314453125
        dao_id: 6.02745618307040320615897144307382404804229736328125
        id: "id"
        lock_end_date: "lock_end_date"
      - proposal_type: "proposal_type"
        quantity:
          quantity: "quantity"
          contract: "contract"
        proposal_id: 0.80082819046101150206595775671303272247314453125
        dao_id: 6.02745618307040320615897144307382404804229736328125
        id: "id"
        lock_end_date: "lock_end_date"
  ConfigureUserRequest:
    type: "object"
    properties:
      phone:
        type: "string"
      email:
        type: "string"
      username:
        type: "string"
    description: "ConfigureUserRequest Model"
    example:
      phone: "phone"
      email: "email"
      username: "username"
  MoodPagedListReadPublicResponse_author:
    type: "object"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      powered:
        type: "number"
      displayName:
        type: "string"
      newcoinAccTx:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      newcoinPoolId:
        type: "string"
      tumblr:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      medium:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      soundcloud:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      youtubeId:
        type: "string"
      id:
        type: "string"
      newcoinPoolStake:
        type: "number"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      created:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      facebookId:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      newcoinPoolTx:
        type: "string"
      license:
        type: "string"
      contentUrl:
        type: "string"
      discord:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      updated:
        type: "string"
      username:
        type: "string"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      powered: 0.80082819046101150206595775671303272247314453125
      displayName: "displayName"
      newcoinAccTx: "newcoinAccTx"
      latitude: 6.02745618307040320615897144307382404804229736328125
      description: "description"
      newcoinPoolId: "newcoinPoolId"
      tumblr: "tumblr"
      aspectRatio: 1.46581298050294517310021547018550336360931396484375
      instagram: "instagram"
      medium: "medium"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      soundcloud: "soundcloud"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 5.962133916683182377482808078639209270477294921875
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      youtubeId: "youtubeId"
      id: "id"
      newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
      contentType: "contentType"
      signal: "signal"
      longitude: 2.3021358869347654518833223846741020679473876953125
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      created: "created"
      spotify: "spotify"
      facebook: "facebook"
      facebookId: "facebookId"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      newcoinPoolTx: "newcoinPoolTx"
      license: "license"
      contentUrl: "contentUrl"
      discord: "discord"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      updated: "updated"
      username: "username"
  MoodPagedListReadPublicResponse__rel:
    type: "object"
    properties:
      displayValue:
        type: "string"
      score:
        type: "number"
      polygons:
        type: "string"
      source:
        type: "string"
      category:
        type: "string"
    example:
      displayValue: "displayValue"
      score: 1.231513536777255612975068288506008684635162353515625
      polygons: "polygons"
      source: "source"
      category: "category"
  MoodPagedListReadPublicResponse_tags:
    type: "object"
    properties:
      _rel:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse__rel"
      id:
        type: "string"
      value:
        type: "string"
    example:
      _rel:
      - displayValue: "displayValue"
        score: 1.231513536777255612975068288506008684635162353515625
        polygons: "polygons"
        source: "source"
        category: "category"
      - displayValue: "displayValue"
        score: 1.231513536777255612975068288506008684635162353515625
        polygons: "polygons"
        source: "source"
        category: "category"
      id: "id"
      value: "value"
  MoodPagedListReadPublicResponse_moods:
    type: "object"
    properties:
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      content:
        type: "string"
      stakeToAccess:
        type: "number"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      contentUrl:
        type: "string"
      postsCount:
        type: "number"
      blurHash:
        type: "string"
      id:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 2.027123023002321833274663731572218239307403564453125
      description: "description"
      aspectRatio: 4.1456080298839363962315474054776132106781005859375
      title: "title"
      content: "content"
      stakeToAccess: 7.3862819483858839220147274318151175975799560546875
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      contentUrl: "contentUrl"
      postsCount: 1.024645700144157789424070870154537260532379150390625
      blurHash: "blurHash"
      id: "id"
      updated: "updated"
      contentType: "contentType"
      longitude: 1.489415909854170383397331534069962799549102783203125
  MoodPagedListReadPublicResponse_posts:
    type: "object"
    properties:
      coverContentUrl:
        type: "string"
      moodId:
        type: "string"
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      moods:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_moods"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      content:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      license:
        type: "string"
      contentUrl:
        type: "string"
      blurHash:
        type: "string"
      newcoinMintTx:
        type: "string"
      id:
        type: "string"
      embed:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      coverContentUrl: "coverContentUrl"
      moodId: "moodId"
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 3.61607674925191080461672754609026014804840087890625
      moods:
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      description: "description"
      aspectRatio: 6.8468526983526398765889098285697400569915771484375
      title: "title"
      content: "content"
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      license: "license"
      contentUrl: "contentUrl"
      blurHash: "blurHash"
      newcoinMintTx: "newcoinMintTx"
      id: "id"
      embed: "embed"
      updated: "updated"
      contentType: "contentType"
      longitude: 7.4577447736837658709418974467553198337554931640625
  MoodPagedListReadPublicResponse_value:
    type: "object"
    properties:
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_posts"
      content:
        type: "string"
      stakeToAccess:
        type: "number"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      contentUrl:
        type: "string"
      postsCount:
        type: "number"
      blurHash:
        type: "string"
      id:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 0.80082819046101150206595775671303272247314453125
      description: "description"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      title: "title"
      posts:
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      - coverContentUrl: "coverContentUrl"
        moodId: "moodId"
        created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 3.61607674925191080461672754609026014804840087890625
        moods:
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        - created: "created"
          author:
            newcoinTicker: "newcoinTicker"
            youtube: "youtube"
            powered: 0.80082819046101150206595775671303272247314453125
            displayName: "displayName"
            newcoinAccTx: "newcoinAccTx"
            latitude: 6.02745618307040320615897144307382404804229736328125
            description: "description"
            newcoinPoolId: "newcoinPoolId"
            tumblr: "tumblr"
            aspectRatio: 1.46581298050294517310021547018550336360931396484375
            instagram: "instagram"
            medium: "medium"
            newcoinActivePublicKey: "newcoinActivePublicKey"
            soundcloud: "soundcloud"
            newcoinPublicKey: "newcoinPublicKey"
            powering: 5.962133916683182377482808078639209270477294921875
            snapchat: "snapchat"
            apple: "apple"
            twitter: "twitter"
            newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
            tiktok: "tiktok"
            reddit: "reddit"
            youtubeId: "youtubeId"
            id: "id"
            newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
            contentType: "contentType"
            signal: "signal"
            longitude: 2.3021358869347654518833223846741020679473876953125
            newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
            website: "website"
            created: "created"
            spotify: "spotify"
            facebook: "facebook"
            facebookId: "facebookId"
            fullName: "fullName"
            telegram: "telegram"
            pinterest: "pinterest"
            verifiedSocialIds:
            - "verifiedSocialIds"
            - "verifiedSocialIds"
            newcoinPoolTx: "newcoinPoolTx"
            license: "license"
            contentUrl: "contentUrl"
            discord: "discord"
            blurHash: "blurHash"
            consentEmail: "consentEmail"
            updated: "updated"
            username: "username"
          latitude: 2.027123023002321833274663731572218239307403564453125
          description: "description"
          aspectRatio: 4.1456080298839363962315474054776132106781005859375
          title: "title"
          content: "content"
          stakeToAccess: 7.3862819483858839220147274318151175975799560546875
          tags:
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          - _rel:
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            - displayValue: "displayValue"
              score: 1.231513536777255612975068288506008684635162353515625
              polygons: "polygons"
              source: "source"
              category: "category"
            id: "id"
            value: "value"
          contentUrl: "contentUrl"
          postsCount: 1.024645700144157789424070870154537260532379150390625
          blurHash: "blurHash"
          id: "id"
          updated: "updated"
          contentType: "contentType"
          longitude: 1.489415909854170383397331534069962799549102783203125
        description: "description"
        aspectRatio: 6.8468526983526398765889098285697400569915771484375
        title: "title"
        content: "content"
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        license: "license"
        contentUrl: "contentUrl"
        blurHash: "blurHash"
        newcoinMintTx: "newcoinMintTx"
        id: "id"
        embed: "embed"
        updated: "updated"
        contentType: "contentType"
        longitude: 7.4577447736837658709418974467553198337554931640625
      content: "content"
      stakeToAccess: 1.46581298050294517310021547018550336360931396484375
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      contentUrl: "contentUrl"
      postsCount: 5.962133916683182377482808078639209270477294921875
      blurHash: "blurHash"
      id: "id"
      updated: "updated"
      contentType: "contentType"
      longitude: 5.63737665663332876420099637471139430999755859375
  SyncContactsRequest_phones:
    type: "object"
    properties:
      label:
        type: "string"
      value:
        type: "string"
    example:
      label: "label"
      value: "value"
  SyncContactsRequest_postalAddresses:
    type: "object"
    properties:
      country:
        type: "string"
      city:
        type: "string"
      street:
        type: "string"
      postcode:
        type: "string"
      label:
        type: "string"
      region:
        type: "string"
    example:
      country: "country"
      city: "city"
      street: "street"
      postcode: "postcode"
      label: "label"
      region: "region"
  SyncContactsRequest_contacts:
    type: "object"
    properties:
      birthday:
        type: "string"
      identifier:
        type: "string"
      androidAccountName:
        type: "string"
      displayName:
        type: "string"
      prefix:
        type: "string"
      givenName:
        type: "string"
      jobTitle:
        type: "string"
      phones:
        type: "array"
        items:
          $ref: "#/definitions/SyncContactsRequest_phones"
      avatar:
        type: "string"
      suffix:
        type: "string"
      postalAddresses:
        type: "array"
        items:
          $ref: "#/definitions/SyncContactsRequest_postalAddresses"
      emails:
        type: "array"
        items:
          $ref: "#/definitions/SyncContactsRequest_phones"
      androidAccountType:
        type: "string"
      familyName:
        type: "string"
      middleName:
        type: "string"
      company:
        type: "string"
      androidAccountTypeRaw:
        type: "string"
    example:
      birthday: "birthday"
      identifier: "identifier"
      androidAccountName: "androidAccountName"
      displayName: "displayName"
      prefix: "prefix"
      givenName: "givenName"
      jobTitle: "jobTitle"
      phones:
      - label: "label"
        value: "value"
      - label: "label"
        value: "value"
      avatar: "avatar"
      suffix: "suffix"
      postalAddresses:
      - country: "country"
        city: "city"
        street: "street"
        postcode: "postcode"
        label: "label"
        region: "region"
      - country: "country"
        city: "city"
        street: "street"
        postcode: "postcode"
        label: "label"
        region: "region"
      emails:
      - label: "label"
        value: "value"
      - label: "label"
        value: "value"
      androidAccountType: "androidAccountType"
      familyName: "familyName"
      middleName: "middleName"
      company: "company"
      androidAccountTypeRaw: "androidAccountTypeRaw"
  UserInvitationPagedListReadPublicResponse_invitation:
    type: "object"
    properties:
      youtube:
        type: "string"
      created:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      tumblr:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      instagram:
        type: "string"
      medium:
        type: "string"
      soundcloud:
        type: "string"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      discord:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      signal:
        type: "string"
      hash:
        type: "string"
    example:
      youtube: "youtube"
      created: "created"
      spotify: "spotify"
      facebook: "facebook"
      tumblr: "tumblr"
      telegram: "telegram"
      pinterest: "pinterest"
      instagram: "instagram"
      medium: "medium"
      soundcloud: "soundcloud"
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      discord: "discord"
      tiktok: "tiktok"
      reddit: "reddit"
      signal: "signal"
      hash: "hash"
  UserInvitationPagedListReadPublicResponse_value:
    type: "object"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      powered:
        type: "number"
      displayName:
        type: "string"
      newcoinAccTx:
        type: "string"
      latitude:
        type: "number"
      description:
        type: "string"
      newcoinPoolId:
        type: "string"
      tumblr:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      medium:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      soundcloud:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      youtubeId:
        type: "string"
      id:
        type: "string"
      newcoinPoolStake:
        type: "number"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      created:
        type: "string"
      invitation:
        $ref: "#/definitions/UserInvitationPagedListReadPublicResponse_invitation"
      spotify:
        type: "string"
      facebook:
        type: "string"
      facebookId:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      newcoinPoolTx:
        type: "string"
      license:
        type: "string"
      contentUrl:
        type: "string"
      discord:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      updated:
        type: "string"
      username:
        type: "string"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      powered: 0.80082819046101150206595775671303272247314453125
      displayName: "displayName"
      newcoinAccTx: "newcoinAccTx"
      latitude: 6.02745618307040320615897144307382404804229736328125
      description: "description"
      newcoinPoolId: "newcoinPoolId"
      tumblr: "tumblr"
      aspectRatio: 1.46581298050294517310021547018550336360931396484375
      instagram: "instagram"
      medium: "medium"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      soundcloud: "soundcloud"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 5.962133916683182377482808078639209270477294921875
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      youtubeId: "youtubeId"
      id: "id"
      newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
      contentType: "contentType"
      signal: "signal"
      longitude: 2.3021358869347654518833223846741020679473876953125
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      created: "created"
      invitation:
        youtube: "youtube"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        tumblr: "tumblr"
        telegram: "telegram"
        pinterest: "pinterest"
        instagram: "instagram"
        medium: "medium"
        soundcloud: "soundcloud"
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        discord: "discord"
        tiktok: "tiktok"
        reddit: "reddit"
        signal: "signal"
        hash: "hash"
      spotify: "spotify"
      facebook: "facebook"
      facebookId: "facebookId"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      newcoinPoolTx: "newcoinPoolTx"
      license: "license"
      contentUrl: "contentUrl"
      discord: "discord"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      updated: "updated"
      username: "username"
  PagedRatedResponseUser_rating:
    type: "object"
    properties:
      created:
        type: "string"
      TxID_mintAsset:
        type: "string"
      value:
        type: "number"
        minimum: 0
        maximum: 100
      updated:
        type: "string"
    example:
      created: "created"
      TxID_mintAsset: "TxID_mintAsset"
      value: 14.6581298050294517310021547018550336360931396484375
      updated: "updated"
  PagedRatedResponseUser_value:
    type: "object"
    properties:
      newcoinTicker:
        type: "string"
      youtube:
        type: "string"
      powered:
        type: "number"
      displayName:
        type: "string"
      newcoinAccTx:
        type: "string"
      latitude:
        type: "number"
      rating:
        $ref: "#/definitions/PagedRatedResponseUser_rating"
      description:
        type: "string"
      newcoinPoolId:
        type: "string"
      tumblr:
        type: "string"
      aspectRatio:
        type: "number"
      instagram:
        type: "string"
      medium:
        type: "string"
      newcoinActivePublicKey:
        type: "string"
      soundcloud:
        type: "string"
      newcoinPublicKey:
        type: "string"
      powering:
        type: "number"
      snapchat:
        type: "string"
      apple:
        type: "string"
      twitter:
        type: "string"
      newcoinOwnerPublicKey:
        type: "string"
      tiktok:
        type: "string"
      reddit:
        type: "string"
      youtubeId:
        type: "string"
      id:
        type: "string"
      newcoinPoolStake:
        type: "number"
      contentType:
        type: "string"
      signal:
        type: "string"
      longitude:
        type: "number"
      newcoinPublisherPublicKey:
        type: "string"
      website:
        type: "string"
      created:
        type: "string"
      spotify:
        type: "string"
      facebook:
        type: "string"
      facebookId:
        type: "string"
      fullName:
        type: "string"
      telegram:
        type: "string"
      pinterest:
        type: "string"
      verifiedSocialIds:
        type: "array"
        items:
          type: "string"
      newcoinPoolTx:
        type: "string"
      license:
        type: "string"
      contentUrl:
        type: "string"
      discord:
        type: "string"
      blurHash:
        type: "string"
      consentEmail:
        type: "string"
      updated:
        type: "string"
      username:
        type: "string"
    example:
      newcoinTicker: "newcoinTicker"
      youtube: "youtube"
      powered: 0.80082819046101150206595775671303272247314453125
      displayName: "displayName"
      newcoinAccTx: "newcoinAccTx"
      latitude: 6.02745618307040320615897144307382404804229736328125
      rating:
        created: "created"
        TxID_mintAsset: "TxID_mintAsset"
        value: 14.6581298050294517310021547018550336360931396484375
        updated: "updated"
      description: "description"
      newcoinPoolId: "newcoinPoolId"
      tumblr: "tumblr"
      aspectRatio: 5.962133916683182377482808078639209270477294921875
      instagram: "instagram"
      medium: "medium"
      newcoinActivePublicKey: "newcoinActivePublicKey"
      soundcloud: "soundcloud"
      newcoinPublicKey: "newcoinPublicKey"
      powering: 5.63737665663332876420099637471139430999755859375
      snapchat: "snapchat"
      apple: "apple"
      twitter: "twitter"
      newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
      tiktok: "tiktok"
      reddit: "reddit"
      youtubeId: "youtubeId"
      id: "id"
      newcoinPoolStake: 2.3021358869347654518833223846741020679473876953125
      contentType: "contentType"
      signal: "signal"
      longitude: 7.061401241503109105224211816675961017608642578125
      newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
      website: "website"
      created: "created"
      spotify: "spotify"
      facebook: "facebook"
      facebookId: "facebookId"
      fullName: "fullName"
      telegram: "telegram"
      pinterest: "pinterest"
      verifiedSocialIds:
      - "verifiedSocialIds"
      - "verifiedSocialIds"
      newcoinPoolTx: "newcoinPoolTx"
      license: "license"
      contentUrl: "contentUrl"
      discord: "discord"
      blurHash: "blurHash"
      consentEmail: "consentEmail"
      updated: "updated"
      username: "username"
  PagedRatedResponsePost_value:
    type: "object"
    properties:
      coverContentUrl:
        type: "string"
      moodId:
        type: "string"
      created:
        type: "string"
      author:
        $ref: "#/definitions/MoodPagedListReadPublicResponse_author"
      latitude:
        type: "number"
      moods:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_moods"
      rating:
        $ref: "#/definitions/PagedRatedResponseUser_rating"
      description:
        type: "string"
      aspectRatio:
        type: "number"
      title:
        type: "string"
      content:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/MoodPagedListReadPublicResponse_tags"
      license:
        type: "string"
      contentUrl:
        type: "string"
      blurHash:
        type: "string"
      newcoinMintTx:
        type: "string"
      id:
        type: "string"
      embed:
        type: "string"
      updated:
        type: "string"
      contentType:
        type: "string"
      longitude:
        type: "number"
    example:
      coverContentUrl: "coverContentUrl"
      moodId: "moodId"
      created: "created"
      author:
        newcoinTicker: "newcoinTicker"
        youtube: "youtube"
        powered: 0.80082819046101150206595775671303272247314453125
        displayName: "displayName"
        newcoinAccTx: "newcoinAccTx"
        latitude: 6.02745618307040320615897144307382404804229736328125
        description: "description"
        newcoinPoolId: "newcoinPoolId"
        tumblr: "tumblr"
        aspectRatio: 1.46581298050294517310021547018550336360931396484375
        instagram: "instagram"
        medium: "medium"
        newcoinActivePublicKey: "newcoinActivePublicKey"
        soundcloud: "soundcloud"
        newcoinPublicKey: "newcoinPublicKey"
        powering: 5.962133916683182377482808078639209270477294921875
        snapchat: "snapchat"
        apple: "apple"
        twitter: "twitter"
        newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
        tiktok: "tiktok"
        reddit: "reddit"
        youtubeId: "youtubeId"
        id: "id"
        newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
        contentType: "contentType"
        signal: "signal"
        longitude: 2.3021358869347654518833223846741020679473876953125
        newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
        website: "website"
        created: "created"
        spotify: "spotify"
        facebook: "facebook"
        facebookId: "facebookId"
        fullName: "fullName"
        telegram: "telegram"
        pinterest: "pinterest"
        verifiedSocialIds:
        - "verifiedSocialIds"
        - "verifiedSocialIds"
        newcoinPoolTx: "newcoinPoolTx"
        license: "license"
        contentUrl: "contentUrl"
        discord: "discord"
        blurHash: "blurHash"
        consentEmail: "consentEmail"
        updated: "updated"
        username: "username"
      latitude: 0.80082819046101150206595775671303272247314453125
      moods:
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      - created: "created"
        author:
          newcoinTicker: "newcoinTicker"
          youtube: "youtube"
          powered: 0.80082819046101150206595775671303272247314453125
          displayName: "displayName"
          newcoinAccTx: "newcoinAccTx"
          latitude: 6.02745618307040320615897144307382404804229736328125
          description: "description"
          newcoinPoolId: "newcoinPoolId"
          tumblr: "tumblr"
          aspectRatio: 1.46581298050294517310021547018550336360931396484375
          instagram: "instagram"
          medium: "medium"
          newcoinActivePublicKey: "newcoinActivePublicKey"
          soundcloud: "soundcloud"
          newcoinPublicKey: "newcoinPublicKey"
          powering: 5.962133916683182377482808078639209270477294921875
          snapchat: "snapchat"
          apple: "apple"
          twitter: "twitter"
          newcoinOwnerPublicKey: "newcoinOwnerPublicKey"
          tiktok: "tiktok"
          reddit: "reddit"
          youtubeId: "youtubeId"
          id: "id"
          newcoinPoolStake: 5.63737665663332876420099637471139430999755859375
          contentType: "contentType"
          signal: "signal"
          longitude: 2.3021358869347654518833223846741020679473876953125
          newcoinPublisherPublicKey: "newcoinPublisherPublicKey"
          website: "website"
          created: "created"
          spotify: "spotify"
          facebook: "facebook"
          facebookId: "facebookId"
          fullName: "fullName"
          telegram: "telegram"
          pinterest: "pinterest"
          verifiedSocialIds:
          - "verifiedSocialIds"
          - "verifiedSocialIds"
          newcoinPoolTx: "newcoinPoolTx"
          license: "license"
          contentUrl: "contentUrl"
          discord: "discord"
          blurHash: "blurHash"
          consentEmail: "consentEmail"
          updated: "updated"
          username: "username"
        latitude: 2.027123023002321833274663731572218239307403564453125
        description: "description"
        aspectRatio: 4.1456080298839363962315474054776132106781005859375
        title: "title"
        content: "content"
        stakeToAccess: 7.3862819483858839220147274318151175975799560546875
        tags:
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        - _rel:
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          - displayValue: "displayValue"
            score: 1.231513536777255612975068288506008684635162353515625
            polygons: "polygons"
            source: "source"
            category: "category"
          id: "id"
          value: "value"
        contentUrl: "contentUrl"
        postsCount: 1.024645700144157789424070870154537260532379150390625
        blurHash: "blurHash"
        id: "id"
        updated: "updated"
        contentType: "contentType"
        longitude: 1.489415909854170383397331534069962799549102783203125
      rating:
        created: "created"
        TxID_mintAsset: "TxID_mintAsset"
        value: 14.6581298050294517310021547018550336360931396484375
        updated: "updated"
      description: "description"
      aspectRatio: 6.02745618307040320615897144307382404804229736328125
      title: "title"
      content: "content"
      tags:
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      - _rel:
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        - displayValue: "displayValue"
          score: 1.231513536777255612975068288506008684635162353515625
          polygons: "polygons"
          source: "source"
          category: "category"
        id: "id"
        value: "value"
      license: "license"
      contentUrl: "contentUrl"
      blurHash: "blurHash"
      newcoinMintTx: "newcoinMintTx"
      id: "id"
      embed: "embed"
      updated: "updated"
      contentType: "contentType"
      longitude: 1.46581298050294517310021547018550336360931396484375
  PostTagsSearchPublicResponse_value:
    type: "object"
    properties:
      created:
        type: "string"
      tag:
        type: "string"
    example:
      created: "created"
      tag: "tag"
  CreativeSearchResponse__source_meta:
    type: "object"
    properties:
      date:
        type: "string"
      summary:
        type: "string"
      id:
        type: "integer"
      blog_name:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      short_url:
        type: "string"
    example:
      date: "date"
      summary: "summary"
      id: 0
      blog_name: "blog_name"
      tags:
      - "tags"
      - "tags"
      short_url: "short_url"
  CreativeSearchResponse__source:
    type: "object"
    properties:
      image:
        type: "string"
      meta:
        $ref: "#/definitions/CreativeSearchResponse__source_meta"
      aesthetics:
        type: "object"
        properties: {}
      content:
        type: "object"
        properties: {}
    example:
      image: "image"
      meta:
        date: "date"
        summary: "summary"
        id: 0
        blog_name: "blog_name"
        tags:
        - "tags"
        - "tags"
        short_url: "short_url"
      aesthetics: "{}"
      content: "{}"
  CreativeSearchResponse_hits:
    type: "object"
    properties:
      _source:
        $ref: "#/definitions/CreativeSearchResponse__source"
      _id:
        type: "string"
    example:
      _source:
        image: "image"
        meta:
          date: "date"
          summary: "summary"
          id: 0
          blog_name: "blog_name"
          tags:
          - "tags"
          - "tags"
          short_url: "short_url"
        aesthetics: "{}"
        content: "{}"
      _id: "_id"
  PaymentStripePaymentIntentCreateRequest_items:
    type: "object"
    properties:
      productId:
        type: "string"
      priceId:
        type: "string"
    example:
      productId: "productId"
      priceId: "priceId"
  PaymentStripeWebhookRequest_data:
    type: "object"
    properties:
      object:
        type: "object"
        properties: {}
    example:
      object: "{}"
  BcCollectionCreateRequest_template_fields:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      name:
        type: "string"
      type:
        type: "string"
    example:
      name: "name"
      type: "type"
  BcMintAssetRequest_immutable_data:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      value:
        type: "array"
        items:
          type: "string"
      key:
        type: "string"
    example:
      value:
      - "value"
      - "value"
      key: "key"
  BcListDaoProposalsResponse_vote_no:
    type: "object"
    properties:
      quantity:
        type: "string"
      contract:
        type: "string"
    example:
      quantity: "quantity"
      contract: "contract"
  BcListDaoProposalsResponse_rows:
    type: "object"
    properties:
      summary:
        type: "string"
      proposer:
        type: "string"
      vote_start:
        type: "string"
      more:
        type: "boolean"
      next_key:
        type: "string"
      vote_end:
        type: "string"
      id:
        type: "number"
      title:
        type: "string"
      vote_no:
        $ref: "#/definitions/BcListDaoProposalsResponse_vote_no"
      url:
        type: "string"
      vote_yes:
        $ref: "#/definitions/BcListDaoProposalsResponse_vote_no"
      status:
        type: "string"
    example:
      summary: "summary"
      proposer: "proposer"
      vote_start: "vote_start"
      more: true
      next_key: "next_key"
      vote_end: "vote_end"
      id: 0.80082819046101150206595775671303272247314453125
      title: "title"
      vote_no:
        quantity: "quantity"
        contract: "contract"
      url: "url"
      vote_yes:
        quantity: "quantity"
        contract: "contract"
      status: "status"
  BcDaoProposalVoteResponse_rows:
    type: "object"
    properties:
      proposal_type:
        type: "string"
      quantity:
        $ref: "#/definitions/BcListDaoProposalsResponse_vote_no"
      proposal_id:
        type: "number"
      dao_id:
        type: "number"
      id:
        type: "string"
      lock_end_date:
        type: "string"
    example:
      proposal_type: "proposal_type"
      quantity:
        quantity: "quantity"
        contract: "contract"
      proposal_id: 0.80082819046101150206595775671303272247314453125
      dao_id: 6.02745618307040320615897144307382404804229736328125
      id: "id"
      lock_end_date: "lock_end_date"
x-amazon-apigateway-minimum-compression-size: 1024
