<?php
/**
 * BcCollectionCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BcCollectionCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BcCollectionCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BcCollectionCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mkt_fee' => 'float',
        'template_name' => 'string',
        'template_fields' => '\Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[]',
        'xferable' => 'bool',
        'max_supply' => 'float',
        'allow_notify' => 'bool',
        'burnable' => 'bool',
        'schema_name' => 'string',
        'schema_fields' => '\Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[]',
        'user' => 'string',
        'user_prv_active_key' => 'string',
        'collection_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mkt_fee' => null,
        'template_name' => null,
        'template_fields' => null,
        'xferable' => null,
        'max_supply' => null,
        'allow_notify' => null,
        'burnable' => null,
        'schema_name' => null,
        'schema_fields' => null,
        'user' => null,
        'user_prv_active_key' => null,
        'collection_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mkt_fee' => 'mkt_fee',
        'template_name' => 'template_name',
        'template_fields' => 'template_fields',
        'xferable' => 'xferable',
        'max_supply' => 'max_supply',
        'allow_notify' => 'allow_notify',
        'burnable' => 'burnable',
        'schema_name' => 'schema_name',
        'schema_fields' => 'schema_fields',
        'user' => 'user',
        'user_prv_active_key' => 'user_prv_active_key',
        'collection_name' => 'collection_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mkt_fee' => 'setMktFee',
        'template_name' => 'setTemplateName',
        'template_fields' => 'setTemplateFields',
        'xferable' => 'setXferable',
        'max_supply' => 'setMaxSupply',
        'allow_notify' => 'setAllowNotify',
        'burnable' => 'setBurnable',
        'schema_name' => 'setSchemaName',
        'schema_fields' => 'setSchemaFields',
        'user' => 'setUser',
        'user_prv_active_key' => 'setUserPrvActiveKey',
        'collection_name' => 'setCollectionName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mkt_fee' => 'getMktFee',
        'template_name' => 'getTemplateName',
        'template_fields' => 'getTemplateFields',
        'xferable' => 'getXferable',
        'max_supply' => 'getMaxSupply',
        'allow_notify' => 'getAllowNotify',
        'burnable' => 'getBurnable',
        'schema_name' => 'getSchemaName',
        'schema_fields' => 'getSchemaFields',
        'user' => 'getUser',
        'user_prv_active_key' => 'getUserPrvActiveKey',
        'collection_name' => 'getCollectionName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mkt_fee'] = isset($data['mkt_fee']) ? $data['mkt_fee'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['template_fields'] = isset($data['template_fields']) ? $data['template_fields'] : null;
        $this->container['xferable'] = isset($data['xferable']) ? $data['xferable'] : null;
        $this->container['max_supply'] = isset($data['max_supply']) ? $data['max_supply'] : null;
        $this->container['allow_notify'] = isset($data['allow_notify']) ? $data['allow_notify'] : null;
        $this->container['burnable'] = isset($data['burnable']) ? $data['burnable'] : null;
        $this->container['schema_name'] = isset($data['schema_name']) ? $data['schema_name'] : null;
        $this->container['schema_fields'] = isset($data['schema_fields']) ? $data['schema_fields'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_prv_active_key'] = isset($data['user_prv_active_key']) ? $data['user_prv_active_key'] : null;
        $this->container['collection_name'] = isset($data['collection_name']) ? $data['collection_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['template_name'] === null) {
            $invalidProperties[] = "'template_name' can't be null";
        }
        if ($this->container['template_fields'] === null) {
            $invalidProperties[] = "'template_fields' can't be null";
        }
        if ($this->container['schema_name'] === null) {
            $invalidProperties[] = "'schema_name' can't be null";
        }
        if ($this->container['schema_fields'] === null) {
            $invalidProperties[] = "'schema_fields' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['user_prv_active_key'] === null) {
            $invalidProperties[] = "'user_prv_active_key' can't be null";
        }
        if ($this->container['collection_name'] === null) {
            $invalidProperties[] = "'collection_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mkt_fee
     *
     * @return float
     */
    public function getMktFee()
    {
        return $this->container['mkt_fee'];
    }

    /**
     * Sets mkt_fee
     *
     * @param float $mkt_fee mkt_fee
     *
     * @return $this
     */
    public function setMktFee($mkt_fee)
    {
        $this->container['mkt_fee'] = $mkt_fee;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name template_name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template_fields
     *
     * @return \Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[]
     */
    public function getTemplateFields()
    {
        return $this->container['template_fields'];
    }

    /**
     * Sets template_fields
     *
     * @param \Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[] $template_fields template_fields
     *
     * @return $this
     */
    public function setTemplateFields($template_fields)
    {
        $this->container['template_fields'] = $template_fields;

        return $this;
    }

    /**
     * Gets xferable
     *
     * @return bool
     */
    public function getXferable()
    {
        return $this->container['xferable'];
    }

    /**
     * Sets xferable
     *
     * @param bool $xferable xferable
     *
     * @return $this
     */
    public function setXferable($xferable)
    {
        $this->container['xferable'] = $xferable;

        return $this;
    }

    /**
     * Gets max_supply
     *
     * @return float
     */
    public function getMaxSupply()
    {
        return $this->container['max_supply'];
    }

    /**
     * Sets max_supply
     *
     * @param float $max_supply max_supply
     *
     * @return $this
     */
    public function setMaxSupply($max_supply)
    {
        $this->container['max_supply'] = $max_supply;

        return $this;
    }

    /**
     * Gets allow_notify
     *
     * @return bool
     */
    public function getAllowNotify()
    {
        return $this->container['allow_notify'];
    }

    /**
     * Sets allow_notify
     *
     * @param bool $allow_notify allow_notify
     *
     * @return $this
     */
    public function setAllowNotify($allow_notify)
    {
        $this->container['allow_notify'] = $allow_notify;

        return $this;
    }

    /**
     * Gets burnable
     *
     * @return bool
     */
    public function getBurnable()
    {
        return $this->container['burnable'];
    }

    /**
     * Sets burnable
     *
     * @param bool $burnable burnable
     *
     * @return $this
     */
    public function setBurnable($burnable)
    {
        $this->container['burnable'] = $burnable;

        return $this;
    }

    /**
     * Gets schema_name
     *
     * @return string
     */
    public function getSchemaName()
    {
        return $this->container['schema_name'];
    }

    /**
     * Sets schema_name
     *
     * @param string $schema_name schema_name
     *
     * @return $this
     */
    public function setSchemaName($schema_name)
    {
        $this->container['schema_name'] = $schema_name;

        return $this;
    }

    /**
     * Gets schema_fields
     *
     * @return \Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[]
     */
    public function getSchemaFields()
    {
        return $this->container['schema_fields'];
    }

    /**
     * Sets schema_fields
     *
     * @param \Swagger\Client\Model\BcCollectionCreateRequestTemplateFields[] $schema_fields schema_fields
     *
     * @return $this
     */
    public function setSchemaFields($schema_fields)
    {
        $this->container['schema_fields'] = $schema_fields;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_prv_active_key
     *
     * @return string
     */
    public function getUserPrvActiveKey()
    {
        return $this->container['user_prv_active_key'];
    }

    /**
     * Sets user_prv_active_key
     *
     * @param string $user_prv_active_key user_prv_active_key
     *
     * @return $this
     */
    public function setUserPrvActiveKey($user_prv_active_key)
    {
        $this->container['user_prv_active_key'] = $user_prv_active_key;

        return $this;
    }

    /**
     * Gets collection_name
     *
     * @return string
     */
    public function getCollectionName()
    {
        return $this->container['collection_name'];
    }

    /**
     * Sets collection_name
     *
     * @param string $collection_name collection_name
     *
     * @return $this
     */
    public function setCollectionName($collection_name)
    {
        $this->container['collection_name'] = $collection_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


