<?php
/**
 * BcListDaoProposalsResponseRows
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BcListDaoProposalsResponseRows Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BcListDaoProposalsResponseRows implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BcListDaoProposalsResponse_rows';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'summary' => 'string',
        'proposer' => 'string',
        'vote_start' => 'string',
        'more' => 'bool',
        'next_key' => 'string',
        'vote_end' => 'string',
        'id' => 'float',
        'title' => 'string',
        'vote_no' => '\Swagger\Client\Model\BcListDaoProposalsResponseVoteNo',
        'url' => 'string',
        'vote_yes' => '\Swagger\Client\Model\BcListDaoProposalsResponseVoteNo',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'summary' => null,
        'proposer' => null,
        'vote_start' => null,
        'more' => null,
        'next_key' => null,
        'vote_end' => null,
        'id' => null,
        'title' => null,
        'vote_no' => null,
        'url' => null,
        'vote_yes' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'summary' => 'summary',
        'proposer' => 'proposer',
        'vote_start' => 'vote_start',
        'more' => 'more',
        'next_key' => 'next_key',
        'vote_end' => 'vote_end',
        'id' => 'id',
        'title' => 'title',
        'vote_no' => 'vote_no',
        'url' => 'url',
        'vote_yes' => 'vote_yes',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'summary' => 'setSummary',
        'proposer' => 'setProposer',
        'vote_start' => 'setVoteStart',
        'more' => 'setMore',
        'next_key' => 'setNextKey',
        'vote_end' => 'setVoteEnd',
        'id' => 'setId',
        'title' => 'setTitle',
        'vote_no' => 'setVoteNo',
        'url' => 'setUrl',
        'vote_yes' => 'setVoteYes',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'summary' => 'getSummary',
        'proposer' => 'getProposer',
        'vote_start' => 'getVoteStart',
        'more' => 'getMore',
        'next_key' => 'getNextKey',
        'vote_end' => 'getVoteEnd',
        'id' => 'getId',
        'title' => 'getTitle',
        'vote_no' => 'getVoteNo',
        'url' => 'getUrl',
        'vote_yes' => 'getVoteYes',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['proposer'] = isset($data['proposer']) ? $data['proposer'] : null;
        $this->container['vote_start'] = isset($data['vote_start']) ? $data['vote_start'] : null;
        $this->container['more'] = isset($data['more']) ? $data['more'] : null;
        $this->container['next_key'] = isset($data['next_key']) ? $data['next_key'] : null;
        $this->container['vote_end'] = isset($data['vote_end']) ? $data['vote_end'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['vote_no'] = isset($data['vote_no']) ? $data['vote_no'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['vote_yes'] = isset($data['vote_yes']) ? $data['vote_yes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets proposer
     *
     * @return string
     */
    public function getProposer()
    {
        return $this->container['proposer'];
    }

    /**
     * Sets proposer
     *
     * @param string $proposer proposer
     *
     * @return $this
     */
    public function setProposer($proposer)
    {
        $this->container['proposer'] = $proposer;

        return $this;
    }

    /**
     * Gets vote_start
     *
     * @return string
     */
    public function getVoteStart()
    {
        return $this->container['vote_start'];
    }

    /**
     * Sets vote_start
     *
     * @param string $vote_start vote_start
     *
     * @return $this
     */
    public function setVoteStart($vote_start)
    {
        $this->container['vote_start'] = $vote_start;

        return $this;
    }

    /**
     * Gets more
     *
     * @return bool
     */
    public function getMore()
    {
        return $this->container['more'];
    }

    /**
     * Sets more
     *
     * @param bool $more more
     *
     * @return $this
     */
    public function setMore($more)
    {
        $this->container['more'] = $more;

        return $this;
    }

    /**
     * Gets next_key
     *
     * @return string
     */
    public function getNextKey()
    {
        return $this->container['next_key'];
    }

    /**
     * Sets next_key
     *
     * @param string $next_key next_key
     *
     * @return $this
     */
    public function setNextKey($next_key)
    {
        $this->container['next_key'] = $next_key;

        return $this;
    }

    /**
     * Gets vote_end
     *
     * @return string
     */
    public function getVoteEnd()
    {
        return $this->container['vote_end'];
    }

    /**
     * Sets vote_end
     *
     * @param string $vote_end vote_end
     *
     * @return $this
     */
    public function setVoteEnd($vote_end)
    {
        $this->container['vote_end'] = $vote_end;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets vote_no
     *
     * @return \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo
     */
    public function getVoteNo()
    {
        return $this->container['vote_no'];
    }

    /**
     * Sets vote_no
     *
     * @param \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo $vote_no vote_no
     *
     * @return $this
     */
    public function setVoteNo($vote_no)
    {
        $this->container['vote_no'] = $vote_no;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets vote_yes
     *
     * @return \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo
     */
    public function getVoteYes()
    {
        return $this->container['vote_yes'];
    }

    /**
     * Sets vote_yes
     *
     * @param \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo $vote_yes vote_yes
     *
     * @return $this
     */
    public function setVoteYes($vote_yes)
    {
        $this->container['vote_yes'] = $vote_yes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


