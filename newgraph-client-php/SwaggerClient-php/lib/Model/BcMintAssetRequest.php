<?php
/**
 * BcMintAssetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BcMintAssetRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BcMintAssetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BcMintAssetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'immutable_data' => '\Swagger\Client\Model\BcMintAssetRequestImmutableData[]',
        'tpl_name' => 'string',
        'payer_prv_key' => 'string',
        'creator' => 'string',
        'sch_name' => 'string',
        'mutable_data' => '\Swagger\Client\Model\BcMintAssetRequestImmutableData[]',
        'col_name' => 'string',
        'payer' => 'string',
        'payer_public_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'immutable_data' => null,
        'tpl_name' => null,
        'payer_prv_key' => null,
        'creator' => null,
        'sch_name' => null,
        'mutable_data' => null,
        'col_name' => null,
        'payer' => null,
        'payer_public_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'immutable_data' => 'immutable_data',
        'tpl_name' => 'tpl_name',
        'payer_prv_key' => 'payer_prv_key',
        'creator' => 'creator',
        'sch_name' => 'sch_name',
        'mutable_data' => 'mutable_data',
        'col_name' => 'col_name',
        'payer' => 'payer',
        'payer_public_key' => 'payer_public_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'immutable_data' => 'setImmutableData',
        'tpl_name' => 'setTplName',
        'payer_prv_key' => 'setPayerPrvKey',
        'creator' => 'setCreator',
        'sch_name' => 'setSchName',
        'mutable_data' => 'setMutableData',
        'col_name' => 'setColName',
        'payer' => 'setPayer',
        'payer_public_key' => 'setPayerPublicKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'immutable_data' => 'getImmutableData',
        'tpl_name' => 'getTplName',
        'payer_prv_key' => 'getPayerPrvKey',
        'creator' => 'getCreator',
        'sch_name' => 'getSchName',
        'mutable_data' => 'getMutableData',
        'col_name' => 'getColName',
        'payer' => 'getPayer',
        'payer_public_key' => 'getPayerPublicKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['immutable_data'] = isset($data['immutable_data']) ? $data['immutable_data'] : null;
        $this->container['tpl_name'] = isset($data['tpl_name']) ? $data['tpl_name'] : null;
        $this->container['payer_prv_key'] = isset($data['payer_prv_key']) ? $data['payer_prv_key'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['sch_name'] = isset($data['sch_name']) ? $data['sch_name'] : null;
        $this->container['mutable_data'] = isset($data['mutable_data']) ? $data['mutable_data'] : null;
        $this->container['col_name'] = isset($data['col_name']) ? $data['col_name'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['payer_public_key'] = isset($data['payer_public_key']) ? $data['payer_public_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payer_prv_key'] === null) {
            $invalidProperties[] = "'payer_prv_key' can't be null";
        }
        if ($this->container['creator'] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if ($this->container['payer'] === null) {
            $invalidProperties[] = "'payer' can't be null";
        }
        if ($this->container['payer_public_key'] === null) {
            $invalidProperties[] = "'payer_public_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets immutable_data
     *
     * @return \Swagger\Client\Model\BcMintAssetRequestImmutableData[]
     */
    public function getImmutableData()
    {
        return $this->container['immutable_data'];
    }

    /**
     * Sets immutable_data
     *
     * @param \Swagger\Client\Model\BcMintAssetRequestImmutableData[] $immutable_data immutable_data
     *
     * @return $this
     */
    public function setImmutableData($immutable_data)
    {
        $this->container['immutable_data'] = $immutable_data;

        return $this;
    }

    /**
     * Gets tpl_name
     *
     * @return string
     */
    public function getTplName()
    {
        return $this->container['tpl_name'];
    }

    /**
     * Sets tpl_name
     *
     * @param string $tpl_name tpl_name
     *
     * @return $this
     */
    public function setTplName($tpl_name)
    {
        $this->container['tpl_name'] = $tpl_name;

        return $this;
    }

    /**
     * Gets payer_prv_key
     *
     * @return string
     */
    public function getPayerPrvKey()
    {
        return $this->container['payer_prv_key'];
    }

    /**
     * Sets payer_prv_key
     *
     * @param string $payer_prv_key payer_prv_key
     *
     * @return $this
     */
    public function setPayerPrvKey($payer_prv_key)
    {
        $this->container['payer_prv_key'] = $payer_prv_key;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets sch_name
     *
     * @return string
     */
    public function getSchName()
    {
        return $this->container['sch_name'];
    }

    /**
     * Sets sch_name
     *
     * @param string $sch_name sch_name
     *
     * @return $this
     */
    public function setSchName($sch_name)
    {
        $this->container['sch_name'] = $sch_name;

        return $this;
    }

    /**
     * Gets mutable_data
     *
     * @return \Swagger\Client\Model\BcMintAssetRequestImmutableData[]
     */
    public function getMutableData()
    {
        return $this->container['mutable_data'];
    }

    /**
     * Sets mutable_data
     *
     * @param \Swagger\Client\Model\BcMintAssetRequestImmutableData[] $mutable_data mutable_data
     *
     * @return $this
     */
    public function setMutableData($mutable_data)
    {
        $this->container['mutable_data'] = $mutable_data;

        return $this;
    }

    /**
     * Gets col_name
     *
     * @return string
     */
    public function getColName()
    {
        return $this->container['col_name'];
    }

    /**
     * Sets col_name
     *
     * @param string $col_name col_name
     *
     * @return $this
     */
    public function setColName($col_name)
    {
        $this->container['col_name'] = $col_name;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string $payer payer
     *
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets payer_public_key
     *
     * @return string
     */
    public function getPayerPublicKey()
    {
        return $this->container['payer_public_key'];
    }

    /**
     * Sets payer_public_key
     *
     * @param string $payer_public_key payer_public_key
     *
     * @return $this
     */
    public function setPayerPublicKey($payer_public_key)
    {
        $this->container['payer_public_key'] = $payer_public_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


