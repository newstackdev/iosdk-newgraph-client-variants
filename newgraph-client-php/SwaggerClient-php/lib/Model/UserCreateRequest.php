<?php
/**
 * UserCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'newcoin_ticker' => 'string',
        'youtube' => 'string',
        'last_name' => 'string',
        'consent_privacy_policy' => 'string',
        'display_name' => 'string',
        'latitude' => 'float',
        'description' => 'string',
        'tumblr' => 'string',
        'instagram' => 'string',
        'medium' => 'string',
        'soundcloud' => 'string',
        'snapchat' => 'string',
        'apple' => 'string',
        'consent_testgroup' => 'string',
        'twitter' => 'string',
        'legacy_token' => 'string',
        'tiktok' => 'string',
        'reddit' => 'string',
        'signal' => 'string',
        'email' => 'string',
        'longitude' => 'float',
        'website' => 'string',
        'spotify' => 'string',
        'facebook' => 'string',
        'full_name' => 'string',
        'telegram' => 'string',
        'pinterest' => 'string',
        'first_name' => 'string',
        'discord' => 'string',
        'phone' => 'string',
        'consent_email' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'newcoin_ticker' => null,
        'youtube' => null,
        'last_name' => null,
        'consent_privacy_policy' => null,
        'display_name' => null,
        'latitude' => null,
        'description' => null,
        'tumblr' => null,
        'instagram' => null,
        'medium' => null,
        'soundcloud' => null,
        'snapchat' => null,
        'apple' => null,
        'consent_testgroup' => null,
        'twitter' => null,
        'legacy_token' => null,
        'tiktok' => null,
        'reddit' => null,
        'signal' => null,
        'email' => null,
        'longitude' => null,
        'website' => null,
        'spotify' => null,
        'facebook' => null,
        'full_name' => null,
        'telegram' => null,
        'pinterest' => null,
        'first_name' => null,
        'discord' => null,
        'phone' => null,
        'consent_email' => null,
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'newcoin_ticker' => 'newcoinTicker',
        'youtube' => 'youtube',
        'last_name' => 'lastName',
        'consent_privacy_policy' => 'consentPrivacyPolicy',
        'display_name' => 'displayName',
        'latitude' => 'latitude',
        'description' => 'description',
        'tumblr' => 'tumblr',
        'instagram' => 'instagram',
        'medium' => 'medium',
        'soundcloud' => 'soundcloud',
        'snapchat' => 'snapchat',
        'apple' => 'apple',
        'consent_testgroup' => 'consentTestgroup',
        'twitter' => 'twitter',
        'legacy_token' => 'legacyToken',
        'tiktok' => 'tiktok',
        'reddit' => 'reddit',
        'signal' => 'signal',
        'email' => 'email',
        'longitude' => 'longitude',
        'website' => 'website',
        'spotify' => 'spotify',
        'facebook' => 'facebook',
        'full_name' => 'fullName',
        'telegram' => 'telegram',
        'pinterest' => 'pinterest',
        'first_name' => 'firstName',
        'discord' => 'discord',
        'phone' => 'phone',
        'consent_email' => 'consentEmail',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'newcoin_ticker' => 'setNewcoinTicker',
        'youtube' => 'setYoutube',
        'last_name' => 'setLastName',
        'consent_privacy_policy' => 'setConsentPrivacyPolicy',
        'display_name' => 'setDisplayName',
        'latitude' => 'setLatitude',
        'description' => 'setDescription',
        'tumblr' => 'setTumblr',
        'instagram' => 'setInstagram',
        'medium' => 'setMedium',
        'soundcloud' => 'setSoundcloud',
        'snapchat' => 'setSnapchat',
        'apple' => 'setApple',
        'consent_testgroup' => 'setConsentTestgroup',
        'twitter' => 'setTwitter',
        'legacy_token' => 'setLegacyToken',
        'tiktok' => 'setTiktok',
        'reddit' => 'setReddit',
        'signal' => 'setSignal',
        'email' => 'setEmail',
        'longitude' => 'setLongitude',
        'website' => 'setWebsite',
        'spotify' => 'setSpotify',
        'facebook' => 'setFacebook',
        'full_name' => 'setFullName',
        'telegram' => 'setTelegram',
        'pinterest' => 'setPinterest',
        'first_name' => 'setFirstName',
        'discord' => 'setDiscord',
        'phone' => 'setPhone',
        'consent_email' => 'setConsentEmail',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'newcoin_ticker' => 'getNewcoinTicker',
        'youtube' => 'getYoutube',
        'last_name' => 'getLastName',
        'consent_privacy_policy' => 'getConsentPrivacyPolicy',
        'display_name' => 'getDisplayName',
        'latitude' => 'getLatitude',
        'description' => 'getDescription',
        'tumblr' => 'getTumblr',
        'instagram' => 'getInstagram',
        'medium' => 'getMedium',
        'soundcloud' => 'getSoundcloud',
        'snapchat' => 'getSnapchat',
        'apple' => 'getApple',
        'consent_testgroup' => 'getConsentTestgroup',
        'twitter' => 'getTwitter',
        'legacy_token' => 'getLegacyToken',
        'tiktok' => 'getTiktok',
        'reddit' => 'getReddit',
        'signal' => 'getSignal',
        'email' => 'getEmail',
        'longitude' => 'getLongitude',
        'website' => 'getWebsite',
        'spotify' => 'getSpotify',
        'facebook' => 'getFacebook',
        'full_name' => 'getFullName',
        'telegram' => 'getTelegram',
        'pinterest' => 'getPinterest',
        'first_name' => 'getFirstName',
        'discord' => 'getDiscord',
        'phone' => 'getPhone',
        'consent_email' => 'getConsentEmail',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['newcoin_ticker'] = isset($data['newcoin_ticker']) ? $data['newcoin_ticker'] : null;
        $this->container['youtube'] = isset($data['youtube']) ? $data['youtube'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['consent_privacy_policy'] = isset($data['consent_privacy_policy']) ? $data['consent_privacy_policy'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tumblr'] = isset($data['tumblr']) ? $data['tumblr'] : null;
        $this->container['instagram'] = isset($data['instagram']) ? $data['instagram'] : null;
        $this->container['medium'] = isset($data['medium']) ? $data['medium'] : null;
        $this->container['soundcloud'] = isset($data['soundcloud']) ? $data['soundcloud'] : null;
        $this->container['snapchat'] = isset($data['snapchat']) ? $data['snapchat'] : null;
        $this->container['apple'] = isset($data['apple']) ? $data['apple'] : null;
        $this->container['consent_testgroup'] = isset($data['consent_testgroup']) ? $data['consent_testgroup'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['legacy_token'] = isset($data['legacy_token']) ? $data['legacy_token'] : null;
        $this->container['tiktok'] = isset($data['tiktok']) ? $data['tiktok'] : null;
        $this->container['reddit'] = isset($data['reddit']) ? $data['reddit'] : null;
        $this->container['signal'] = isset($data['signal']) ? $data['signal'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['spotify'] = isset($data['spotify']) ? $data['spotify'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['telegram'] = isset($data['telegram']) ? $data['telegram'] : null;
        $this->container['pinterest'] = isset($data['pinterest']) ? $data['pinterest'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['discord'] = isset($data['discord']) ? $data['discord'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['consent_email'] = isset($data['consent_email']) ? $data['consent_email'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if (!is_null($this->container['username']) && !preg_match("/^[a-z0-5\\.]{2,9}\\.io$/", $this->container['username'])) {
            $invalidProperties[] = "invalid value for 'username', must be conform to the pattern /^[a-z0-5\\.]{2,9}\\.io$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets newcoin_ticker
     *
     * @return string
     */
    public function getNewcoinTicker()
    {
        return $this->container['newcoin_ticker'];
    }

    /**
     * Sets newcoin_ticker
     *
     * @param string $newcoin_ticker newcoin_ticker
     *
     * @return $this
     */
    public function setNewcoinTicker($newcoin_ticker)
    {
        $this->container['newcoin_ticker'] = $newcoin_ticker;

        return $this;
    }

    /**
     * Gets youtube
     *
     * @return string
     */
    public function getYoutube()
    {
        return $this->container['youtube'];
    }

    /**
     * Sets youtube
     *
     * @param string $youtube youtube
     *
     * @return $this
     */
    public function setYoutube($youtube)
    {
        $this->container['youtube'] = $youtube;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets consent_privacy_policy
     *
     * @return string
     */
    public function getConsentPrivacyPolicy()
    {
        return $this->container['consent_privacy_policy'];
    }

    /**
     * Sets consent_privacy_policy
     *
     * @param string $consent_privacy_policy consent_privacy_policy
     *
     * @return $this
     */
    public function setConsentPrivacyPolicy($consent_privacy_policy)
    {
        $this->container['consent_privacy_policy'] = $consent_privacy_policy;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tumblr
     *
     * @return string
     */
    public function getTumblr()
    {
        return $this->container['tumblr'];
    }

    /**
     * Sets tumblr
     *
     * @param string $tumblr tumblr
     *
     * @return $this
     */
    public function setTumblr($tumblr)
    {
        $this->container['tumblr'] = $tumblr;

        return $this;
    }

    /**
     * Gets instagram
     *
     * @return string
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     *
     * @param string $instagram instagram
     *
     * @return $this
     */
    public function setInstagram($instagram)
    {
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets medium
     *
     * @return string
     */
    public function getMedium()
    {
        return $this->container['medium'];
    }

    /**
     * Sets medium
     *
     * @param string $medium medium
     *
     * @return $this
     */
    public function setMedium($medium)
    {
        $this->container['medium'] = $medium;

        return $this;
    }

    /**
     * Gets soundcloud
     *
     * @return string
     */
    public function getSoundcloud()
    {
        return $this->container['soundcloud'];
    }

    /**
     * Sets soundcloud
     *
     * @param string $soundcloud soundcloud
     *
     * @return $this
     */
    public function setSoundcloud($soundcloud)
    {
        $this->container['soundcloud'] = $soundcloud;

        return $this;
    }

    /**
     * Gets snapchat
     *
     * @return string
     */
    public function getSnapchat()
    {
        return $this->container['snapchat'];
    }

    /**
     * Sets snapchat
     *
     * @param string $snapchat snapchat
     *
     * @return $this
     */
    public function setSnapchat($snapchat)
    {
        $this->container['snapchat'] = $snapchat;

        return $this;
    }

    /**
     * Gets apple
     *
     * @return string
     */
    public function getApple()
    {
        return $this->container['apple'];
    }

    /**
     * Sets apple
     *
     * @param string $apple apple
     *
     * @return $this
     */
    public function setApple($apple)
    {
        $this->container['apple'] = $apple;

        return $this;
    }

    /**
     * Gets consent_testgroup
     *
     * @return string
     */
    public function getConsentTestgroup()
    {
        return $this->container['consent_testgroup'];
    }

    /**
     * Sets consent_testgroup
     *
     * @param string $consent_testgroup consent_testgroup
     *
     * @return $this
     */
    public function setConsentTestgroup($consent_testgroup)
    {
        $this->container['consent_testgroup'] = $consent_testgroup;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string $twitter twitter
     *
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets legacy_token
     *
     * @return string
     */
    public function getLegacyToken()
    {
        return $this->container['legacy_token'];
    }

    /**
     * Sets legacy_token
     *
     * @param string $legacy_token legacy_token
     *
     * @return $this
     */
    public function setLegacyToken($legacy_token)
    {
        $this->container['legacy_token'] = $legacy_token;

        return $this;
    }

    /**
     * Gets tiktok
     *
     * @return string
     */
    public function getTiktok()
    {
        return $this->container['tiktok'];
    }

    /**
     * Sets tiktok
     *
     * @param string $tiktok tiktok
     *
     * @return $this
     */
    public function setTiktok($tiktok)
    {
        $this->container['tiktok'] = $tiktok;

        return $this;
    }

    /**
     * Gets reddit
     *
     * @return string
     */
    public function getReddit()
    {
        return $this->container['reddit'];
    }

    /**
     * Sets reddit
     *
     * @param string $reddit reddit
     *
     * @return $this
     */
    public function setReddit($reddit)
    {
        $this->container['reddit'] = $reddit;

        return $this;
    }

    /**
     * Gets signal
     *
     * @return string
     */
    public function getSignal()
    {
        return $this->container['signal'];
    }

    /**
     * Sets signal
     *
     * @param string $signal signal
     *
     * @return $this
     */
    public function setSignal($signal)
    {
        $this->container['signal'] = $signal;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets spotify
     *
     * @return string
     */
    public function getSpotify()
    {
        return $this->container['spotify'];
    }

    /**
     * Sets spotify
     *
     * @param string $spotify spotify
     *
     * @return $this
     */
    public function setSpotify($spotify)
    {
        $this->container['spotify'] = $spotify;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string $facebook facebook
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets telegram
     *
     * @return string
     */
    public function getTelegram()
    {
        return $this->container['telegram'];
    }

    /**
     * Sets telegram
     *
     * @param string $telegram telegram
     *
     * @return $this
     */
    public function setTelegram($telegram)
    {
        $this->container['telegram'] = $telegram;

        return $this;
    }

    /**
     * Gets pinterest
     *
     * @return string
     */
    public function getPinterest()
    {
        return $this->container['pinterest'];
    }

    /**
     * Sets pinterest
     *
     * @param string $pinterest pinterest
     *
     * @return $this
     */
    public function setPinterest($pinterest)
    {
        $this->container['pinterest'] = $pinterest;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets discord
     *
     * @return string
     */
    public function getDiscord()
    {
        return $this->container['discord'];
    }

    /**
     * Sets discord
     *
     * @param string $discord discord
     *
     * @return $this
     */
    public function setDiscord($discord)
    {
        $this->container['discord'] = $discord;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets consent_email
     *
     * @return string
     */
    public function getConsentEmail()
    {
        return $this->container['consent_email'];
    }

    /**
     * Sets consent_email
     *
     * @param string $consent_email consent_email
     *
     * @return $this
     */
    public function setConsentEmail($consent_email)
    {
        $this->container['consent_email'] = $consent_email;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {

        if (!is_null($username) && (!preg_match("/^[a-z0-5\\.]{2,9}\\.io$/", $username))) {
            throw new \InvalidArgumentException("invalid value for $username when calling UserCreateRequest., must conform to the pattern /^[a-z0-5\\.]{2,9}\\.io$/.");
        }

        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


