<?php
/**
 * BcDaoProposalVoteResponseRows
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * newgraph-api-eu-dev
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BcDaoProposalVoteResponseRows Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BcDaoProposalVoteResponseRows implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BcDaoProposalVoteResponse_rows';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'proposal_type' => 'string',
        'quantity' => '\Swagger\Client\Model\BcListDaoProposalsResponseVoteNo',
        'proposal_id' => 'float',
        'dao_id' => 'float',
        'id' => 'string',
        'lock_end_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'proposal_type' => null,
        'quantity' => null,
        'proposal_id' => null,
        'dao_id' => null,
        'id' => null,
        'lock_end_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proposal_type' => 'proposal_type',
        'quantity' => 'quantity',
        'proposal_id' => 'proposal_id',
        'dao_id' => 'dao_id',
        'id' => 'id',
        'lock_end_date' => 'lock_end_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proposal_type' => 'setProposalType',
        'quantity' => 'setQuantity',
        'proposal_id' => 'setProposalId',
        'dao_id' => 'setDaoId',
        'id' => 'setId',
        'lock_end_date' => 'setLockEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proposal_type' => 'getProposalType',
        'quantity' => 'getQuantity',
        'proposal_id' => 'getProposalId',
        'dao_id' => 'getDaoId',
        'id' => 'getId',
        'lock_end_date' => 'getLockEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['proposal_type'] = isset($data['proposal_type']) ? $data['proposal_type'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['proposal_id'] = isset($data['proposal_id']) ? $data['proposal_id'] : null;
        $this->container['dao_id'] = isset($data['dao_id']) ? $data['dao_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lock_end_date'] = isset($data['lock_end_date']) ? $data['lock_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proposal_type
     *
     * @return string
     */
    public function getProposalType()
    {
        return $this->container['proposal_type'];
    }

    /**
     * Sets proposal_type
     *
     * @param string $proposal_type proposal_type
     *
     * @return $this
     */
    public function setProposalType($proposal_type)
    {
        $this->container['proposal_type'] = $proposal_type;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \Swagger\Client\Model\BcListDaoProposalsResponseVoteNo $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets proposal_id
     *
     * @return float
     */
    public function getProposalId()
    {
        return $this->container['proposal_id'];
    }

    /**
     * Sets proposal_id
     *
     * @param float $proposal_id proposal_id
     *
     * @return $this
     */
    public function setProposalId($proposal_id)
    {
        $this->container['proposal_id'] = $proposal_id;

        return $this;
    }

    /**
     * Gets dao_id
     *
     * @return float
     */
    public function getDaoId()
    {
        return $this->container['dao_id'];
    }

    /**
     * Sets dao_id
     *
     * @param float $dao_id dao_id
     *
     * @return $this
     */
    public function setDaoId($dao_id)
    {
        $this->container['dao_id'] = $dao_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lock_end_date
     *
     * @return string
     */
    public function getLockEndDate()
    {
        return $this->container['lock_end_date'];
    }

    /**
     * Sets lock_end_date
     *
     * @param string $lock_end_date lock_end_date
     *
     * @return $this
     */
    public function setLockEndDate($lock_end_date)
    {
        $this->container['lock_end_date'] = $lock_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


