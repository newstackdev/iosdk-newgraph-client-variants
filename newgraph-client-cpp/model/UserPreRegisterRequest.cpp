/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserPreRegisterRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserPreRegisterRequest::UserPreRegisterRequest()
{
    m_ConsentTestgroup = utility::conversions::to_string_t("");
    m_ConsentTestgroupIsSet = false;
    m_ConsentPrivacyPolicy = utility::conversions::to_string_t("");
    m_ConsentPrivacyPolicyIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_ConsentEmail = utility::conversions::to_string_t("");
    m_ConsentEmailIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
}

UserPreRegisterRequest::~UserPreRegisterRequest()
{
}

void UserPreRegisterRequest::validate()
{
    // TODO: implement validation
}

web::json::value UserPreRegisterRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ConsentTestgroupIsSet)
    {
        val[utility::conversions::to_string_t("consentTestgroup")] = ModelBase::toJson(m_ConsentTestgroup);
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        val[utility::conversions::to_string_t("consentPrivacyPolicy")] = ModelBase::toJson(m_ConsentPrivacyPolicy);
    }
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_ConsentEmailIsSet)
    {
        val[utility::conversions::to_string_t("consentEmail")] = ModelBase::toJson(m_ConsentEmail);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }

    return val;
}

void UserPreRegisterRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("consentTestgroup")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentTestgroup")];
        if(!fieldValue.is_null())
        {
            setConsentTestgroup(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentPrivacyPolicy")];
        if(!fieldValue.is_null())
        {
            setConsentPrivacyPolicy(ModelBase::stringFromJson(fieldValue));
        }
    }
    setPhone(ModelBase::stringFromJson(val[utility::conversions::to_string_t("phone")]));
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fullName")];
        if(!fieldValue.is_null())
        {
            setFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentEmail")];
        if(!fieldValue.is_null())
        {
            setConsentEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UserPreRegisterRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ConsentTestgroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentTestgroup"), m_ConsentTestgroup));
        
    }
    if(m_ConsentPrivacyPolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentPrivacyPolicy"), m_ConsentPrivacyPolicy));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
        
    }
    if(m_ConsentEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentEmail"), m_ConsentEmail));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
}

void UserPreRegisterRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("consentTestgroup")))
    {
        setConsentTestgroup(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentTestgroup"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentPrivacyPolicy")))
    {
        setConsentPrivacyPolicy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentPrivacyPolicy"))));
    }
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentEmail")))
    {
        setConsentEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
}

utility::string_t UserPreRegisterRequest::getConsentTestgroup() const
{
    return m_ConsentTestgroup;
}


void UserPreRegisterRequest::setConsentTestgroup(utility::string_t value)
{
    m_ConsentTestgroup = value;
    m_ConsentTestgroupIsSet = true;
}
bool UserPreRegisterRequest::consentTestgroupIsSet() const
{
    return m_ConsentTestgroupIsSet;
}

void UserPreRegisterRequest::unsetConsentTestgroup()
{
    m_ConsentTestgroupIsSet = false;
}

utility::string_t UserPreRegisterRequest::getConsentPrivacyPolicy() const
{
    return m_ConsentPrivacyPolicy;
}


void UserPreRegisterRequest::setConsentPrivacyPolicy(utility::string_t value)
{
    m_ConsentPrivacyPolicy = value;
    m_ConsentPrivacyPolicyIsSet = true;
}
bool UserPreRegisterRequest::consentPrivacyPolicyIsSet() const
{
    return m_ConsentPrivacyPolicyIsSet;
}

void UserPreRegisterRequest::unsetConsentPrivacyPolicy()
{
    m_ConsentPrivacyPolicyIsSet = false;
}

utility::string_t UserPreRegisterRequest::getPhone() const
{
    return m_Phone;
}


void UserPreRegisterRequest::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
utility::string_t UserPreRegisterRequest::getFullName() const
{
    return m_FullName;
}


void UserPreRegisterRequest::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool UserPreRegisterRequest::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void UserPreRegisterRequest::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t UserPreRegisterRequest::getConsentEmail() const
{
    return m_ConsentEmail;
}


void UserPreRegisterRequest::setConsentEmail(utility::string_t value)
{
    m_ConsentEmail = value;
    m_ConsentEmailIsSet = true;
}
bool UserPreRegisterRequest::consentEmailIsSet() const
{
    return m_ConsentEmailIsSet;
}

void UserPreRegisterRequest::unsetConsentEmail()
{
    m_ConsentEmailIsSet = false;
}

utility::string_t UserPreRegisterRequest::getEmail() const
{
    return m_Email;
}


void UserPreRegisterRequest::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool UserPreRegisterRequest::emailIsSet() const
{
    return m_EmailIsSet;
}

void UserPreRegisterRequest::unsetEmail()
{
    m_EmailIsSet = false;
}

}
}
}
}

