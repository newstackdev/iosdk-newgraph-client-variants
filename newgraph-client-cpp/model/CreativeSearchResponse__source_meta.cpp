/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreativeSearchResponse__source_meta.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreativeSearchResponse__source_meta::CreativeSearchResponse__source_meta()
{
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Summary = utility::conversions::to_string_t("");
    m_SummaryIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Blog_name = utility::conversions::to_string_t("");
    m_Blog_nameIsSet = false;
    m_TagsIsSet = false;
    m_Short_url = utility::conversions::to_string_t("");
    m_Short_urlIsSet = false;
}

CreativeSearchResponse__source_meta::~CreativeSearchResponse__source_meta()
{
}

void CreativeSearchResponse__source_meta::validate()
{
    // TODO: implement validation
}

web::json::value CreativeSearchResponse__source_meta::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    }
    if(m_SummaryIsSet)
    {
        val[utility::conversions::to_string_t("summary")] = ModelBase::toJson(m_Summary);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Blog_nameIsSet)
    {
        val[utility::conversions::to_string_t("blog_name")] = ModelBase::toJson(m_Blog_name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Short_urlIsSet)
    {
        val[utility::conversions::to_string_t("short_url")] = ModelBase::toJson(m_Short_url);
    }

    return val;
}

void CreativeSearchResponse__source_meta::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("date")];
        if(!fieldValue.is_null())
        {
            setDate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("summary")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("summary")];
        if(!fieldValue.is_null())
        {
            setSummary(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blog_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("blog_name")];
        if(!fieldValue.is_null())
        {
            setBlogName(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("tags")))
        {
        for( auto& item : val[utility::conversions::to_string_t("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("short_url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("short_url")];
        if(!fieldValue.is_null())
        {
            setShortUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void CreativeSearchResponse__source_meta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
        
    }
    if(m_SummaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("summary"), m_Summary));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Blog_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blog_name"), m_Blog_name));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_Short_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("short_url"), m_Short_url));
        
    }
}

void CreativeSearchResponse__source_meta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("date")))
    {
        setDate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("date"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("summary")))
    {
        setSummary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("summary"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blog_name")))
    {
        setBlogName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("blog_name"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("short_url")))
    {
        setShortUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("short_url"))));
    }
}

utility::string_t CreativeSearchResponse__source_meta::getDate() const
{
    return m_date;
}


void CreativeSearchResponse__source_meta::setDate(utility::string_t value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool CreativeSearchResponse__source_meta::dateIsSet() const
{
    return m_dateIsSet;
}

void CreativeSearchResponse__source_meta::unsetdate()
{
    m_dateIsSet = false;
}

utility::string_t CreativeSearchResponse__source_meta::getSummary() const
{
    return m_Summary;
}


void CreativeSearchResponse__source_meta::setSummary(utility::string_t value)
{
    m_Summary = value;
    m_SummaryIsSet = true;
}
bool CreativeSearchResponse__source_meta::summaryIsSet() const
{
    return m_SummaryIsSet;
}

void CreativeSearchResponse__source_meta::unsetSummary()
{
    m_SummaryIsSet = false;
}

int32_t CreativeSearchResponse__source_meta::getId() const
{
    return m_Id;
}


void CreativeSearchResponse__source_meta::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CreativeSearchResponse__source_meta::idIsSet() const
{
    return m_IdIsSet;
}

void CreativeSearchResponse__source_meta::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t CreativeSearchResponse__source_meta::getBlogName() const
{
    return m_Blog_name;
}


void CreativeSearchResponse__source_meta::setBlogName(utility::string_t value)
{
    m_Blog_name = value;
    m_Blog_nameIsSet = true;
}
bool CreativeSearchResponse__source_meta::blogNameIsSet() const
{
    return m_Blog_nameIsSet;
}

void CreativeSearchResponse__source_meta::unsetBlog_name()
{
    m_Blog_nameIsSet = false;
}

std::vector<utility::string_t>& CreativeSearchResponse__source_meta::getTags()
{
    return m_Tags;
}

void CreativeSearchResponse__source_meta::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool CreativeSearchResponse__source_meta::tagsIsSet() const
{
    return m_TagsIsSet;
}

void CreativeSearchResponse__source_meta::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t CreativeSearchResponse__source_meta::getShortUrl() const
{
    return m_Short_url;
}


void CreativeSearchResponse__source_meta::setShortUrl(utility::string_t value)
{
    m_Short_url = value;
    m_Short_urlIsSet = true;
}
bool CreativeSearchResponse__source_meta::shortUrlIsSet() const
{
    return m_Short_urlIsSet;
}

void CreativeSearchResponse__source_meta::unsetShort_url()
{
    m_Short_urlIsSet = false;
}

}
}
}
}

