/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcMintAssetRequest_immutable_data.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcMintAssetRequest_immutable_data::BcMintAssetRequest_immutable_data()
{
    m_Key = utility::conversions::to_string_t("");
}

BcMintAssetRequest_immutable_data::~BcMintAssetRequest_immutable_data()
{
}

void BcMintAssetRequest_immutable_data::validate()
{
    // TODO: implement validation
}

web::json::value BcMintAssetRequest_immutable_data::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("value")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("key")] = ModelBase::toJson(m_Key);

    return val;
}

void BcMintAssetRequest_immutable_data::fromJson(web::json::value& val)
{
    {
        m_Value.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("value")].as_array() )
        {
            m_Value.push_back(ModelBase::stringFromJson(item));
        }
    }
    setKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("key")]));
}

void BcMintAssetRequest_immutable_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("key"), m_Key));
}

void BcMintAssetRequest_immutable_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Value.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Value.push_back(ModelBase::stringFromJson(item));
        }
    }
    setKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("key"))));
}

std::vector<utility::string_t>& BcMintAssetRequest_immutable_data::getValue()
{
    return m_Value;
}

void BcMintAssetRequest_immutable_data::setValue(std::vector<utility::string_t> value)
{
    m_Value = value;
    
}
utility::string_t BcMintAssetRequest_immutable_data::getKey() const
{
    return m_Key;
}


void BcMintAssetRequest_immutable_data::setKey(utility::string_t value)
{
    m_Key = value;
    
}
}
}
}
}

