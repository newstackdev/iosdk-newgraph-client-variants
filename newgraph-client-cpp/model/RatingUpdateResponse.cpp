/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RatingUpdateResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RatingUpdateResponse::RatingUpdateResponse()
{
    m_Created = utility::conversions::to_string_t("");
    m_CreatedIsSet = false;
    m_TxID_mintAsset = utility::conversions::to_string_t("");
    m_TxID_mintAssetIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_Updated = utility::conversions::to_string_t("");
    m_UpdatedIsSet = false;
}

RatingUpdateResponse::~RatingUpdateResponse()
{
}

void RatingUpdateResponse::validate()
{
    // TODO: implement validation
}

web::json::value RatingUpdateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_TxID_mintAssetIsSet)
    {
        val[utility::conversions::to_string_t("TxID_mintAsset")] = ModelBase::toJson(m_TxID_mintAsset);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }

    return val;
}

void RatingUpdateResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("TxID_mintAsset")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("TxID_mintAsset")];
        if(!fieldValue.is_null())
        {
            setTxIDMintAsset(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("value")];
        if(!fieldValue.is_null())
        {
            setValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void RatingUpdateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_TxID_mintAssetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TxID_mintAsset"), m_TxID_mintAsset));
        
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
}

void RatingUpdateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("TxID_mintAsset")))
    {
        setTxIDMintAsset(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TxID_mintAsset"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
}

utility::string_t RatingUpdateResponse::getCreated() const
{
    return m_Created;
}


void RatingUpdateResponse::setCreated(utility::string_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool RatingUpdateResponse::createdIsSet() const
{
    return m_CreatedIsSet;
}

void RatingUpdateResponse::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::string_t RatingUpdateResponse::getTxIDMintAsset() const
{
    return m_TxID_mintAsset;
}


void RatingUpdateResponse::setTxIDMintAsset(utility::string_t value)
{
    m_TxID_mintAsset = value;
    m_TxID_mintAssetIsSet = true;
}
bool RatingUpdateResponse::txIDMintAssetIsSet() const
{
    return m_TxID_mintAssetIsSet;
}

void RatingUpdateResponse::unsetTxID_mintAsset()
{
    m_TxID_mintAssetIsSet = false;
}

double RatingUpdateResponse::getValue() const
{
    return m_Value;
}


void RatingUpdateResponse::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool RatingUpdateResponse::valueIsSet() const
{
    return m_ValueIsSet;
}

void RatingUpdateResponse::unsetValue()
{
    m_ValueIsSet = false;
}

utility::string_t RatingUpdateResponse::getUpdated() const
{
    return m_Updated;
}


void RatingUpdateResponse::setUpdated(utility::string_t value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool RatingUpdateResponse::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void RatingUpdateResponse::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

}
}
}
}

