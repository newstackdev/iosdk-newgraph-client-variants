/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UploadResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UploadResponse::UploadResponse()
{
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
}

UploadResponse::~UploadResponse()
{
}

void UploadResponse::validate()
{
    // TODO: implement validation
}

web::json::value UploadResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t("filename")] = ModelBase::toJson(m_Filename);
    }
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t("key")] = ModelBase::toJson(m_Key);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }

    return val;
}

void UploadResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("filename")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("filename")];
        if(!fieldValue.is_null())
        {
            setFilename(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("key")];
        if(!fieldValue.is_null())
        {
            setKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("url")];
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UploadResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filename"), m_Filename));
        
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("key"), m_Key));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
        
    }
}

void UploadResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filename")))
    {
        setFilename(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("filename"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("key")))
    {
        setKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("key"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
}

utility::string_t UploadResponse::getFilename() const
{
    return m_Filename;
}


void UploadResponse::setFilename(utility::string_t value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}
bool UploadResponse::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void UploadResponse::unsetFilename()
{
    m_FilenameIsSet = false;
}

utility::string_t UploadResponse::getKey() const
{
    return m_Key;
}


void UploadResponse::setKey(utility::string_t value)
{
    m_Key = value;
    m_KeyIsSet = true;
}
bool UploadResponse::keyIsSet() const
{
    return m_KeyIsSet;
}

void UploadResponse::unsetKey()
{
    m_KeyIsSet = false;
}

utility::string_t UploadResponse::getUrl() const
{
    return m_Url;
}


void UploadResponse::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool UploadResponse::urlIsSet() const
{
    return m_UrlIsSet;
}

void UploadResponse::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

