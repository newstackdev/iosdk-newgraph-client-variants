/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcAuthEthResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcAuthEthResponse::BcAuthEthResponse()
{
    m_Result = false;
    m_SignedAddr = utility::conversions::to_string_t("");
    m_SignedAddrIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_OwningAddr = utility::conversions::to_string_t("");
    m_OwningAddrIsSet = false;
}

BcAuthEthResponse::~BcAuthEthResponse()
{
}

void BcAuthEthResponse::validate()
{
    // TODO: implement validation
}

web::json::value BcAuthEthResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("result")] = ModelBase::toJson(m_Result);
    if(m_SignedAddrIsSet)
    {
        val[utility::conversions::to_string_t("signedAddr")] = ModelBase::toJson(m_SignedAddr);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t("comment")] = ModelBase::toJson(m_Comment);
    }
    if(m_OwningAddrIsSet)
    {
        val[utility::conversions::to_string_t("owningAddr")] = ModelBase::toJson(m_OwningAddr);
    }

    return val;
}

void BcAuthEthResponse::fromJson(web::json::value& val)
{
    setResult(ModelBase::boolFromJson(val[utility::conversions::to_string_t("result")]));
    if(val.has_field(utility::conversions::to_string_t("signedAddr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("signedAddr")];
        if(!fieldValue.is_null())
        {
            setSignedAddr(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("comment")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("comment")];
        if(!fieldValue.is_null())
        {
            setComment(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owningAddr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("owningAddr")];
        if(!fieldValue.is_null())
        {
            setOwningAddr(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcAuthEthResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("result"), m_Result));
    if(m_SignedAddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signedAddr"), m_SignedAddr));
        
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("comment"), m_Comment));
        
    }
    if(m_OwningAddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owningAddr"), m_OwningAddr));
        
    }
}

void BcAuthEthResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setResult(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("result"))));
    if(multipart->hasContent(utility::conversions::to_string_t("signedAddr")))
    {
        setSignedAddr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signedAddr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("comment")))
    {
        setComment(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("comment"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owningAddr")))
    {
        setOwningAddr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("owningAddr"))));
    }
}

bool BcAuthEthResponse::isResult() const
{
    return m_Result;
}


void BcAuthEthResponse::setResult(bool value)
{
    m_Result = value;
    
}
utility::string_t BcAuthEthResponse::getSignedAddr() const
{
    return m_SignedAddr;
}


void BcAuthEthResponse::setSignedAddr(utility::string_t value)
{
    m_SignedAddr = value;
    m_SignedAddrIsSet = true;
}
bool BcAuthEthResponse::signedAddrIsSet() const
{
    return m_SignedAddrIsSet;
}

void BcAuthEthResponse::unsetSignedAddr()
{
    m_SignedAddrIsSet = false;
}

utility::string_t BcAuthEthResponse::getComment() const
{
    return m_Comment;
}


void BcAuthEthResponse::setComment(utility::string_t value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}
bool BcAuthEthResponse::commentIsSet() const
{
    return m_CommentIsSet;
}

void BcAuthEthResponse::unsetComment()
{
    m_CommentIsSet = false;
}

utility::string_t BcAuthEthResponse::getOwningAddr() const
{
    return m_OwningAddr;
}


void BcAuthEthResponse::setOwningAddr(utility::string_t value)
{
    m_OwningAddr = value;
    m_OwningAddrIsSet = true;
}
bool BcAuthEthResponse::owningAddrIsSet() const
{
    return m_OwningAddrIsSet;
}

void BcAuthEthResponse::unsetOwningAddr()
{
    m_OwningAddrIsSet = false;
}

}
}
}
}

