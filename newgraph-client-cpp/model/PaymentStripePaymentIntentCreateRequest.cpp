/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentStripePaymentIntentCreateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PaymentStripePaymentIntentCreateRequest::PaymentStripePaymentIntentCreateRequest()
{
    m_ItemsIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

PaymentStripePaymentIntentCreateRequest::~PaymentStripePaymentIntentCreateRequest()
{
}

void PaymentStripePaymentIntentCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value PaymentStripePaymentIntentCreateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("items")] = web::json::value::array(jsonArray);
        }
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void PaymentStripePaymentIntentCreateRequest::fromJson(web::json::value& val)
{
    {
        m_Items.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("items")))
        {
        for( auto& item : val[utility::conversions::to_string_t("items")].as_array() )
        {
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items>(nullptr) );
            }
            else
            {
                std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items> newItem(new PaymentStripePaymentIntentCreateRequest_items());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PaymentStripePaymentIntentCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("items"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
        
    }
}

void PaymentStripePaymentIntentCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Items.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("items")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("items"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items>(nullptr) );
            }
            else
            {
                std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items> newItem(new PaymentStripePaymentIntentCreateRequest_items());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
}

std::vector<std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items>>& PaymentStripePaymentIntentCreateRequest::getItems()
{
    return m_Items;
}

void PaymentStripePaymentIntentCreateRequest::setItems(std::vector<std::shared_ptr<PaymentStripePaymentIntentCreateRequest_items>> value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}
bool PaymentStripePaymentIntentCreateRequest::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void PaymentStripePaymentIntentCreateRequest::unsetItems()
{
    m_ItemsIsSet = false;
}

utility::string_t PaymentStripePaymentIntentCreateRequest::getUsername() const
{
    return m_Username;
}


void PaymentStripePaymentIntentCreateRequest::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool PaymentStripePaymentIntentCreateRequest::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void PaymentStripePaymentIntentCreateRequest::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

