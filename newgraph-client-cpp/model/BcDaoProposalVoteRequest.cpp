/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcDaoProposalVoteRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcDaoProposalVoteRequest::BcDaoProposalVoteRequest()
{
    m_Proposal_type = utility::conversions::to_string_t("");
    m_Proposal_typeIsSet = false;
    m_Quantity = utility::conversions::to_string_t("");
    m_Proposal_id = utility::conversions::to_string_t("");
    m_Dao_id = utility::conversions::to_string_t("");
    m_Dao_idIsSet = false;
    m_Dao_owner = utility::conversions::to_string_t("");
    m_Dao_ownerIsSet = false;
    m_Voter = utility::conversions::to_string_t("");
    m_Option = utility::conversions::to_string_t("");
}

BcDaoProposalVoteRequest::~BcDaoProposalVoteRequest()
{
}

void BcDaoProposalVoteRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcDaoProposalVoteRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Proposal_typeIsSet)
    {
        val[utility::conversions::to_string_t("proposal_type")] = ModelBase::toJson(m_Proposal_type);
    }
    val[utility::conversions::to_string_t("quantity")] = ModelBase::toJson(m_Quantity);
    val[utility::conversions::to_string_t("proposal_id")] = ModelBase::toJson(m_Proposal_id);
    if(m_Dao_idIsSet)
    {
        val[utility::conversions::to_string_t("dao_id")] = ModelBase::toJson(m_Dao_id);
    }
    if(m_Dao_ownerIsSet)
    {
        val[utility::conversions::to_string_t("dao_owner")] = ModelBase::toJson(m_Dao_owner);
    }
    val[utility::conversions::to_string_t("voter")] = ModelBase::toJson(m_Voter);
    val[utility::conversions::to_string_t("option")] = ModelBase::toJson(m_Option);

    return val;
}

void BcDaoProposalVoteRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("proposal_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposal_type")];
        if(!fieldValue.is_null())
        {
            setProposalType(ModelBase::stringFromJson(fieldValue));
        }
    }
    setQuantity(ModelBase::stringFromJson(val[utility::conversions::to_string_t("quantity")]));
    setProposalId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("proposal_id")]));
    if(val.has_field(utility::conversions::to_string_t("dao_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_id")];
        if(!fieldValue.is_null())
        {
            setDaoId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_owner")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_owner")];
        if(!fieldValue.is_null())
        {
            setDaoOwner(ModelBase::stringFromJson(fieldValue));
        }
    }
    setVoter(ModelBase::stringFromJson(val[utility::conversions::to_string_t("voter")]));
    setOption(ModelBase::stringFromJson(val[utility::conversions::to_string_t("option")]));
}

void BcDaoProposalVoteRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Proposal_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposal_type"), m_Proposal_type));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantity"), m_Quantity));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposal_id"), m_Proposal_id));
    if(m_Dao_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_id"), m_Dao_id));
        
    }
    if(m_Dao_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_owner"), m_Dao_owner));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("voter"), m_Voter));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("option"), m_Option));
}

void BcDaoProposalVoteRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("proposal_type")))
    {
        setProposalType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposal_type"))));
    }
    setQuantity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantity"))));
    setProposalId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposal_id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("dao_id")))
    {
        setDaoId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_owner")))
    {
        setDaoOwner(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_owner"))));
    }
    setVoter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("voter"))));
    setOption(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("option"))));
}

utility::string_t BcDaoProposalVoteRequest::getProposalType() const
{
    return m_Proposal_type;
}


void BcDaoProposalVoteRequest::setProposalType(utility::string_t value)
{
    m_Proposal_type = value;
    m_Proposal_typeIsSet = true;
}
bool BcDaoProposalVoteRequest::proposalTypeIsSet() const
{
    return m_Proposal_typeIsSet;
}

void BcDaoProposalVoteRequest::unsetProposal_type()
{
    m_Proposal_typeIsSet = false;
}

utility::string_t BcDaoProposalVoteRequest::getQuantity() const
{
    return m_Quantity;
}


void BcDaoProposalVoteRequest::setQuantity(utility::string_t value)
{
    m_Quantity = value;
    
}
utility::string_t BcDaoProposalVoteRequest::getProposalId() const
{
    return m_Proposal_id;
}


void BcDaoProposalVoteRequest::setProposalId(utility::string_t value)
{
    m_Proposal_id = value;
    
}
utility::string_t BcDaoProposalVoteRequest::getDaoId() const
{
    return m_Dao_id;
}


void BcDaoProposalVoteRequest::setDaoId(utility::string_t value)
{
    m_Dao_id = value;
    m_Dao_idIsSet = true;
}
bool BcDaoProposalVoteRequest::daoIdIsSet() const
{
    return m_Dao_idIsSet;
}

void BcDaoProposalVoteRequest::unsetDao_id()
{
    m_Dao_idIsSet = false;
}

utility::string_t BcDaoProposalVoteRequest::getDaoOwner() const
{
    return m_Dao_owner;
}


void BcDaoProposalVoteRequest::setDaoOwner(utility::string_t value)
{
    m_Dao_owner = value;
    m_Dao_ownerIsSet = true;
}
bool BcDaoProposalVoteRequest::daoOwnerIsSet() const
{
    return m_Dao_ownerIsSet;
}

void BcDaoProposalVoteRequest::unsetDao_owner()
{
    m_Dao_ownerIsSet = false;
}

utility::string_t BcDaoProposalVoteRequest::getVoter() const
{
    return m_Voter;
}


void BcDaoProposalVoteRequest::setVoter(utility::string_t value)
{
    m_Voter = value;
    
}
utility::string_t BcDaoProposalVoteRequest::getOption() const
{
    return m_Option;
}


void BcDaoProposalVoteRequest::setOption(utility::string_t value)
{
    m_Option = value;
    
}
}
}
}
}

