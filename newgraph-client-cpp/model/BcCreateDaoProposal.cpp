/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcCreateDaoProposal.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcCreateDaoProposal::BcCreateDaoProposal()
{
    m_Summary = utility::conversions::to_string_t("");
    m_SummaryIsSet = false;
    m_Vote_start = utility::conversions::to_string_t("");
    m_Vote_startIsSet = false;
    m_Dao_id = utility::conversions::to_string_t("");
    m_Dao_idIsSet = false;
    m_Dao_owner = utility::conversions::to_string_t("");
    m_Dao_ownerIsSet = false;
    m_Vote_end = utility::conversions::to_string_t("");
    m_Vote_endIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
}

BcCreateDaoProposal::~BcCreateDaoProposal()
{
}

void BcCreateDaoProposal::validate()
{
    // TODO: implement validation
}

web::json::value BcCreateDaoProposal::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SummaryIsSet)
    {
        val[utility::conversions::to_string_t("summary")] = ModelBase::toJson(m_Summary);
    }
    if(m_Vote_startIsSet)
    {
        val[utility::conversions::to_string_t("vote_start")] = ModelBase::toJson(m_Vote_start);
    }
    if(m_Dao_idIsSet)
    {
        val[utility::conversions::to_string_t("dao_id")] = ModelBase::toJson(m_Dao_id);
    }
    if(m_Dao_ownerIsSet)
    {
        val[utility::conversions::to_string_t("dao_owner")] = ModelBase::toJson(m_Dao_owner);
    }
    if(m_Vote_endIsSet)
    {
        val[utility::conversions::to_string_t("vote_end")] = ModelBase::toJson(m_Vote_end);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }

    return val;
}

void BcCreateDaoProposal::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("summary")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("summary")];
        if(!fieldValue.is_null())
        {
            setSummary(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_start")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_start")];
        if(!fieldValue.is_null())
        {
            setVoteStart(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_id")];
        if(!fieldValue.is_null())
        {
            setDaoId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_owner")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_owner")];
        if(!fieldValue.is_null())
        {
            setDaoOwner(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_end")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_end")];
        if(!fieldValue.is_null())
        {
            setVoteEnd(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("title")];
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("url")];
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcCreateDaoProposal::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SummaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("summary"), m_Summary));
        
    }
    if(m_Vote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_start"), m_Vote_start));
        
    }
    if(m_Dao_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_id"), m_Dao_id));
        
    }
    if(m_Dao_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_owner"), m_Dao_owner));
        
    }
    if(m_Vote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_end"), m_Vote_end));
        
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
        
    }
}

void BcCreateDaoProposal::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("summary")))
    {
        setSummary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("summary"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_start")))
    {
        setVoteStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_start"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_id")))
    {
        setDaoId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_owner")))
    {
        setDaoOwner(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_owner"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_end")))
    {
        setVoteEnd(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_end"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
}

utility::string_t BcCreateDaoProposal::getSummary() const
{
    return m_Summary;
}


void BcCreateDaoProposal::setSummary(utility::string_t value)
{
    m_Summary = value;
    m_SummaryIsSet = true;
}
bool BcCreateDaoProposal::summaryIsSet() const
{
    return m_SummaryIsSet;
}

void BcCreateDaoProposal::unsetSummary()
{
    m_SummaryIsSet = false;
}

utility::string_t BcCreateDaoProposal::getVoteStart() const
{
    return m_Vote_start;
}


void BcCreateDaoProposal::setVoteStart(utility::string_t value)
{
    m_Vote_start = value;
    m_Vote_startIsSet = true;
}
bool BcCreateDaoProposal::voteStartIsSet() const
{
    return m_Vote_startIsSet;
}

void BcCreateDaoProposal::unsetVote_start()
{
    m_Vote_startIsSet = false;
}

utility::string_t BcCreateDaoProposal::getDaoId() const
{
    return m_Dao_id;
}


void BcCreateDaoProposal::setDaoId(utility::string_t value)
{
    m_Dao_id = value;
    m_Dao_idIsSet = true;
}
bool BcCreateDaoProposal::daoIdIsSet() const
{
    return m_Dao_idIsSet;
}

void BcCreateDaoProposal::unsetDao_id()
{
    m_Dao_idIsSet = false;
}

utility::string_t BcCreateDaoProposal::getDaoOwner() const
{
    return m_Dao_owner;
}


void BcCreateDaoProposal::setDaoOwner(utility::string_t value)
{
    m_Dao_owner = value;
    m_Dao_ownerIsSet = true;
}
bool BcCreateDaoProposal::daoOwnerIsSet() const
{
    return m_Dao_ownerIsSet;
}

void BcCreateDaoProposal::unsetDao_owner()
{
    m_Dao_ownerIsSet = false;
}

utility::string_t BcCreateDaoProposal::getVoteEnd() const
{
    return m_Vote_end;
}


void BcCreateDaoProposal::setVoteEnd(utility::string_t value)
{
    m_Vote_end = value;
    m_Vote_endIsSet = true;
}
bool BcCreateDaoProposal::voteEndIsSet() const
{
    return m_Vote_endIsSet;
}

void BcCreateDaoProposal::unsetVote_end()
{
    m_Vote_endIsSet = false;
}

utility::string_t BcCreateDaoProposal::getTitle() const
{
    return m_Title;
}


void BcCreateDaoProposal::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool BcCreateDaoProposal::titleIsSet() const
{
    return m_TitleIsSet;
}

void BcCreateDaoProposal::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t BcCreateDaoProposal::getUrl() const
{
    return m_Url;
}


void BcCreateDaoProposal::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool BcCreateDaoProposal::urlIsSet() const
{
    return m_UrlIsSet;
}

void BcCreateDaoProposal::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

