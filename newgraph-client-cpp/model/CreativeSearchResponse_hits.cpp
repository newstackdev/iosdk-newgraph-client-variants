/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreativeSearchResponse_hits.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreativeSearchResponse_hits::CreativeSearchResponse_hits()
{
    m__sourceIsSet = false;
    m__id = utility::conversions::to_string_t("");
    m__idIsSet = false;
}

CreativeSearchResponse_hits::~CreativeSearchResponse_hits()
{
}

void CreativeSearchResponse_hits::validate()
{
    // TODO: implement validation
}

web::json::value CreativeSearchResponse_hits::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__sourceIsSet)
    {
        val[utility::conversions::to_string_t("_source")] = ModelBase::toJson(m__source);
    }
    if(m__idIsSet)
    {
        val[utility::conversions::to_string_t("_id")] = ModelBase::toJson(m__id);
    }

    return val;
}

void CreativeSearchResponse_hits::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_source")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("_source")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreativeSearchResponse__source> newItem(new CreativeSearchResponse__source());
            newItem->fromJson(fieldValue);
            setSource( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("_id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void CreativeSearchResponse_hits::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__sourceIsSet)
    {
        if (m__source.get())
        {
            m__source->toMultipart(multipart, utility::conversions::to_string_t("_source."));
        }
        
    }
    if(m__idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_id"), m__id));
        
    }
}

void CreativeSearchResponse_hits::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_source")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_source")))
        {
            std::shared_ptr<CreativeSearchResponse__source> newItem(new CreativeSearchResponse__source());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_source."));
            setSource( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_id"))));
    }
}

std::shared_ptr<CreativeSearchResponse__source> CreativeSearchResponse_hits::getSource() const
{
    return m__source;
}


void CreativeSearchResponse_hits::setSource(std::shared_ptr<CreativeSearchResponse__source> value)
{
    m__source = value;
    m__sourceIsSet = true;
}
bool CreativeSearchResponse_hits::sourceIsSet() const
{
    return m__sourceIsSet;
}

void CreativeSearchResponse_hits::unset_source()
{
    m__sourceIsSet = false;
}

utility::string_t CreativeSearchResponse_hits::getId() const
{
    return m__id;
}


void CreativeSearchResponse_hits::setId(utility::string_t value)
{
    m__id = value;
    m__idIsSet = true;
}
bool CreativeSearchResponse_hits::idIsSet() const
{
    return m__idIsSet;
}

void CreativeSearchResponse_hits::unset_id()
{
    m__idIsSet = false;
}

}
}
}
}

