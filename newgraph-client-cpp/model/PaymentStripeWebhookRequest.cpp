/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentStripeWebhookRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PaymentStripeWebhookRequest::PaymentStripeWebhookRequest()
{
    m_RequestIsSet = false;
    m_Livemode = false;
    m_LivemodeIsSet = false;
    m_DataIsSet = false;
    m_Created = 0;
    m_CreatedIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Api_version = utility::conversions::to_string_t("");
    m_Api_versionIsSet = false;
    m_Pending_webhooks = 0;
    m_Pending_webhooksIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
}

PaymentStripeWebhookRequest::~PaymentStripeWebhookRequest()
{
}

void PaymentStripeWebhookRequest::validate()
{
    // TODO: implement validation
}

web::json::value PaymentStripeWebhookRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_RequestIsSet)
    {
        val[utility::conversions::to_string_t("request")] = ModelBase::toJson(m_Request);
    }
    if(m_LivemodeIsSet)
    {
        val[utility::conversions::to_string_t("livemode")] = ModelBase::toJson(m_Livemode);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_Api_versionIsSet)
    {
        val[utility::conversions::to_string_t("api_version")] = ModelBase::toJson(m_Api_version);
    }
    if(m_Pending_webhooksIsSet)
    {
        val[utility::conversions::to_string_t("pending_webhooks")] = ModelBase::toJson(m_Pending_webhooks);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }

    return val;
}

void PaymentStripeWebhookRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("request")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("request")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setRequest( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("livemode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("livemode")];
        if(!fieldValue.is_null())
        {
            setLivemode(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("data")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PaymentStripeWebhookRequest_data> newItem(new PaymentStripeWebhookRequest_data());
            newItem->fromJson(fieldValue);
            setData( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_version")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("api_version")];
        if(!fieldValue.is_null())
        {
            setApiVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pending_webhooks")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pending_webhooks")];
        if(!fieldValue.is_null())
        {
            setPendingWebhooks(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("object")];
        if(!fieldValue.is_null())
        {
            setObject(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PaymentStripeWebhookRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_RequestIsSet)
    {
        if (m_Request.get())
        {
            m_Request->toMultipart(multipart, utility::conversions::to_string_t("request."));
        }
        
    }
    if(m_LivemodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("livemode"), m_Livemode));
    }
    if(m_DataIsSet)
    {
        if (m_Data.get())
        {
            m_Data->toMultipart(multipart, utility::conversions::to_string_t("data."));
        }
        
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_Api_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_version"), m_Api_version));
        
    }
    if(m_Pending_webhooksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pending_webhooks"), m_Pending_webhooks));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
        
    }
}

void PaymentStripeWebhookRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("request")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("request")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("request."));
            setRequest( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("livemode")))
    {
        setLivemode(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("livemode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("data")))
        {
            std::shared_ptr<PaymentStripeWebhookRequest_data> newItem(new PaymentStripeWebhookRequest_data());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("data."));
            setData( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_version")))
    {
        setApiVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_version"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pending_webhooks")))
    {
        setPendingWebhooks(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pending_webhooks"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        setObject(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("object"))));
    }
}

std::shared_ptr<Object> PaymentStripeWebhookRequest::getRequest() const
{
    return m_Request;
}


void PaymentStripeWebhookRequest::setRequest(std::shared_ptr<Object> value)
{
    m_Request = value;
    m_RequestIsSet = true;
}
bool PaymentStripeWebhookRequest::requestIsSet() const
{
    return m_RequestIsSet;
}

void PaymentStripeWebhookRequest::unsetRequest()
{
    m_RequestIsSet = false;
}

bool PaymentStripeWebhookRequest::isLivemode() const
{
    return m_Livemode;
}


void PaymentStripeWebhookRequest::setLivemode(bool value)
{
    m_Livemode = value;
    m_LivemodeIsSet = true;
}
bool PaymentStripeWebhookRequest::livemodeIsSet() const
{
    return m_LivemodeIsSet;
}

void PaymentStripeWebhookRequest::unsetLivemode()
{
    m_LivemodeIsSet = false;
}

std::shared_ptr<PaymentStripeWebhookRequest_data> PaymentStripeWebhookRequest::getData() const
{
    return m_Data;
}


void PaymentStripeWebhookRequest::setData(std::shared_ptr<PaymentStripeWebhookRequest_data> value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool PaymentStripeWebhookRequest::dataIsSet() const
{
    return m_DataIsSet;
}

void PaymentStripeWebhookRequest::unsetData()
{
    m_DataIsSet = false;
}

int32_t PaymentStripeWebhookRequest::getCreated() const
{
    return m_Created;
}


void PaymentStripeWebhookRequest::setCreated(int32_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool PaymentStripeWebhookRequest::createdIsSet() const
{
    return m_CreatedIsSet;
}

void PaymentStripeWebhookRequest::unsetCreated()
{
    m_CreatedIsSet = false;
}

utility::string_t PaymentStripeWebhookRequest::getId() const
{
    return m_Id;
}


void PaymentStripeWebhookRequest::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PaymentStripeWebhookRequest::idIsSet() const
{
    return m_IdIsSet;
}

void PaymentStripeWebhookRequest::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t PaymentStripeWebhookRequest::getType() const
{
    return m_Type;
}


void PaymentStripeWebhookRequest::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool PaymentStripeWebhookRequest::typeIsSet() const
{
    return m_TypeIsSet;
}

void PaymentStripeWebhookRequest::unsetType()
{
    m_TypeIsSet = false;
}

utility::string_t PaymentStripeWebhookRequest::getApiVersion() const
{
    return m_Api_version;
}


void PaymentStripeWebhookRequest::setApiVersion(utility::string_t value)
{
    m_Api_version = value;
    m_Api_versionIsSet = true;
}
bool PaymentStripeWebhookRequest::apiVersionIsSet() const
{
    return m_Api_versionIsSet;
}

void PaymentStripeWebhookRequest::unsetApi_version()
{
    m_Api_versionIsSet = false;
}

int32_t PaymentStripeWebhookRequest::getPendingWebhooks() const
{
    return m_Pending_webhooks;
}


void PaymentStripeWebhookRequest::setPendingWebhooks(int32_t value)
{
    m_Pending_webhooks = value;
    m_Pending_webhooksIsSet = true;
}
bool PaymentStripeWebhookRequest::pendingWebhooksIsSet() const
{
    return m_Pending_webhooksIsSet;
}

void PaymentStripeWebhookRequest::unsetPending_webhooks()
{
    m_Pending_webhooksIsSet = false;
}

utility::string_t PaymentStripeWebhookRequest::getObject() const
{
    return m_object;
}


void PaymentStripeWebhookRequest::setObject(utility::string_t value)
{
    m_object = value;
    m_objectIsSet = true;
}
bool PaymentStripeWebhookRequest::objectIsSet() const
{
    return m_objectIsSet;
}

void PaymentStripeWebhookRequest::unsetobject()
{
    m_objectIsSet = false;
}

}
}
}
}

