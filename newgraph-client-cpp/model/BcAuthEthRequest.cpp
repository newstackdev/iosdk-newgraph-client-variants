/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcAuthEthRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcAuthEthRequest::BcAuthEthRequest()
{
    m_EncryptedPayload = utility::conversions::to_string_t("");
    m_EncryptedPayloadIsSet = false;
    m_Payload = utility::conversions::to_string_t("");
    m_PayloadIsSet = false;
}

BcAuthEthRequest::~BcAuthEthRequest()
{
}

void BcAuthEthRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcAuthEthRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EncryptedPayloadIsSet)
    {
        val[utility::conversions::to_string_t("encryptedPayload")] = ModelBase::toJson(m_EncryptedPayload);
    }
    if(m_PayloadIsSet)
    {
        val[utility::conversions::to_string_t("payload")] = ModelBase::toJson(m_Payload);
    }

    return val;
}

void BcAuthEthRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("encryptedPayload")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("encryptedPayload")];
        if(!fieldValue.is_null())
        {
            setEncryptedPayload(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("payload")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("payload")];
        if(!fieldValue.is_null())
        {
            setPayload(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcAuthEthRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EncryptedPayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("encryptedPayload"), m_EncryptedPayload));
        
    }
    if(m_PayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payload"), m_Payload));
        
    }
}

void BcAuthEthRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("encryptedPayload")))
    {
        setEncryptedPayload(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("encryptedPayload"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("payload")))
    {
        setPayload(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payload"))));
    }
}

utility::string_t BcAuthEthRequest::getEncryptedPayload() const
{
    return m_EncryptedPayload;
}


void BcAuthEthRequest::setEncryptedPayload(utility::string_t value)
{
    m_EncryptedPayload = value;
    m_EncryptedPayloadIsSet = true;
}
bool BcAuthEthRequest::encryptedPayloadIsSet() const
{
    return m_EncryptedPayloadIsSet;
}

void BcAuthEthRequest::unsetEncryptedPayload()
{
    m_EncryptedPayloadIsSet = false;
}

utility::string_t BcAuthEthRequest::getPayload() const
{
    return m_Payload;
}


void BcAuthEthRequest::setPayload(utility::string_t value)
{
    m_Payload = value;
    m_PayloadIsSet = true;
}
bool BcAuthEthRequest::payloadIsSet() const
{
    return m_PayloadIsSet;
}

void BcAuthEthRequest::unsetPayload()
{
    m_PayloadIsSet = false;
}

}
}
}
}

