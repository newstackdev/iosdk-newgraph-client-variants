/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PostRemoteMetaProxyResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PostRemoteMetaProxyResponse::PostRemoteMetaProxyResponse()
{
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Status = 0.0;
    m_StatusIsSet = false;
}

PostRemoteMetaProxyResponse::~PostRemoteMetaProxyResponse()
{
}

void PostRemoteMetaProxyResponse::validate()
{
    // TODO: implement validation
}

web::json::value PostRemoteMetaProxyResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }

    return val;
}

void PostRemoteMetaProxyResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void PostRemoteMetaProxyResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
}

void PostRemoteMetaProxyResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
}

utility::string_t PostRemoteMetaProxyResponse::getText() const
{
    return m_Text;
}


void PostRemoteMetaProxyResponse::setText(utility::string_t value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool PostRemoteMetaProxyResponse::textIsSet() const
{
    return m_TextIsSet;
}

void PostRemoteMetaProxyResponse::unsetText()
{
    m_TextIsSet = false;
}

double PostRemoteMetaProxyResponse::getStatus() const
{
    return m_Status;
}


void PostRemoteMetaProxyResponse::setStatus(double value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool PostRemoteMetaProxyResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void PostRemoteMetaProxyResponse::unsetStatus()
{
    m_StatusIsSet = false;
}

}
}
}
}

