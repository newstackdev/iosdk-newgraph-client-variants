/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcCollectionCreateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcCollectionCreateRequest::BcCollectionCreateRequest()
{
    m_Mkt_fee = 0.0;
    m_Mkt_feeIsSet = false;
    m_Template_name = utility::conversions::to_string_t("");
    m_Xferable = false;
    m_XferableIsSet = false;
    m_Max_supply = 0.0;
    m_Max_supplyIsSet = false;
    m_Allow_notify = false;
    m_Allow_notifyIsSet = false;
    m_Burnable = false;
    m_BurnableIsSet = false;
    m_Schema_name = utility::conversions::to_string_t("");
    m_User = utility::conversions::to_string_t("");
    m_User_prv_active_key = utility::conversions::to_string_t("");
    m_Collection_name = utility::conversions::to_string_t("");
}

BcCollectionCreateRequest::~BcCollectionCreateRequest()
{
}

void BcCollectionCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcCollectionCreateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Mkt_feeIsSet)
    {
        val[utility::conversions::to_string_t("mkt_fee")] = ModelBase::toJson(m_Mkt_fee);
    }
    val[utility::conversions::to_string_t("template_name")] = ModelBase::toJson(m_Template_name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Template_fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("template_fields")] = web::json::value::array(jsonArray);
    }
    if(m_XferableIsSet)
    {
        val[utility::conversions::to_string_t("xferable")] = ModelBase::toJson(m_Xferable);
    }
    if(m_Max_supplyIsSet)
    {
        val[utility::conversions::to_string_t("max_supply")] = ModelBase::toJson(m_Max_supply);
    }
    if(m_Allow_notifyIsSet)
    {
        val[utility::conversions::to_string_t("allow_notify")] = ModelBase::toJson(m_Allow_notify);
    }
    if(m_BurnableIsSet)
    {
        val[utility::conversions::to_string_t("burnable")] = ModelBase::toJson(m_Burnable);
    }
    val[utility::conversions::to_string_t("schema_name")] = ModelBase::toJson(m_Schema_name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Schema_fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("schema_fields")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    val[utility::conversions::to_string_t("user_prv_active_key")] = ModelBase::toJson(m_User_prv_active_key);
    val[utility::conversions::to_string_t("collection_name")] = ModelBase::toJson(m_Collection_name);

    return val;
}

void BcCollectionCreateRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("mkt_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mkt_fee")];
        if(!fieldValue.is_null())
        {
            setMktFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setTemplateName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("template_name")]));
    {
        m_Template_fields.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("template_fields")].as_array() )
        {
            if(item.is_null())
            {
                m_Template_fields.push_back( std::shared_ptr<BcCollectionCreateRequest_template_fields>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcCollectionCreateRequest_template_fields> newItem(new BcCollectionCreateRequest_template_fields());
                newItem->fromJson(item);
                m_Template_fields.push_back( newItem );
            }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xferable")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("xferable")];
        if(!fieldValue.is_null())
        {
            setXferable(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_supply")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("max_supply")];
        if(!fieldValue.is_null())
        {
            setMaxSupply(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow_notify")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("allow_notify")];
        if(!fieldValue.is_null())
        {
            setAllowNotify(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("burnable")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("burnable")];
        if(!fieldValue.is_null())
        {
            setBurnable(ModelBase::boolFromJson(fieldValue));
        }
    }
    setSchemaName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("schema_name")]));
    {
        m_Schema_fields.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("schema_fields")].as_array() )
        {
            if(item.is_null())
            {
                m_Schema_fields.push_back( std::shared_ptr<BcCollectionCreateRequest_template_fields>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcCollectionCreateRequest_template_fields> newItem(new BcCollectionCreateRequest_template_fields());
                newItem->fromJson(item);
                m_Schema_fields.push_back( newItem );
            }
        }
    }
    setUser(ModelBase::stringFromJson(val[utility::conversions::to_string_t("user")]));
    setUserPrvActiveKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("user_prv_active_key")]));
    setCollectionName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("collection_name")]));
}

void BcCollectionCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Mkt_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mkt_fee"), m_Mkt_fee));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("template_name"), m_Template_name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Template_fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("template_fields"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    if(m_XferableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xferable"), m_Xferable));
    }
    if(m_Max_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_supply"), m_Max_supply));
    }
    if(m_Allow_notifyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allow_notify"), m_Allow_notify));
    }
    if(m_BurnableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("burnable"), m_Burnable));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("schema_name"), m_Schema_name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Schema_fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("schema_fields"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_prv_active_key"), m_User_prv_active_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collection_name"), m_Collection_name));
}

void BcCollectionCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mkt_fee")))
    {
        setMktFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mkt_fee"))));
    }
    setTemplateName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("template_name"))));
    {
        m_Template_fields.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("template_fields"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Template_fields.push_back( std::shared_ptr<BcCollectionCreateRequest_template_fields>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcCollectionCreateRequest_template_fields> newItem(new BcCollectionCreateRequest_template_fields());
                newItem->fromJson(item);
                m_Template_fields.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xferable")))
    {
        setXferable(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("xferable"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_supply")))
    {
        setMaxSupply(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_supply"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allow_notify")))
    {
        setAllowNotify(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("allow_notify"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("burnable")))
    {
        setBurnable(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("burnable"))));
    }
    setSchemaName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("schema_name"))));
    {
        m_Schema_fields.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("schema_fields"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Schema_fields.push_back( std::shared_ptr<BcCollectionCreateRequest_template_fields>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcCollectionCreateRequest_template_fields> newItem(new BcCollectionCreateRequest_template_fields());
                newItem->fromJson(item);
                m_Schema_fields.push_back( newItem );
            }
        }
    }
    setUser(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user"))));
    setUserPrvActiveKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_prv_active_key"))));
    setCollectionName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("collection_name"))));
}

double BcCollectionCreateRequest::getMktFee() const
{
    return m_Mkt_fee;
}


void BcCollectionCreateRequest::setMktFee(double value)
{
    m_Mkt_fee = value;
    m_Mkt_feeIsSet = true;
}
bool BcCollectionCreateRequest::mktFeeIsSet() const
{
    return m_Mkt_feeIsSet;
}

void BcCollectionCreateRequest::unsetMkt_fee()
{
    m_Mkt_feeIsSet = false;
}

utility::string_t BcCollectionCreateRequest::getTemplateName() const
{
    return m_Template_name;
}


void BcCollectionCreateRequest::setTemplateName(utility::string_t value)
{
    m_Template_name = value;
    
}
std::vector<std::shared_ptr<BcCollectionCreateRequest_template_fields>>& BcCollectionCreateRequest::getTemplateFields()
{
    return m_Template_fields;
}

void BcCollectionCreateRequest::setTemplateFields(std::vector<std::shared_ptr<BcCollectionCreateRequest_template_fields>> value)
{
    m_Template_fields = value;
    
}
bool BcCollectionCreateRequest::isXferable() const
{
    return m_Xferable;
}


void BcCollectionCreateRequest::setXferable(bool value)
{
    m_Xferable = value;
    m_XferableIsSet = true;
}
bool BcCollectionCreateRequest::xferableIsSet() const
{
    return m_XferableIsSet;
}

void BcCollectionCreateRequest::unsetXferable()
{
    m_XferableIsSet = false;
}

double BcCollectionCreateRequest::getMaxSupply() const
{
    return m_Max_supply;
}


void BcCollectionCreateRequest::setMaxSupply(double value)
{
    m_Max_supply = value;
    m_Max_supplyIsSet = true;
}
bool BcCollectionCreateRequest::maxSupplyIsSet() const
{
    return m_Max_supplyIsSet;
}

void BcCollectionCreateRequest::unsetMax_supply()
{
    m_Max_supplyIsSet = false;
}

bool BcCollectionCreateRequest::isAllowNotify() const
{
    return m_Allow_notify;
}


void BcCollectionCreateRequest::setAllowNotify(bool value)
{
    m_Allow_notify = value;
    m_Allow_notifyIsSet = true;
}
bool BcCollectionCreateRequest::allowNotifyIsSet() const
{
    return m_Allow_notifyIsSet;
}

void BcCollectionCreateRequest::unsetAllow_notify()
{
    m_Allow_notifyIsSet = false;
}

bool BcCollectionCreateRequest::isBurnable() const
{
    return m_Burnable;
}


void BcCollectionCreateRequest::setBurnable(bool value)
{
    m_Burnable = value;
    m_BurnableIsSet = true;
}
bool BcCollectionCreateRequest::burnableIsSet() const
{
    return m_BurnableIsSet;
}

void BcCollectionCreateRequest::unsetBurnable()
{
    m_BurnableIsSet = false;
}

utility::string_t BcCollectionCreateRequest::getSchemaName() const
{
    return m_Schema_name;
}


void BcCollectionCreateRequest::setSchemaName(utility::string_t value)
{
    m_Schema_name = value;
    
}
std::vector<std::shared_ptr<BcCollectionCreateRequest_template_fields>>& BcCollectionCreateRequest::getSchemaFields()
{
    return m_Schema_fields;
}

void BcCollectionCreateRequest::setSchemaFields(std::vector<std::shared_ptr<BcCollectionCreateRequest_template_fields>> value)
{
    m_Schema_fields = value;
    
}
utility::string_t BcCollectionCreateRequest::getUser() const
{
    return m_User;
}


void BcCollectionCreateRequest::setUser(utility::string_t value)
{
    m_User = value;
    
}
utility::string_t BcCollectionCreateRequest::getUserPrvActiveKey() const
{
    return m_User_prv_active_key;
}


void BcCollectionCreateRequest::setUserPrvActiveKey(utility::string_t value)
{
    m_User_prv_active_key = value;
    
}
utility::string_t BcCollectionCreateRequest::getCollectionName() const
{
    return m_Collection_name;
}


void BcCollectionCreateRequest::setCollectionName(utility::string_t value)
{
    m_Collection_name = value;
    
}
}
}
}
}

