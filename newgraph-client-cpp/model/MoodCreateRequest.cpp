/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MoodCreateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MoodCreateRequest::MoodCreateRequest()
{
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_Title = utility::conversions::to_string_t("");
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

MoodCreateRequest::~MoodCreateRequest()
{
}

void MoodCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value MoodCreateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void MoodCreateRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    setTitle(ModelBase::stringFromJson(val[utility::conversions::to_string_t("title")]));
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void MoodCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
}

void MoodCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
}

double MoodCreateRequest::getLatitude() const
{
    return m_Latitude;
}


void MoodCreateRequest::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool MoodCreateRequest::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void MoodCreateRequest::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

utility::string_t MoodCreateRequest::getDescription() const
{
    return m_Description;
}


void MoodCreateRequest::setDescription(utility::string_t value)
{
    m_Description = value;
    
}
utility::string_t MoodCreateRequest::getTitle() const
{
    return m_Title;
}


void MoodCreateRequest::setTitle(utility::string_t value)
{
    m_Title = value;
    
}
double MoodCreateRequest::getLongitude() const
{
    return m_Longitude;
}


void MoodCreateRequest::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool MoodCreateRequest::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void MoodCreateRequest::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

