/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcAccCreateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcAccCreateRequest::BcAccCreateRequest()
{
    m_Newacc_pub_active_key = utility::conversions::to_string_t("");
    m_Newacc_pub_owner_key = utility::conversions::to_string_t("");
    m_Payer_prv_key = utility::conversions::to_string_t("");
    m_Xfer = false;
    m_XferIsSet = false;
    m_Stake_cpu = utility::conversions::to_string_t("");
    m_Stake_cpuIsSet = false;
    m_NewUser = utility::conversions::to_string_t("");
    m_Stake_ram = 0.0;
    m_Stake_ramIsSet = false;
    m_Payer = utility::conversions::to_string_t("");
    m_Stake_net = utility::conversions::to_string_t("");
    m_Stake_netIsSet = false;
}

BcAccCreateRequest::~BcAccCreateRequest()
{
}

void BcAccCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcAccCreateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("newacc_pub_active_key")] = ModelBase::toJson(m_Newacc_pub_active_key);
    val[utility::conversions::to_string_t("newacc_pub_owner_key")] = ModelBase::toJson(m_Newacc_pub_owner_key);
    val[utility::conversions::to_string_t("payer_prv_key")] = ModelBase::toJson(m_Payer_prv_key);
    if(m_XferIsSet)
    {
        val[utility::conversions::to_string_t("xfer")] = ModelBase::toJson(m_Xfer);
    }
    if(m_Stake_cpuIsSet)
    {
        val[utility::conversions::to_string_t("stake_cpu")] = ModelBase::toJson(m_Stake_cpu);
    }
    val[utility::conversions::to_string_t("newUser")] = ModelBase::toJson(m_NewUser);
    if(m_Stake_ramIsSet)
    {
        val[utility::conversions::to_string_t("stake_ram")] = ModelBase::toJson(m_Stake_ram);
    }
    val[utility::conversions::to_string_t("payer")] = ModelBase::toJson(m_Payer);
    if(m_Stake_netIsSet)
    {
        val[utility::conversions::to_string_t("stake_net")] = ModelBase::toJson(m_Stake_net);
    }

    return val;
}

void BcAccCreateRequest::fromJson(web::json::value& val)
{
    setNewaccPubActiveKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("newacc_pub_active_key")]));
    setNewaccPubOwnerKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("newacc_pub_owner_key")]));
    setPayerPrvKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer_prv_key")]));
    if(val.has_field(utility::conversions::to_string_t("xfer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("xfer")];
        if(!fieldValue.is_null())
        {
            setXfer(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stake_cpu")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("stake_cpu")];
        if(!fieldValue.is_null())
        {
            setStakeCpu(ModelBase::stringFromJson(fieldValue));
        }
    }
    setNewUser(ModelBase::stringFromJson(val[utility::conversions::to_string_t("newUser")]));
    if(val.has_field(utility::conversions::to_string_t("stake_ram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("stake_ram")];
        if(!fieldValue.is_null())
        {
            setStakeRam(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setPayer(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer")]));
    if(val.has_field(utility::conversions::to_string_t("stake_net")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("stake_net")];
        if(!fieldValue.is_null())
        {
            setStakeNet(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcAccCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newacc_pub_active_key"), m_Newacc_pub_active_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newacc_pub_owner_key"), m_Newacc_pub_owner_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer_prv_key"), m_Payer_prv_key));
    if(m_XferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xfer"), m_Xfer));
    }
    if(m_Stake_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stake_cpu"), m_Stake_cpu));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newUser"), m_NewUser));
    if(m_Stake_ramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stake_ram"), m_Stake_ram));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer"), m_Payer));
    if(m_Stake_netIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stake_net"), m_Stake_net));
        
    }
}

void BcAccCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setNewaccPubActiveKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newacc_pub_active_key"))));
    setNewaccPubOwnerKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newacc_pub_owner_key"))));
    setPayerPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer_prv_key"))));
    if(multipart->hasContent(utility::conversions::to_string_t("xfer")))
    {
        setXfer(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("xfer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stake_cpu")))
    {
        setStakeCpu(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stake_cpu"))));
    }
    setNewUser(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newUser"))));
    if(multipart->hasContent(utility::conversions::to_string_t("stake_ram")))
    {
        setStakeRam(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stake_ram"))));
    }
    setPayer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer"))));
    if(multipart->hasContent(utility::conversions::to_string_t("stake_net")))
    {
        setStakeNet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stake_net"))));
    }
}

utility::string_t BcAccCreateRequest::getNewaccPubActiveKey() const
{
    return m_Newacc_pub_active_key;
}


void BcAccCreateRequest::setNewaccPubActiveKey(utility::string_t value)
{
    m_Newacc_pub_active_key = value;
    
}
utility::string_t BcAccCreateRequest::getNewaccPubOwnerKey() const
{
    return m_Newacc_pub_owner_key;
}


void BcAccCreateRequest::setNewaccPubOwnerKey(utility::string_t value)
{
    m_Newacc_pub_owner_key = value;
    
}
utility::string_t BcAccCreateRequest::getPayerPrvKey() const
{
    return m_Payer_prv_key;
}


void BcAccCreateRequest::setPayerPrvKey(utility::string_t value)
{
    m_Payer_prv_key = value;
    
}
bool BcAccCreateRequest::isXfer() const
{
    return m_Xfer;
}


void BcAccCreateRequest::setXfer(bool value)
{
    m_Xfer = value;
    m_XferIsSet = true;
}
bool BcAccCreateRequest::xferIsSet() const
{
    return m_XferIsSet;
}

void BcAccCreateRequest::unsetXfer()
{
    m_XferIsSet = false;
}

utility::string_t BcAccCreateRequest::getStakeCpu() const
{
    return m_Stake_cpu;
}


void BcAccCreateRequest::setStakeCpu(utility::string_t value)
{
    m_Stake_cpu = value;
    m_Stake_cpuIsSet = true;
}
bool BcAccCreateRequest::stakeCpuIsSet() const
{
    return m_Stake_cpuIsSet;
}

void BcAccCreateRequest::unsetStake_cpu()
{
    m_Stake_cpuIsSet = false;
}

utility::string_t BcAccCreateRequest::getNewUser() const
{
    return m_NewUser;
}


void BcAccCreateRequest::setNewUser(utility::string_t value)
{
    m_NewUser = value;
    
}
double BcAccCreateRequest::getStakeRam() const
{
    return m_Stake_ram;
}


void BcAccCreateRequest::setStakeRam(double value)
{
    m_Stake_ram = value;
    m_Stake_ramIsSet = true;
}
bool BcAccCreateRequest::stakeRamIsSet() const
{
    return m_Stake_ramIsSet;
}

void BcAccCreateRequest::unsetStake_ram()
{
    m_Stake_ramIsSet = false;
}

utility::string_t BcAccCreateRequest::getPayer() const
{
    return m_Payer;
}


void BcAccCreateRequest::setPayer(utility::string_t value)
{
    m_Payer = value;
    
}
utility::string_t BcAccCreateRequest::getStakeNet() const
{
    return m_Stake_net;
}


void BcAccCreateRequest::setStakeNet(utility::string_t value)
{
    m_Stake_net = value;
    m_Stake_netIsSet = true;
}
bool BcAccCreateRequest::stakeNetIsSet() const
{
    return m_Stake_netIsSet;
}

void BcAccCreateRequest::unsetStake_net()
{
    m_Stake_netIsSet = false;
}

}
}
}
}

