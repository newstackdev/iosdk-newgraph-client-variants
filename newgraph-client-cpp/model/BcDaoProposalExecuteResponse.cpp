/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcDaoProposalExecuteResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcDaoProposalExecuteResponse::BcDaoProposalExecuteResponse()
{
    m_TxID_executeDaoProposal = utility::conversions::to_string_t("");
    m_TxID_executeDaoProposalIsSet = false;
}

BcDaoProposalExecuteResponse::~BcDaoProposalExecuteResponse()
{
}

void BcDaoProposalExecuteResponse::validate()
{
    // TODO: implement validation
}

web::json::value BcDaoProposalExecuteResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TxID_executeDaoProposalIsSet)
    {
        val[utility::conversions::to_string_t("TxID_executeDaoProposal")] = ModelBase::toJson(m_TxID_executeDaoProposal);
    }

    return val;
}

void BcDaoProposalExecuteResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("TxID_executeDaoProposal")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("TxID_executeDaoProposal")];
        if(!fieldValue.is_null())
        {
            setTxIDExecuteDaoProposal(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcDaoProposalExecuteResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TxID_executeDaoProposalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TxID_executeDaoProposal"), m_TxID_executeDaoProposal));
        
    }
}

void BcDaoProposalExecuteResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("TxID_executeDaoProposal")))
    {
        setTxIDExecuteDaoProposal(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TxID_executeDaoProposal"))));
    }
}

utility::string_t BcDaoProposalExecuteResponse::getTxIDExecuteDaoProposal() const
{
    return m_TxID_executeDaoProposal;
}


void BcDaoProposalExecuteResponse::setTxIDExecuteDaoProposal(utility::string_t value)
{
    m_TxID_executeDaoProposal = value;
    m_TxID_executeDaoProposalIsSet = true;
}
bool BcDaoProposalExecuteResponse::txIDExecuteDaoProposalIsSet() const
{
    return m_TxID_executeDaoProposalIsSet;
}

void BcDaoProposalExecuteResponse::unsetTxID_executeDaoProposal()
{
    m_TxID_executeDaoProposalIsSet = false;
}

}
}
}
}

