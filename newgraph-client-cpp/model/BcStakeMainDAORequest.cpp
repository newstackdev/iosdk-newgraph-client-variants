/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcStakeMainDAORequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcStakeMainDAORequest::BcStakeMainDAORequest()
{
    m_Payer_prv_key = utility::conversions::to_string_t("");
    m_Amt = utility::conversions::to_string_t("");
    m_Payer = utility::conversions::to_string_t("");
}

BcStakeMainDAORequest::~BcStakeMainDAORequest()
{
}

void BcStakeMainDAORequest::validate()
{
    // TODO: implement validation
}

web::json::value BcStakeMainDAORequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("payer_prv_key")] = ModelBase::toJson(m_Payer_prv_key);
    val[utility::conversions::to_string_t("amt")] = ModelBase::toJson(m_Amt);
    val[utility::conversions::to_string_t("payer")] = ModelBase::toJson(m_Payer);

    return val;
}

void BcStakeMainDAORequest::fromJson(web::json::value& val)
{
    setPayerPrvKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer_prv_key")]));
    setAmt(ModelBase::stringFromJson(val[utility::conversions::to_string_t("amt")]));
    setPayer(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer")]));
}

void BcStakeMainDAORequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer_prv_key"), m_Payer_prv_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amt"), m_Amt));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer"), m_Payer));
}

void BcStakeMainDAORequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setPayerPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer_prv_key"))));
    setAmt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amt"))));
    setPayer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer"))));
}

utility::string_t BcStakeMainDAORequest::getPayerPrvKey() const
{
    return m_Payer_prv_key;
}


void BcStakeMainDAORequest::setPayerPrvKey(utility::string_t value)
{
    m_Payer_prv_key = value;
    
}
utility::string_t BcStakeMainDAORequest::getAmt() const
{
    return m_Amt;
}


void BcStakeMainDAORequest::setAmt(utility::string_t value)
{
    m_Amt = value;
    
}
utility::string_t BcStakeMainDAORequest::getPayer() const
{
    return m_Payer;
}


void BcStakeMainDAORequest::setPayer(utility::string_t value)
{
    m_Payer = value;
    
}
}
}
}
}

