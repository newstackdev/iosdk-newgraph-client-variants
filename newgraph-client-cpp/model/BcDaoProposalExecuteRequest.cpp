/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcDaoProposalExecuteRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcDaoProposalExecuteRequest::BcDaoProposalExecuteRequest()
{
    m_Proposal_author = utility::conversions::to_string_t("");
    m_Proposal_authorIsSet = false;
    m_Proposal_id = 0.0;
    m_Proposal_idIsSet = false;
    m_Dao_id = utility::conversions::to_string_t("");
    m_Dao_idIsSet = false;
    m_Dao_owner = utility::conversions::to_string_t("");
    m_Dao_ownerIsSet = false;
    m_Exec = utility::conversions::to_string_t("");
    m_ExecIsSet = false;
    m_Exec_prv_key = utility::conversions::to_string_t("");
    m_Exec_prv_keyIsSet = false;
}

BcDaoProposalExecuteRequest::~BcDaoProposalExecuteRequest()
{
}

void BcDaoProposalExecuteRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcDaoProposalExecuteRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Proposal_authorIsSet)
    {
        val[utility::conversions::to_string_t("proposal_author")] = ModelBase::toJson(m_Proposal_author);
    }
    if(m_Proposal_idIsSet)
    {
        val[utility::conversions::to_string_t("proposal_id")] = ModelBase::toJson(m_Proposal_id);
    }
    if(m_Dao_idIsSet)
    {
        val[utility::conversions::to_string_t("dao_id")] = ModelBase::toJson(m_Dao_id);
    }
    if(m_Dao_ownerIsSet)
    {
        val[utility::conversions::to_string_t("dao_owner")] = ModelBase::toJson(m_Dao_owner);
    }
    if(m_ExecIsSet)
    {
        val[utility::conversions::to_string_t("exec")] = ModelBase::toJson(m_Exec);
    }
    if(m_Exec_prv_keyIsSet)
    {
        val[utility::conversions::to_string_t("exec_prv_key")] = ModelBase::toJson(m_Exec_prv_key);
    }

    return val;
}

void BcDaoProposalExecuteRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("proposal_author")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposal_author")];
        if(!fieldValue.is_null())
        {
            setProposalAuthor(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proposal_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposal_id")];
        if(!fieldValue.is_null())
        {
            setProposalId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_id")];
        if(!fieldValue.is_null())
        {
            setDaoId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_owner")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_owner")];
        if(!fieldValue.is_null())
        {
            setDaoOwner(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec")];
        if(!fieldValue.is_null())
        {
            setExec(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_prv_key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_prv_key")];
        if(!fieldValue.is_null())
        {
            setExecPrvKey(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcDaoProposalExecuteRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Proposal_authorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposal_author"), m_Proposal_author));
        
    }
    if(m_Proposal_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposal_id"), m_Proposal_id));
    }
    if(m_Dao_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_id"), m_Dao_id));
        
    }
    if(m_Dao_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_owner"), m_Dao_owner));
        
    }
    if(m_ExecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec"), m_Exec));
        
    }
    if(m_Exec_prv_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_prv_key"), m_Exec_prv_key));
        
    }
}

void BcDaoProposalExecuteRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("proposal_author")))
    {
        setProposalAuthor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposal_author"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proposal_id")))
    {
        setProposalId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposal_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_id")))
    {
        setDaoId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_owner")))
    {
        setDaoOwner(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_owner"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec")))
    {
        setExec(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_prv_key")))
    {
        setExecPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_prv_key"))));
    }
}

utility::string_t BcDaoProposalExecuteRequest::getProposalAuthor() const
{
    return m_Proposal_author;
}


void BcDaoProposalExecuteRequest::setProposalAuthor(utility::string_t value)
{
    m_Proposal_author = value;
    m_Proposal_authorIsSet = true;
}
bool BcDaoProposalExecuteRequest::proposalAuthorIsSet() const
{
    return m_Proposal_authorIsSet;
}

void BcDaoProposalExecuteRequest::unsetProposal_author()
{
    m_Proposal_authorIsSet = false;
}

double BcDaoProposalExecuteRequest::getProposalId() const
{
    return m_Proposal_id;
}


void BcDaoProposalExecuteRequest::setProposalId(double value)
{
    m_Proposal_id = value;
    m_Proposal_idIsSet = true;
}
bool BcDaoProposalExecuteRequest::proposalIdIsSet() const
{
    return m_Proposal_idIsSet;
}

void BcDaoProposalExecuteRequest::unsetProposal_id()
{
    m_Proposal_idIsSet = false;
}

utility::string_t BcDaoProposalExecuteRequest::getDaoId() const
{
    return m_Dao_id;
}


void BcDaoProposalExecuteRequest::setDaoId(utility::string_t value)
{
    m_Dao_id = value;
    m_Dao_idIsSet = true;
}
bool BcDaoProposalExecuteRequest::daoIdIsSet() const
{
    return m_Dao_idIsSet;
}

void BcDaoProposalExecuteRequest::unsetDao_id()
{
    m_Dao_idIsSet = false;
}

utility::string_t BcDaoProposalExecuteRequest::getDaoOwner() const
{
    return m_Dao_owner;
}


void BcDaoProposalExecuteRequest::setDaoOwner(utility::string_t value)
{
    m_Dao_owner = value;
    m_Dao_ownerIsSet = true;
}
bool BcDaoProposalExecuteRequest::daoOwnerIsSet() const
{
    return m_Dao_ownerIsSet;
}

void BcDaoProposalExecuteRequest::unsetDao_owner()
{
    m_Dao_ownerIsSet = false;
}

utility::string_t BcDaoProposalExecuteRequest::getExec() const
{
    return m_Exec;
}


void BcDaoProposalExecuteRequest::setExec(utility::string_t value)
{
    m_Exec = value;
    m_ExecIsSet = true;
}
bool BcDaoProposalExecuteRequest::execIsSet() const
{
    return m_ExecIsSet;
}

void BcDaoProposalExecuteRequest::unsetExec()
{
    m_ExecIsSet = false;
}

utility::string_t BcDaoProposalExecuteRequest::getExecPrvKey() const
{
    return m_Exec_prv_key;
}


void BcDaoProposalExecuteRequest::setExecPrvKey(utility::string_t value)
{
    m_Exec_prv_key = value;
    m_Exec_prv_keyIsSet = true;
}
bool BcDaoProposalExecuteRequest::execPrvKeyIsSet() const
{
    return m_Exec_prv_keyIsSet;
}

void BcDaoProposalExecuteRequest::unsetExec_prv_key()
{
    m_Exec_prv_keyIsSet = false;
}

}
}
}
}

