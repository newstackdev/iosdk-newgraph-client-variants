/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SyncContactsRequest_postalAddresses.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SyncContactsRequest_postalAddresses::SyncContactsRequest_postalAddresses()
{
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_Postcode = utility::conversions::to_string_t("");
    m_PostcodeIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
}

SyncContactsRequest_postalAddresses::~SyncContactsRequest_postalAddresses()
{
}

void SyncContactsRequest_postalAddresses::validate()
{
    // TODO: implement validation
}

web::json::value SyncContactsRequest_postalAddresses::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t("street")] = ModelBase::toJson(m_Street);
    }
    if(m_PostcodeIsSet)
    {
        val[utility::conversions::to_string_t("postcode")] = ModelBase::toJson(m_Postcode);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t("region")] = ModelBase::toJson(m_Region);
    }

    return val;
}

void SyncContactsRequest_postalAddresses::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("city")];
        if(!fieldValue.is_null())
        {
            setCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("street")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("street")];
        if(!fieldValue.is_null())
        {
            setStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postcode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("postcode")];
        if(!fieldValue.is_null())
        {
            setPostcode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("region")];
        if(!fieldValue.is_null())
        {
            setRegion(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SyncContactsRequest_postalAddresses::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
        
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
        
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("street"), m_Street));
        
    }
    if(m_PostcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postcode"), m_Postcode));
        
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
        
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region"), m_Region));
        
    }
}

void SyncContactsRequest_postalAddresses::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("city"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("street")))
    {
        setStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("street"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postcode")))
    {
        setPostcode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postcode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region")))
    {
        setRegion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("region"))));
    }
}

utility::string_t SyncContactsRequest_postalAddresses::getCountry() const
{
    return m_Country;
}


void SyncContactsRequest_postalAddresses::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool SyncContactsRequest_postalAddresses::countryIsSet() const
{
    return m_CountryIsSet;
}

void SyncContactsRequest_postalAddresses::unsetCountry()
{
    m_CountryIsSet = false;
}

utility::string_t SyncContactsRequest_postalAddresses::getCity() const
{
    return m_City;
}


void SyncContactsRequest_postalAddresses::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool SyncContactsRequest_postalAddresses::cityIsSet() const
{
    return m_CityIsSet;
}

void SyncContactsRequest_postalAddresses::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t SyncContactsRequest_postalAddresses::getStreet() const
{
    return m_Street;
}


void SyncContactsRequest_postalAddresses::setStreet(utility::string_t value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool SyncContactsRequest_postalAddresses::streetIsSet() const
{
    return m_StreetIsSet;
}

void SyncContactsRequest_postalAddresses::unsetStreet()
{
    m_StreetIsSet = false;
}

utility::string_t SyncContactsRequest_postalAddresses::getPostcode() const
{
    return m_Postcode;
}


void SyncContactsRequest_postalAddresses::setPostcode(utility::string_t value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}
bool SyncContactsRequest_postalAddresses::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}

void SyncContactsRequest_postalAddresses::unsetPostcode()
{
    m_PostcodeIsSet = false;
}

utility::string_t SyncContactsRequest_postalAddresses::getLabel() const
{
    return m_Label;
}


void SyncContactsRequest_postalAddresses::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool SyncContactsRequest_postalAddresses::labelIsSet() const
{
    return m_LabelIsSet;
}

void SyncContactsRequest_postalAddresses::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t SyncContactsRequest_postalAddresses::getRegion() const
{
    return m_Region;
}


void SyncContactsRequest_postalAddresses::setRegion(utility::string_t value)
{
    m_Region = value;
    m_RegionIsSet = true;
}
bool SyncContactsRequest_postalAddresses::regionIsSet() const
{
    return m_RegionIsSet;
}

void SyncContactsRequest_postalAddresses::unsetRegion()
{
    m_RegionIsSet = false;
}

}
}
}
}

