/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RatingUpdateRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RatingUpdateRequest::RatingUpdateRequest()
{
    m_TargetId = utility::conversions::to_string_t("");
    m_TargetIdIsSet = false;
    m_ContextType = utility::conversions::to_string_t("");
    m_ContextTypeIsSet = false;
    m_ContextValue = utility::conversions::to_string_t("");
    m_ContextValueIsSet = false;
    m_Value = 0.0;
}

RatingUpdateRequest::~RatingUpdateRequest()
{
}

void RatingUpdateRequest::validate()
{
    // TODO: implement validation
}

web::json::value RatingUpdateRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TargetIdIsSet)
    {
        val[utility::conversions::to_string_t("targetId")] = ModelBase::toJson(m_TargetId);
    }
    if(m_ContextTypeIsSet)
    {
        val[utility::conversions::to_string_t("contextType")] = ModelBase::toJson(m_ContextType);
    }
    if(m_ContextValueIsSet)
    {
        val[utility::conversions::to_string_t("contextValue")] = ModelBase::toJson(m_ContextValue);
    }
    val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);

    return val;
}

void RatingUpdateRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("targetId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("targetId")];
        if(!fieldValue.is_null())
        {
            setTargetId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contextType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contextType")];
        if(!fieldValue.is_null())
        {
            setContextType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contextValue")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contextValue")];
        if(!fieldValue.is_null())
        {
            setContextValue(ModelBase::stringFromJson(fieldValue));
        }
    }
    setValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("value")]));
}

void RatingUpdateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TargetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetId"), m_TargetId));
        
    }
    if(m_ContextTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contextType"), m_ContextType));
        
    }
    if(m_ContextValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contextValue"), m_ContextValue));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
}

void RatingUpdateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("targetId")))
    {
        setTargetId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contextType")))
    {
        setContextType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contextType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contextValue")))
    {
        setContextValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contextValue"))));
    }
    setValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
}

utility::string_t RatingUpdateRequest::getTargetId() const
{
    return m_TargetId;
}


void RatingUpdateRequest::setTargetId(utility::string_t value)
{
    m_TargetId = value;
    m_TargetIdIsSet = true;
}
bool RatingUpdateRequest::targetIdIsSet() const
{
    return m_TargetIdIsSet;
}

void RatingUpdateRequest::unsetTargetId()
{
    m_TargetIdIsSet = false;
}

utility::string_t RatingUpdateRequest::getContextType() const
{
    return m_ContextType;
}


void RatingUpdateRequest::setContextType(utility::string_t value)
{
    m_ContextType = value;
    m_ContextTypeIsSet = true;
}
bool RatingUpdateRequest::contextTypeIsSet() const
{
    return m_ContextTypeIsSet;
}

void RatingUpdateRequest::unsetContextType()
{
    m_ContextTypeIsSet = false;
}

utility::string_t RatingUpdateRequest::getContextValue() const
{
    return m_ContextValue;
}


void RatingUpdateRequest::setContextValue(utility::string_t value)
{
    m_ContextValue = value;
    m_ContextValueIsSet = true;
}
bool RatingUpdateRequest::contextValueIsSet() const
{
    return m_ContextValueIsSet;
}

void RatingUpdateRequest::unsetContextValue()
{
    m_ContextValueIsSet = false;
}

double RatingUpdateRequest::getValue() const
{
    return m_Value;
}


void RatingUpdateRequest::setValue(double value)
{
    m_Value = value;
    
}
}
}
}
}

