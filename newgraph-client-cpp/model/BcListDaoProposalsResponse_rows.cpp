/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcListDaoProposalsResponse_rows.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcListDaoProposalsResponse_rows::BcListDaoProposalsResponse_rows()
{
    m_Summary = utility::conversions::to_string_t("");
    m_SummaryIsSet = false;
    m_Proposer = utility::conversions::to_string_t("");
    m_ProposerIsSet = false;
    m_Vote_start = utility::conversions::to_string_t("");
    m_Vote_startIsSet = false;
    m_More = false;
    m_MoreIsSet = false;
    m_Next_key = utility::conversions::to_string_t("");
    m_Next_keyIsSet = false;
    m_Vote_end = utility::conversions::to_string_t("");
    m_Vote_endIsSet = false;
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Vote_noIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Vote_yesIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

BcListDaoProposalsResponse_rows::~BcListDaoProposalsResponse_rows()
{
}

void BcListDaoProposalsResponse_rows::validate()
{
    // TODO: implement validation
}

web::json::value BcListDaoProposalsResponse_rows::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SummaryIsSet)
    {
        val[utility::conversions::to_string_t("summary")] = ModelBase::toJson(m_Summary);
    }
    if(m_ProposerIsSet)
    {
        val[utility::conversions::to_string_t("proposer")] = ModelBase::toJson(m_Proposer);
    }
    if(m_Vote_startIsSet)
    {
        val[utility::conversions::to_string_t("vote_start")] = ModelBase::toJson(m_Vote_start);
    }
    if(m_MoreIsSet)
    {
        val[utility::conversions::to_string_t("more")] = ModelBase::toJson(m_More);
    }
    if(m_Next_keyIsSet)
    {
        val[utility::conversions::to_string_t("next_key")] = ModelBase::toJson(m_Next_key);
    }
    if(m_Vote_endIsSet)
    {
        val[utility::conversions::to_string_t("vote_end")] = ModelBase::toJson(m_Vote_end);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_Vote_noIsSet)
    {
        val[utility::conversions::to_string_t("vote_no")] = ModelBase::toJson(m_Vote_no);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_Vote_yesIsSet)
    {
        val[utility::conversions::to_string_t("vote_yes")] = ModelBase::toJson(m_Vote_yes);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }

    return val;
}

void BcListDaoProposalsResponse_rows::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("summary")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("summary")];
        if(!fieldValue.is_null())
        {
            setSummary(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proposer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposer")];
        if(!fieldValue.is_null())
        {
            setProposer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_start")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_start")];
        if(!fieldValue.is_null())
        {
            setVoteStart(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("more")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("more")];
        if(!fieldValue.is_null())
        {
            setMore(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("next_key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("next_key")];
        if(!fieldValue.is_null())
        {
            setNextKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_end")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_end")];
        if(!fieldValue.is_null())
        {
            setVoteEnd(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("title")];
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_no")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_no")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BcListDaoProposalsResponse_vote_no> newItem(new BcListDaoProposalsResponse_vote_no());
            newItem->fromJson(fieldValue);
            setVoteNo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("url")];
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_yes")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_yes")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BcListDaoProposalsResponse_vote_no> newItem(new BcListDaoProposalsResponse_vote_no());
            newItem->fromJson(fieldValue);
            setVoteYes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcListDaoProposalsResponse_rows::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SummaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("summary"), m_Summary));
        
    }
    if(m_ProposerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposer"), m_Proposer));
        
    }
    if(m_Vote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_start"), m_Vote_start));
        
    }
    if(m_MoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("more"), m_More));
    }
    if(m_Next_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("next_key"), m_Next_key));
        
    }
    if(m_Vote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_end"), m_Vote_end));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
        
    }
    if(m_Vote_noIsSet)
    {
        if (m_Vote_no.get())
        {
            m_Vote_no->toMultipart(multipart, utility::conversions::to_string_t("vote_no."));
        }
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
        
    }
    if(m_Vote_yesIsSet)
    {
        if (m_Vote_yes.get())
        {
            m_Vote_yes->toMultipart(multipart, utility::conversions::to_string_t("vote_yes."));
        }
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
        
    }
}

void BcListDaoProposalsResponse_rows::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("summary")))
    {
        setSummary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("summary"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proposer")))
    {
        setProposer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_start")))
    {
        setVoteStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_start"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("more")))
    {
        setMore(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("more"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("next_key")))
    {
        setNextKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("next_key"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_end")))
    {
        setVoteEnd(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_end"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_no")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("vote_no")))
        {
            std::shared_ptr<BcListDaoProposalsResponse_vote_no> newItem(new BcListDaoProposalsResponse_vote_no());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("vote_no."));
            setVoteNo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_yes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("vote_yes")))
        {
            std::shared_ptr<BcListDaoProposalsResponse_vote_no> newItem(new BcListDaoProposalsResponse_vote_no());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("vote_yes."));
            setVoteYes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
}

utility::string_t BcListDaoProposalsResponse_rows::getSummary() const
{
    return m_Summary;
}


void BcListDaoProposalsResponse_rows::setSummary(utility::string_t value)
{
    m_Summary = value;
    m_SummaryIsSet = true;
}
bool BcListDaoProposalsResponse_rows::summaryIsSet() const
{
    return m_SummaryIsSet;
}

void BcListDaoProposalsResponse_rows::unsetSummary()
{
    m_SummaryIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getProposer() const
{
    return m_Proposer;
}


void BcListDaoProposalsResponse_rows::setProposer(utility::string_t value)
{
    m_Proposer = value;
    m_ProposerIsSet = true;
}
bool BcListDaoProposalsResponse_rows::proposerIsSet() const
{
    return m_ProposerIsSet;
}

void BcListDaoProposalsResponse_rows::unsetProposer()
{
    m_ProposerIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getVoteStart() const
{
    return m_Vote_start;
}


void BcListDaoProposalsResponse_rows::setVoteStart(utility::string_t value)
{
    m_Vote_start = value;
    m_Vote_startIsSet = true;
}
bool BcListDaoProposalsResponse_rows::voteStartIsSet() const
{
    return m_Vote_startIsSet;
}

void BcListDaoProposalsResponse_rows::unsetVote_start()
{
    m_Vote_startIsSet = false;
}

bool BcListDaoProposalsResponse_rows::isMore() const
{
    return m_More;
}


void BcListDaoProposalsResponse_rows::setMore(bool value)
{
    m_More = value;
    m_MoreIsSet = true;
}
bool BcListDaoProposalsResponse_rows::moreIsSet() const
{
    return m_MoreIsSet;
}

void BcListDaoProposalsResponse_rows::unsetMore()
{
    m_MoreIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getNextKey() const
{
    return m_Next_key;
}


void BcListDaoProposalsResponse_rows::setNextKey(utility::string_t value)
{
    m_Next_key = value;
    m_Next_keyIsSet = true;
}
bool BcListDaoProposalsResponse_rows::nextKeyIsSet() const
{
    return m_Next_keyIsSet;
}

void BcListDaoProposalsResponse_rows::unsetNext_key()
{
    m_Next_keyIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getVoteEnd() const
{
    return m_Vote_end;
}


void BcListDaoProposalsResponse_rows::setVoteEnd(utility::string_t value)
{
    m_Vote_end = value;
    m_Vote_endIsSet = true;
}
bool BcListDaoProposalsResponse_rows::voteEndIsSet() const
{
    return m_Vote_endIsSet;
}

void BcListDaoProposalsResponse_rows::unsetVote_end()
{
    m_Vote_endIsSet = false;
}

double BcListDaoProposalsResponse_rows::getId() const
{
    return m_Id;
}


void BcListDaoProposalsResponse_rows::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BcListDaoProposalsResponse_rows::idIsSet() const
{
    return m_IdIsSet;
}

void BcListDaoProposalsResponse_rows::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getTitle() const
{
    return m_Title;
}


void BcListDaoProposalsResponse_rows::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool BcListDaoProposalsResponse_rows::titleIsSet() const
{
    return m_TitleIsSet;
}

void BcListDaoProposalsResponse_rows::unsetTitle()
{
    m_TitleIsSet = false;
}

std::shared_ptr<BcListDaoProposalsResponse_vote_no> BcListDaoProposalsResponse_rows::getVoteNo() const
{
    return m_Vote_no;
}


void BcListDaoProposalsResponse_rows::setVoteNo(std::shared_ptr<BcListDaoProposalsResponse_vote_no> value)
{
    m_Vote_no = value;
    m_Vote_noIsSet = true;
}
bool BcListDaoProposalsResponse_rows::voteNoIsSet() const
{
    return m_Vote_noIsSet;
}

void BcListDaoProposalsResponse_rows::unsetVote_no()
{
    m_Vote_noIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getUrl() const
{
    return m_Url;
}


void BcListDaoProposalsResponse_rows::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool BcListDaoProposalsResponse_rows::urlIsSet() const
{
    return m_UrlIsSet;
}

void BcListDaoProposalsResponse_rows::unsetUrl()
{
    m_UrlIsSet = false;
}

std::shared_ptr<BcListDaoProposalsResponse_vote_no> BcListDaoProposalsResponse_rows::getVoteYes() const
{
    return m_Vote_yes;
}


void BcListDaoProposalsResponse_rows::setVoteYes(std::shared_ptr<BcListDaoProposalsResponse_vote_no> value)
{
    m_Vote_yes = value;
    m_Vote_yesIsSet = true;
}
bool BcListDaoProposalsResponse_rows::voteYesIsSet() const
{
    return m_Vote_yesIsSet;
}

void BcListDaoProposalsResponse_rows::unsetVote_yes()
{
    m_Vote_yesIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_rows::getStatus() const
{
    return m_Status;
}


void BcListDaoProposalsResponse_rows::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool BcListDaoProposalsResponse_rows::statusIsSet() const
{
    return m_StatusIsSet;
}

void BcListDaoProposalsResponse_rows::unsetStatus()
{
    m_StatusIsSet = false;
}

}
}
}
}

