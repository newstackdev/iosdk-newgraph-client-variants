/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentStripeWebhookRequest_data.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PaymentStripeWebhookRequest_data::PaymentStripeWebhookRequest_data()
{
    m_objectIsSet = false;
}

PaymentStripeWebhookRequest_data::~PaymentStripeWebhookRequest_data()
{
}

void PaymentStripeWebhookRequest_data::validate()
{
    // TODO: implement validation
}

web::json::value PaymentStripeWebhookRequest_data::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }

    return val;
}

void PaymentStripeWebhookRequest_data::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("object")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setObject( newItem );
        }
    }
}

void PaymentStripeWebhookRequest_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_objectIsSet)
    {
        if (m_object.get())
        {
            m_object->toMultipart(multipart, utility::conversions::to_string_t("object."));
        }
        
    }
}

void PaymentStripeWebhookRequest_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("object")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("object."));
            setObject( newItem );
        }
    }
}

std::shared_ptr<Object> PaymentStripeWebhookRequest_data::getObject() const
{
    return m_object;
}


void PaymentStripeWebhookRequest_data::setObject(std::shared_ptr<Object> value)
{
    m_object = value;
    m_objectIsSet = true;
}
bool PaymentStripeWebhookRequest_data::objectIsSet() const
{
    return m_objectIsSet;
}

void PaymentStripeWebhookRequest_data::unsetobject()
{
    m_objectIsSet = false;
}

}
}
}
}

