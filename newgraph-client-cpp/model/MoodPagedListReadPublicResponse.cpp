/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MoodPagedListReadPublicResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MoodPagedListReadPublicResponse::MoodPagedListReadPublicResponse()
{
    m_ValueIsSet = false;
    m_Done = false;
    m_DoneIsSet = false;
}

MoodPagedListReadPublicResponse::~MoodPagedListReadPublicResponse()
{
}

void MoodPagedListReadPublicResponse::validate()
{
    // TODO: implement validation
}

web::json::value MoodPagedListReadPublicResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("value")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DoneIsSet)
    {
        val[utility::conversions::to_string_t("done")] = ModelBase::toJson(m_Done);
    }

    return val;
}

void MoodPagedListReadPublicResponse::fromJson(web::json::value& val)
{
    {
        m_Value.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("value")))
        {
        for( auto& item : val[utility::conversions::to_string_t("value")].as_array() )
        {
            if(item.is_null())
            {
                m_Value.push_back( std::shared_ptr<MoodPagedListReadPublicResponse_value>(nullptr) );
            }
            else
            {
                std::shared_ptr<MoodPagedListReadPublicResponse_value> newItem(new MoodPagedListReadPublicResponse_value());
                newItem->fromJson(item);
                m_Value.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("done")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("done")];
        if(!fieldValue.is_null())
        {
            setDone(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void MoodPagedListReadPublicResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("done"), m_Done));
    }
}

void MoodPagedListReadPublicResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Value.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("value")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Value.push_back( std::shared_ptr<MoodPagedListReadPublicResponse_value>(nullptr) );
            }
            else
            {
                std::shared_ptr<MoodPagedListReadPublicResponse_value> newItem(new MoodPagedListReadPublicResponse_value());
                newItem->fromJson(item);
                m_Value.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("done")))
    {
        setDone(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("done"))));
    }
}

std::vector<std::shared_ptr<MoodPagedListReadPublicResponse_value>>& MoodPagedListReadPublicResponse::getValue()
{
    return m_Value;
}

void MoodPagedListReadPublicResponse::setValue(std::vector<std::shared_ptr<MoodPagedListReadPublicResponse_value>> value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool MoodPagedListReadPublicResponse::valueIsSet() const
{
    return m_ValueIsSet;
}

void MoodPagedListReadPublicResponse::unsetValue()
{
    m_ValueIsSet = false;
}

bool MoodPagedListReadPublicResponse::isDone() const
{
    return m_Done;
}


void MoodPagedListReadPublicResponse::setDone(bool value)
{
    m_Done = value;
    m_DoneIsSet = true;
}
bool MoodPagedListReadPublicResponse::doneIsSet() const
{
    return m_DoneIsSet;
}

void MoodPagedListReadPublicResponse::unsetDone()
{
    m_DoneIsSet = false;
}

}
}
}
}

