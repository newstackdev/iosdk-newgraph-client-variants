/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CreativeSearchResponse__source.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreativeSearchResponse__source::CreativeSearchResponse__source()
{
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_MetaIsSet = false;
    m_AestheticsIsSet = false;
    m_ContentIsSet = false;
}

CreativeSearchResponse__source::~CreativeSearchResponse__source()
{
}

void CreativeSearchResponse__source::validate()
{
    // TODO: implement validation
}

web::json::value CreativeSearchResponse__source::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }
    if(m_AestheticsIsSet)
    {
        val[utility::conversions::to_string_t("aesthetics")] = ModelBase::toJson(m_Aesthetics);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }

    return val;
}

void CreativeSearchResponse__source::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("image")];
        if(!fieldValue.is_null())
        {
            setImage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreativeSearchResponse__source_meta> newItem(new CreativeSearchResponse__source_meta());
            newItem->fromJson(fieldValue);
            setMeta( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aesthetics")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("aesthetics")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setAesthetics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("content")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setContent( newItem );
        }
    }
}

void CreativeSearchResponse__source::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
        
    }
    if(m_MetaIsSet)
    {
        if (m_Meta.get())
        {
            m_Meta->toMultipart(multipart, utility::conversions::to_string_t("meta."));
        }
        
    }
    if(m_AestheticsIsSet)
    {
        if (m_Aesthetics.get())
        {
            m_Aesthetics->toMultipart(multipart, utility::conversions::to_string_t("aesthetics."));
        }
        
    }
    if(m_ContentIsSet)
    {
        if (m_Content.get())
        {
            m_Content->toMultipart(multipart, utility::conversions::to_string_t("content."));
        }
        
    }
}

void CreativeSearchResponse__source::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        setImage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("image"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("meta")))
        {
            std::shared_ptr<CreativeSearchResponse__source_meta> newItem(new CreativeSearchResponse__source_meta());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("meta."));
            setMeta( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aesthetics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("aesthetics")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("aesthetics."));
            setAesthetics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("content")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("content."));
            setContent( newItem );
        }
    }
}

utility::string_t CreativeSearchResponse__source::getImage() const
{
    return m_Image;
}


void CreativeSearchResponse__source::setImage(utility::string_t value)
{
    m_Image = value;
    m_ImageIsSet = true;
}
bool CreativeSearchResponse__source::imageIsSet() const
{
    return m_ImageIsSet;
}

void CreativeSearchResponse__source::unsetImage()
{
    m_ImageIsSet = false;
}

std::shared_ptr<CreativeSearchResponse__source_meta> CreativeSearchResponse__source::getMeta() const
{
    return m_Meta;
}


void CreativeSearchResponse__source::setMeta(std::shared_ptr<CreativeSearchResponse__source_meta> value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool CreativeSearchResponse__source::metaIsSet() const
{
    return m_MetaIsSet;
}

void CreativeSearchResponse__source::unsetMeta()
{
    m_MetaIsSet = false;
}

std::shared_ptr<Object> CreativeSearchResponse__source::getAesthetics() const
{
    return m_Aesthetics;
}


void CreativeSearchResponse__source::setAesthetics(std::shared_ptr<Object> value)
{
    m_Aesthetics = value;
    m_AestheticsIsSet = true;
}
bool CreativeSearchResponse__source::aestheticsIsSet() const
{
    return m_AestheticsIsSet;
}

void CreativeSearchResponse__source::unsetAesthetics()
{
    m_AestheticsIsSet = false;
}

std::shared_ptr<Object> CreativeSearchResponse__source::getContent() const
{
    return m_Content;
}


void CreativeSearchResponse__source::setContent(std::shared_ptr<Object> value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool CreativeSearchResponse__source::contentIsSet() const
{
    return m_ContentIsSet;
}

void CreativeSearchResponse__source::unsetContent()
{
    m_ContentIsSet = false;
}

}
}
}
}

