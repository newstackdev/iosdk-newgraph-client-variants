/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SyncContactsRequest_contacts.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SyncContactsRequest_contacts::SyncContactsRequest_contacts()
{
    m_Birthday = utility::conversions::to_string_t("");
    m_BirthdayIsSet = false;
    m_Identifier = utility::conversions::to_string_t("");
    m_IdentifierIsSet = false;
    m_AndroidAccountName = utility::conversions::to_string_t("");
    m_AndroidAccountNameIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_Prefix = utility::conversions::to_string_t("");
    m_PrefixIsSet = false;
    m_GivenName = utility::conversions::to_string_t("");
    m_GivenNameIsSet = false;
    m_JobTitle = utility::conversions::to_string_t("");
    m_JobTitleIsSet = false;
    m_PhonesIsSet = false;
    m_Avatar = utility::conversions::to_string_t("");
    m_AvatarIsSet = false;
    m_Suffix = utility::conversions::to_string_t("");
    m_SuffixIsSet = false;
    m_PostalAddressesIsSet = false;
    m_EmailsIsSet = false;
    m_AndroidAccountType = utility::conversions::to_string_t("");
    m_AndroidAccountTypeIsSet = false;
    m_FamilyName = utility::conversions::to_string_t("");
    m_FamilyNameIsSet = false;
    m_MiddleName = utility::conversions::to_string_t("");
    m_MiddleNameIsSet = false;
    m_Company = utility::conversions::to_string_t("");
    m_CompanyIsSet = false;
    m_AndroidAccountTypeRaw = utility::conversions::to_string_t("");
    m_AndroidAccountTypeRawIsSet = false;
}

SyncContactsRequest_contacts::~SyncContactsRequest_contacts()
{
}

void SyncContactsRequest_contacts::validate()
{
    // TODO: implement validation
}

web::json::value SyncContactsRequest_contacts::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_BirthdayIsSet)
    {
        val[utility::conversions::to_string_t("birthday")] = ModelBase::toJson(m_Birthday);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t("identifier")] = ModelBase::toJson(m_Identifier);
    }
    if(m_AndroidAccountNameIsSet)
    {
        val[utility::conversions::to_string_t("androidAccountName")] = ModelBase::toJson(m_AndroidAccountName);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_PrefixIsSet)
    {
        val[utility::conversions::to_string_t("prefix")] = ModelBase::toJson(m_Prefix);
    }
    if(m_GivenNameIsSet)
    {
        val[utility::conversions::to_string_t("givenName")] = ModelBase::toJson(m_GivenName);
    }
    if(m_JobTitleIsSet)
    {
        val[utility::conversions::to_string_t("jobTitle")] = ModelBase::toJson(m_JobTitle);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Phones )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("phones")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AvatarIsSet)
    {
        val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);
    }
    if(m_SuffixIsSet)
    {
        val[utility::conversions::to_string_t("suffix")] = ModelBase::toJson(m_Suffix);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PostalAddresses )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("postalAddresses")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Emails )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("emails")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AndroidAccountTypeIsSet)
    {
        val[utility::conversions::to_string_t("androidAccountType")] = ModelBase::toJson(m_AndroidAccountType);
    }
    if(m_FamilyNameIsSet)
    {
        val[utility::conversions::to_string_t("familyName")] = ModelBase::toJson(m_FamilyName);
    }
    if(m_MiddleNameIsSet)
    {
        val[utility::conversions::to_string_t("middleName")] = ModelBase::toJson(m_MiddleName);
    }
    if(m_CompanyIsSet)
    {
        val[utility::conversions::to_string_t("company")] = ModelBase::toJson(m_Company);
    }
    if(m_AndroidAccountTypeRawIsSet)
    {
        val[utility::conversions::to_string_t("androidAccountTypeRaw")] = ModelBase::toJson(m_AndroidAccountTypeRaw);
    }

    return val;
}

void SyncContactsRequest_contacts::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("birthday")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("birthday")];
        if(!fieldValue.is_null())
        {
            setBirthday(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("identifier")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("identifier")];
        if(!fieldValue.is_null())
        {
            setIdentifier(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("androidAccountName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("androidAccountName")];
        if(!fieldValue.is_null())
        {
            setAndroidAccountName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prefix")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prefix")];
        if(!fieldValue.is_null())
        {
            setPrefix(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("givenName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("givenName")];
        if(!fieldValue.is_null())
        {
            setGivenName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jobTitle")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("jobTitle")];
        if(!fieldValue.is_null())
        {
            setJobTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Phones.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("phones")))
        {
        for( auto& item : val[utility::conversions::to_string_t("phones")].as_array() )
        {
            if(item.is_null())
            {
                m_Phones.push_back( std::shared_ptr<SyncContactsRequest_phones>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_phones> newItem(new SyncContactsRequest_phones());
                newItem->fromJson(item);
                m_Phones.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            setAvatar(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suffix")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("suffix")];
        if(!fieldValue.is_null())
        {
            setSuffix(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_PostalAddresses.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("postalAddresses")))
        {
        for( auto& item : val[utility::conversions::to_string_t("postalAddresses")].as_array() )
        {
            if(item.is_null())
            {
                m_PostalAddresses.push_back( std::shared_ptr<SyncContactsRequest_postalAddresses>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_postalAddresses> newItem(new SyncContactsRequest_postalAddresses());
                newItem->fromJson(item);
                m_PostalAddresses.push_back( newItem );
            }
        }
        }
    }
    {
        m_Emails.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("emails")))
        {
        for( auto& item : val[utility::conversions::to_string_t("emails")].as_array() )
        {
            if(item.is_null())
            {
                m_Emails.push_back( std::shared_ptr<SyncContactsRequest_phones>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_phones> newItem(new SyncContactsRequest_phones());
                newItem->fromJson(item);
                m_Emails.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("androidAccountType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("androidAccountType")];
        if(!fieldValue.is_null())
        {
            setAndroidAccountType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("familyName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("familyName")];
        if(!fieldValue.is_null())
        {
            setFamilyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("middleName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("middleName")];
        if(!fieldValue.is_null())
        {
            setMiddleName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("company")];
        if(!fieldValue.is_null())
        {
            setCompany(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("androidAccountTypeRaw")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("androidAccountTypeRaw")];
        if(!fieldValue.is_null())
        {
            setAndroidAccountTypeRaw(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SyncContactsRequest_contacts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_BirthdayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("birthday"), m_Birthday));
        
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("identifier"), m_Identifier));
        
    }
    if(m_AndroidAccountNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("androidAccountName"), m_AndroidAccountName));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
        
    }
    if(m_PrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prefix"), m_Prefix));
        
    }
    if(m_GivenNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("givenName"), m_GivenName));
        
    }
    if(m_JobTitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jobTitle"), m_JobTitle));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Phones )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phones"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_AvatarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar"), m_Avatar));
        
    }
    if(m_SuffixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suffix"), m_Suffix));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PostalAddresses )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postalAddresses"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Emails )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emails"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_AndroidAccountTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("androidAccountType"), m_AndroidAccountType));
        
    }
    if(m_FamilyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("familyName"), m_FamilyName));
        
    }
    if(m_MiddleNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("middleName"), m_MiddleName));
        
    }
    if(m_CompanyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company"), m_Company));
        
    }
    if(m_AndroidAccountTypeRawIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("androidAccountTypeRaw"), m_AndroidAccountTypeRaw));
        
    }
}

void SyncContactsRequest_contacts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("birthday")))
    {
        setBirthday(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("birthday"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("identifier")))
    {
        setIdentifier(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("identifier"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("androidAccountName")))
    {
        setAndroidAccountName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("androidAccountName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prefix")))
    {
        setPrefix(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prefix"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("givenName")))
    {
        setGivenName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("givenName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jobTitle")))
    {
        setJobTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("jobTitle"))));
    }
    {
        m_Phones.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("phones")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phones"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Phones.push_back( std::shared_ptr<SyncContactsRequest_phones>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_phones> newItem(new SyncContactsRequest_phones());
                newItem->fromJson(item);
                m_Phones.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar")))
    {
        setAvatar(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suffix")))
    {
        setSuffix(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("suffix"))));
    }
    {
        m_PostalAddresses.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("postalAddresses")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postalAddresses"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_PostalAddresses.push_back( std::shared_ptr<SyncContactsRequest_postalAddresses>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_postalAddresses> newItem(new SyncContactsRequest_postalAddresses());
                newItem->fromJson(item);
                m_PostalAddresses.push_back( newItem );
            }
        }
        }
    }
    {
        m_Emails.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("emails")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("emails"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Emails.push_back( std::shared_ptr<SyncContactsRequest_phones>(nullptr) );
            }
            else
            {
                std::shared_ptr<SyncContactsRequest_phones> newItem(new SyncContactsRequest_phones());
                newItem->fromJson(item);
                m_Emails.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("androidAccountType")))
    {
        setAndroidAccountType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("androidAccountType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("familyName")))
    {
        setFamilyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("familyName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("middleName")))
    {
        setMiddleName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("middleName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company")))
    {
        setCompany(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("company"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("androidAccountTypeRaw")))
    {
        setAndroidAccountTypeRaw(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("androidAccountTypeRaw"))));
    }
}

utility::string_t SyncContactsRequest_contacts::getBirthday() const
{
    return m_Birthday;
}


void SyncContactsRequest_contacts::setBirthday(utility::string_t value)
{
    m_Birthday = value;
    m_BirthdayIsSet = true;
}
bool SyncContactsRequest_contacts::birthdayIsSet() const
{
    return m_BirthdayIsSet;
}

void SyncContactsRequest_contacts::unsetBirthday()
{
    m_BirthdayIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getIdentifier() const
{
    return m_Identifier;
}


void SyncContactsRequest_contacts::setIdentifier(utility::string_t value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}
bool SyncContactsRequest_contacts::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void SyncContactsRequest_contacts::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getAndroidAccountName() const
{
    return m_AndroidAccountName;
}


void SyncContactsRequest_contacts::setAndroidAccountName(utility::string_t value)
{
    m_AndroidAccountName = value;
    m_AndroidAccountNameIsSet = true;
}
bool SyncContactsRequest_contacts::androidAccountNameIsSet() const
{
    return m_AndroidAccountNameIsSet;
}

void SyncContactsRequest_contacts::unsetAndroidAccountName()
{
    m_AndroidAccountNameIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getDisplayName() const
{
    return m_DisplayName;
}


void SyncContactsRequest_contacts::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool SyncContactsRequest_contacts::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void SyncContactsRequest_contacts::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getPrefix() const
{
    return m_Prefix;
}


void SyncContactsRequest_contacts::setPrefix(utility::string_t value)
{
    m_Prefix = value;
    m_PrefixIsSet = true;
}
bool SyncContactsRequest_contacts::prefixIsSet() const
{
    return m_PrefixIsSet;
}

void SyncContactsRequest_contacts::unsetPrefix()
{
    m_PrefixIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getGivenName() const
{
    return m_GivenName;
}


void SyncContactsRequest_contacts::setGivenName(utility::string_t value)
{
    m_GivenName = value;
    m_GivenNameIsSet = true;
}
bool SyncContactsRequest_contacts::givenNameIsSet() const
{
    return m_GivenNameIsSet;
}

void SyncContactsRequest_contacts::unsetGivenName()
{
    m_GivenNameIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getJobTitle() const
{
    return m_JobTitle;
}


void SyncContactsRequest_contacts::setJobTitle(utility::string_t value)
{
    m_JobTitle = value;
    m_JobTitleIsSet = true;
}
bool SyncContactsRequest_contacts::jobTitleIsSet() const
{
    return m_JobTitleIsSet;
}

void SyncContactsRequest_contacts::unsetJobTitle()
{
    m_JobTitleIsSet = false;
}

std::vector<std::shared_ptr<SyncContactsRequest_phones>>& SyncContactsRequest_contacts::getPhones()
{
    return m_Phones;
}

void SyncContactsRequest_contacts::setPhones(std::vector<std::shared_ptr<SyncContactsRequest_phones>> value)
{
    m_Phones = value;
    m_PhonesIsSet = true;
}
bool SyncContactsRequest_contacts::phonesIsSet() const
{
    return m_PhonesIsSet;
}

void SyncContactsRequest_contacts::unsetPhones()
{
    m_PhonesIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getAvatar() const
{
    return m_Avatar;
}


void SyncContactsRequest_contacts::setAvatar(utility::string_t value)
{
    m_Avatar = value;
    m_AvatarIsSet = true;
}
bool SyncContactsRequest_contacts::avatarIsSet() const
{
    return m_AvatarIsSet;
}

void SyncContactsRequest_contacts::unsetAvatar()
{
    m_AvatarIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getSuffix() const
{
    return m_Suffix;
}


void SyncContactsRequest_contacts::setSuffix(utility::string_t value)
{
    m_Suffix = value;
    m_SuffixIsSet = true;
}
bool SyncContactsRequest_contacts::suffixIsSet() const
{
    return m_SuffixIsSet;
}

void SyncContactsRequest_contacts::unsetSuffix()
{
    m_SuffixIsSet = false;
}

std::vector<std::shared_ptr<SyncContactsRequest_postalAddresses>>& SyncContactsRequest_contacts::getPostalAddresses()
{
    return m_PostalAddresses;
}

void SyncContactsRequest_contacts::setPostalAddresses(std::vector<std::shared_ptr<SyncContactsRequest_postalAddresses>> value)
{
    m_PostalAddresses = value;
    m_PostalAddressesIsSet = true;
}
bool SyncContactsRequest_contacts::postalAddressesIsSet() const
{
    return m_PostalAddressesIsSet;
}

void SyncContactsRequest_contacts::unsetPostalAddresses()
{
    m_PostalAddressesIsSet = false;
}

std::vector<std::shared_ptr<SyncContactsRequest_phones>>& SyncContactsRequest_contacts::getEmails()
{
    return m_Emails;
}

void SyncContactsRequest_contacts::setEmails(std::vector<std::shared_ptr<SyncContactsRequest_phones>> value)
{
    m_Emails = value;
    m_EmailsIsSet = true;
}
bool SyncContactsRequest_contacts::emailsIsSet() const
{
    return m_EmailsIsSet;
}

void SyncContactsRequest_contacts::unsetEmails()
{
    m_EmailsIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getAndroidAccountType() const
{
    return m_AndroidAccountType;
}


void SyncContactsRequest_contacts::setAndroidAccountType(utility::string_t value)
{
    m_AndroidAccountType = value;
    m_AndroidAccountTypeIsSet = true;
}
bool SyncContactsRequest_contacts::androidAccountTypeIsSet() const
{
    return m_AndroidAccountTypeIsSet;
}

void SyncContactsRequest_contacts::unsetAndroidAccountType()
{
    m_AndroidAccountTypeIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getFamilyName() const
{
    return m_FamilyName;
}


void SyncContactsRequest_contacts::setFamilyName(utility::string_t value)
{
    m_FamilyName = value;
    m_FamilyNameIsSet = true;
}
bool SyncContactsRequest_contacts::familyNameIsSet() const
{
    return m_FamilyNameIsSet;
}

void SyncContactsRequest_contacts::unsetFamilyName()
{
    m_FamilyNameIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getMiddleName() const
{
    return m_MiddleName;
}


void SyncContactsRequest_contacts::setMiddleName(utility::string_t value)
{
    m_MiddleName = value;
    m_MiddleNameIsSet = true;
}
bool SyncContactsRequest_contacts::middleNameIsSet() const
{
    return m_MiddleNameIsSet;
}

void SyncContactsRequest_contacts::unsetMiddleName()
{
    m_MiddleNameIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getCompany() const
{
    return m_Company;
}


void SyncContactsRequest_contacts::setCompany(utility::string_t value)
{
    m_Company = value;
    m_CompanyIsSet = true;
}
bool SyncContactsRequest_contacts::companyIsSet() const
{
    return m_CompanyIsSet;
}

void SyncContactsRequest_contacts::unsetCompany()
{
    m_CompanyIsSet = false;
}

utility::string_t SyncContactsRequest_contacts::getAndroidAccountTypeRaw() const
{
    return m_AndroidAccountTypeRaw;
}


void SyncContactsRequest_contacts::setAndroidAccountTypeRaw(utility::string_t value)
{
    m_AndroidAccountTypeRaw = value;
    m_AndroidAccountTypeRawIsSet = true;
}
bool SyncContactsRequest_contacts::androidAccountTypeRawIsSet() const
{
    return m_AndroidAccountTypeRawIsSet;
}

void SyncContactsRequest_contacts::unsetAndroidAccountTypeRaw()
{
    m_AndroidAccountTypeRawIsSet = false;
}

}
}
}
}

