/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcMintAssetRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcMintAssetRequest::BcMintAssetRequest()
{
    m_Immutable_dataIsSet = false;
    m_Tpl_name = utility::conversions::to_string_t("");
    m_Tpl_nameIsSet = false;
    m_Payer_prv_key = utility::conversions::to_string_t("");
    m_Creator = utility::conversions::to_string_t("");
    m_Sch_name = utility::conversions::to_string_t("");
    m_Sch_nameIsSet = false;
    m_Mutable_dataIsSet = false;
    m_Col_name = utility::conversions::to_string_t("");
    m_Col_nameIsSet = false;
    m_Payer = utility::conversions::to_string_t("");
    m_Payer_public_key = utility::conversions::to_string_t("");
}

BcMintAssetRequest::~BcMintAssetRequest()
{
}

void BcMintAssetRequest::validate()
{
    // TODO: implement validation
}

web::json::value BcMintAssetRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Immutable_data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("immutable_data")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Tpl_nameIsSet)
    {
        val[utility::conversions::to_string_t("tpl_name")] = ModelBase::toJson(m_Tpl_name);
    }
    val[utility::conversions::to_string_t("payer_prv_key")] = ModelBase::toJson(m_Payer_prv_key);
    val[utility::conversions::to_string_t("creator")] = ModelBase::toJson(m_Creator);
    if(m_Sch_nameIsSet)
    {
        val[utility::conversions::to_string_t("sch_name")] = ModelBase::toJson(m_Sch_name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Mutable_data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("mutable_data")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Col_nameIsSet)
    {
        val[utility::conversions::to_string_t("col_name")] = ModelBase::toJson(m_Col_name);
    }
    val[utility::conversions::to_string_t("payer")] = ModelBase::toJson(m_Payer);
    val[utility::conversions::to_string_t("payer_public_key")] = ModelBase::toJson(m_Payer_public_key);

    return val;
}

void BcMintAssetRequest::fromJson(web::json::value& val)
{
    {
        m_Immutable_data.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("immutable_data")))
        {
        for( auto& item : val[utility::conversions::to_string_t("immutable_data")].as_array() )
        {
            if(item.is_null())
            {
                m_Immutable_data.push_back( std::shared_ptr<BcMintAssetRequest_immutable_data>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcMintAssetRequest_immutable_data> newItem(new BcMintAssetRequest_immutable_data());
                newItem->fromJson(item);
                m_Immutable_data.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tpl_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tpl_name")];
        if(!fieldValue.is_null())
        {
            setTplName(ModelBase::stringFromJson(fieldValue));
        }
    }
    setPayerPrvKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer_prv_key")]));
    setCreator(ModelBase::stringFromJson(val[utility::conversions::to_string_t("creator")]));
    if(val.has_field(utility::conversions::to_string_t("sch_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sch_name")];
        if(!fieldValue.is_null())
        {
            setSchName(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Mutable_data.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("mutable_data")))
        {
        for( auto& item : val[utility::conversions::to_string_t("mutable_data")].as_array() )
        {
            if(item.is_null())
            {
                m_Mutable_data.push_back( std::shared_ptr<BcMintAssetRequest_immutable_data>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcMintAssetRequest_immutable_data> newItem(new BcMintAssetRequest_immutable_data());
                newItem->fromJson(item);
                m_Mutable_data.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("col_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("col_name")];
        if(!fieldValue.is_null())
        {
            setColName(ModelBase::stringFromJson(fieldValue));
        }
    }
    setPayer(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer")]));
    setPayerPublicKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("payer_public_key")]));
}

void BcMintAssetRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Immutable_data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("immutable_data"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_Tpl_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tpl_name"), m_Tpl_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer_prv_key"), m_Payer_prv_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creator"), m_Creator));
    if(m_Sch_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sch_name"), m_Sch_name));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Mutable_data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mutable_data"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_Col_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("col_name"), m_Col_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer"), m_Payer));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("payer_public_key"), m_Payer_public_key));
}

void BcMintAssetRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Immutable_data.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("immutable_data")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("immutable_data"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Immutable_data.push_back( std::shared_ptr<BcMintAssetRequest_immutable_data>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcMintAssetRequest_immutable_data> newItem(new BcMintAssetRequest_immutable_data());
                newItem->fromJson(item);
                m_Immutable_data.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tpl_name")))
    {
        setTplName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tpl_name"))));
    }
    setPayerPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer_prv_key"))));
    setCreator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("creator"))));
    if(multipart->hasContent(utility::conversions::to_string_t("sch_name")))
    {
        setSchName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sch_name"))));
    }
    {
        m_Mutable_data.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("mutable_data")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mutable_data"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Mutable_data.push_back( std::shared_ptr<BcMintAssetRequest_immutable_data>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcMintAssetRequest_immutable_data> newItem(new BcMintAssetRequest_immutable_data());
                newItem->fromJson(item);
                m_Mutable_data.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("col_name")))
    {
        setColName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("col_name"))));
    }
    setPayer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer"))));
    setPayerPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("payer_public_key"))));
}

std::vector<std::shared_ptr<BcMintAssetRequest_immutable_data>>& BcMintAssetRequest::getImmutableData()
{
    return m_Immutable_data;
}

void BcMintAssetRequest::setImmutableData(std::vector<std::shared_ptr<BcMintAssetRequest_immutable_data>> value)
{
    m_Immutable_data = value;
    m_Immutable_dataIsSet = true;
}
bool BcMintAssetRequest::immutableDataIsSet() const
{
    return m_Immutable_dataIsSet;
}

void BcMintAssetRequest::unsetImmutable_data()
{
    m_Immutable_dataIsSet = false;
}

utility::string_t BcMintAssetRequest::getTplName() const
{
    return m_Tpl_name;
}


void BcMintAssetRequest::setTplName(utility::string_t value)
{
    m_Tpl_name = value;
    m_Tpl_nameIsSet = true;
}
bool BcMintAssetRequest::tplNameIsSet() const
{
    return m_Tpl_nameIsSet;
}

void BcMintAssetRequest::unsetTpl_name()
{
    m_Tpl_nameIsSet = false;
}

utility::string_t BcMintAssetRequest::getPayerPrvKey() const
{
    return m_Payer_prv_key;
}


void BcMintAssetRequest::setPayerPrvKey(utility::string_t value)
{
    m_Payer_prv_key = value;
    
}
utility::string_t BcMintAssetRequest::getCreator() const
{
    return m_Creator;
}


void BcMintAssetRequest::setCreator(utility::string_t value)
{
    m_Creator = value;
    
}
utility::string_t BcMintAssetRequest::getSchName() const
{
    return m_Sch_name;
}


void BcMintAssetRequest::setSchName(utility::string_t value)
{
    m_Sch_name = value;
    m_Sch_nameIsSet = true;
}
bool BcMintAssetRequest::schNameIsSet() const
{
    return m_Sch_nameIsSet;
}

void BcMintAssetRequest::unsetSch_name()
{
    m_Sch_nameIsSet = false;
}

std::vector<std::shared_ptr<BcMintAssetRequest_immutable_data>>& BcMintAssetRequest::getMutableData()
{
    return m_Mutable_data;
}

void BcMintAssetRequest::setMutableData(std::vector<std::shared_ptr<BcMintAssetRequest_immutable_data>> value)
{
    m_Mutable_data = value;
    m_Mutable_dataIsSet = true;
}
bool BcMintAssetRequest::mutableDataIsSet() const
{
    return m_Mutable_dataIsSet;
}

void BcMintAssetRequest::unsetMutable_data()
{
    m_Mutable_dataIsSet = false;
}

utility::string_t BcMintAssetRequest::getColName() const
{
    return m_Col_name;
}


void BcMintAssetRequest::setColName(utility::string_t value)
{
    m_Col_name = value;
    m_Col_nameIsSet = true;
}
bool BcMintAssetRequest::colNameIsSet() const
{
    return m_Col_nameIsSet;
}

void BcMintAssetRequest::unsetCol_name()
{
    m_Col_nameIsSet = false;
}

utility::string_t BcMintAssetRequest::getPayer() const
{
    return m_Payer;
}


void BcMintAssetRequest::setPayer(utility::string_t value)
{
    m_Payer = value;
    
}
utility::string_t BcMintAssetRequest::getPayerPublicKey() const
{
    return m_Payer_public_key;
}


void BcMintAssetRequest::setPayerPublicKey(utility::string_t value)
{
    m_Payer_public_key = value;
    
}
}
}
}
}

