/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcCreateWhitelistDaoProposal.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcCreateWhitelistDaoProposal::BcCreateWhitelistDaoProposal()
{
    m_Quantity = utility::conversions::to_string_t("");
    m_QuantityIsSet = false;
    m_Proposer = utility::conversions::to_string_t("");
    m_ProposerIsSet = false;
    m_Vote_start = utility::conversions::to_string_t("");
    m_Vote_startIsSet = false;
    m_Dao_id = utility::conversions::to_string_t("");
    m_Dao_idIsSet = false;
    m_Dao_owner = utility::conversions::to_string_t("");
    m_Dao_ownerIsSet = false;
    m_Vote_end = utility::conversions::to_string_t("");
    m_Vote_endIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Proposer_prv_key = utility::conversions::to_string_t("");
    m_Proposer_prv_keyIsSet = false;
}

BcCreateWhitelistDaoProposal::~BcCreateWhitelistDaoProposal()
{
}

void BcCreateWhitelistDaoProposal::validate()
{
    // TODO: implement validation
}

web::json::value BcCreateWhitelistDaoProposal::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t("quantity")] = ModelBase::toJson(m_Quantity);
    }
    if(m_ProposerIsSet)
    {
        val[utility::conversions::to_string_t("proposer")] = ModelBase::toJson(m_Proposer);
    }
    if(m_Vote_startIsSet)
    {
        val[utility::conversions::to_string_t("vote_start")] = ModelBase::toJson(m_Vote_start);
    }
    if(m_Dao_idIsSet)
    {
        val[utility::conversions::to_string_t("dao_id")] = ModelBase::toJson(m_Dao_id);
    }
    if(m_Dao_ownerIsSet)
    {
        val[utility::conversions::to_string_t("dao_owner")] = ModelBase::toJson(m_Dao_owner);
    }
    if(m_Vote_endIsSet)
    {
        val[utility::conversions::to_string_t("vote_end")] = ModelBase::toJson(m_Vote_end);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_Proposer_prv_keyIsSet)
    {
        val[utility::conversions::to_string_t("proposer_prv_key")] = ModelBase::toJson(m_Proposer_prv_key);
    }

    return val;
}

void BcCreateWhitelistDaoProposal::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("quantity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quantity")];
        if(!fieldValue.is_null())
        {
            setQuantity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proposer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposer")];
        if(!fieldValue.is_null())
        {
            setProposer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_start")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_start")];
        if(!fieldValue.is_null())
        {
            setVoteStart(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_id")];
        if(!fieldValue.is_null())
        {
            setDaoId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dao_owner")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dao_owner")];
        if(!fieldValue.is_null())
        {
            setDaoOwner(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vote_end")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("vote_end")];
        if(!fieldValue.is_null())
        {
            setVoteEnd(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user")];
        if(!fieldValue.is_null())
        {
            setUser(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proposer_prv_key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("proposer_prv_key")];
        if(!fieldValue.is_null())
        {
            setProposerPrvKey(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcCreateWhitelistDaoProposal::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantity"), m_Quantity));
        
    }
    if(m_ProposerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposer"), m_Proposer));
        
    }
    if(m_Vote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_start"), m_Vote_start));
        
    }
    if(m_Dao_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_id"), m_Dao_id));
        
    }
    if(m_Dao_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dao_owner"), m_Dao_owner));
        
    }
    if(m_Vote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vote_end"), m_Vote_end));
        
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
        
    }
    if(m_Proposer_prv_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proposer_prv_key"), m_Proposer_prv_key));
        
    }
}

void BcCreateWhitelistDaoProposal::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("quantity")))
    {
        setQuantity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proposer")))
    {
        setProposer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_start")))
    {
        setVoteStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_start"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_id")))
    {
        setDaoId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dao_owner")))
    {
        setDaoOwner(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dao_owner"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vote_end")))
    {
        setVoteEnd(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vote_end"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        setUser(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proposer_prv_key")))
    {
        setProposerPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("proposer_prv_key"))));
    }
}

utility::string_t BcCreateWhitelistDaoProposal::getQuantity() const
{
    return m_Quantity;
}


void BcCreateWhitelistDaoProposal::setQuantity(utility::string_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}
bool BcCreateWhitelistDaoProposal::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void BcCreateWhitelistDaoProposal::unsetQuantity()
{
    m_QuantityIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getProposer() const
{
    return m_Proposer;
}


void BcCreateWhitelistDaoProposal::setProposer(utility::string_t value)
{
    m_Proposer = value;
    m_ProposerIsSet = true;
}
bool BcCreateWhitelistDaoProposal::proposerIsSet() const
{
    return m_ProposerIsSet;
}

void BcCreateWhitelistDaoProposal::unsetProposer()
{
    m_ProposerIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getVoteStart() const
{
    return m_Vote_start;
}


void BcCreateWhitelistDaoProposal::setVoteStart(utility::string_t value)
{
    m_Vote_start = value;
    m_Vote_startIsSet = true;
}
bool BcCreateWhitelistDaoProposal::voteStartIsSet() const
{
    return m_Vote_startIsSet;
}

void BcCreateWhitelistDaoProposal::unsetVote_start()
{
    m_Vote_startIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getDaoId() const
{
    return m_Dao_id;
}


void BcCreateWhitelistDaoProposal::setDaoId(utility::string_t value)
{
    m_Dao_id = value;
    m_Dao_idIsSet = true;
}
bool BcCreateWhitelistDaoProposal::daoIdIsSet() const
{
    return m_Dao_idIsSet;
}

void BcCreateWhitelistDaoProposal::unsetDao_id()
{
    m_Dao_idIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getDaoOwner() const
{
    return m_Dao_owner;
}


void BcCreateWhitelistDaoProposal::setDaoOwner(utility::string_t value)
{
    m_Dao_owner = value;
    m_Dao_ownerIsSet = true;
}
bool BcCreateWhitelistDaoProposal::daoOwnerIsSet() const
{
    return m_Dao_ownerIsSet;
}

void BcCreateWhitelistDaoProposal::unsetDao_owner()
{
    m_Dao_ownerIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getVoteEnd() const
{
    return m_Vote_end;
}


void BcCreateWhitelistDaoProposal::setVoteEnd(utility::string_t value)
{
    m_Vote_end = value;
    m_Vote_endIsSet = true;
}
bool BcCreateWhitelistDaoProposal::voteEndIsSet() const
{
    return m_Vote_endIsSet;
}

void BcCreateWhitelistDaoProposal::unsetVote_end()
{
    m_Vote_endIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getUser() const
{
    return m_User;
}


void BcCreateWhitelistDaoProposal::setUser(utility::string_t value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool BcCreateWhitelistDaoProposal::userIsSet() const
{
    return m_UserIsSet;
}

void BcCreateWhitelistDaoProposal::unsetUser()
{
    m_UserIsSet = false;
}

utility::string_t BcCreateWhitelistDaoProposal::getProposerPrvKey() const
{
    return m_Proposer_prv_key;
}


void BcCreateWhitelistDaoProposal::setProposerPrvKey(utility::string_t value)
{
    m_Proposer_prv_key = value;
    m_Proposer_prv_keyIsSet = true;
}
bool BcCreateWhitelistDaoProposal::proposerPrvKeyIsSet() const
{
    return m_Proposer_prv_keyIsSet;
}

void BcCreateWhitelistDaoProposal::unsetProposer_prv_key()
{
    m_Proposer_prv_keyIsSet = false;
}

}
}
}
}

