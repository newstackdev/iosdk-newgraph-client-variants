/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcKeyPairCreateResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcKeyPairCreateResponse::BcKeyPairCreateResponse()
{
    m_Prv_key = utility::conversions::to_string_t("");
    m_Pub_key = utility::conversions::to_string_t("");
}

BcKeyPairCreateResponse::~BcKeyPairCreateResponse()
{
}

void BcKeyPairCreateResponse::validate()
{
    // TODO: implement validation
}

web::json::value BcKeyPairCreateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("prv_key")] = ModelBase::toJson(m_Prv_key);
    val[utility::conversions::to_string_t("pub_key")] = ModelBase::toJson(m_Pub_key);

    return val;
}

void BcKeyPairCreateResponse::fromJson(web::json::value& val)
{
    setPrvKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("prv_key")]));
    setPubKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("pub_key")]));
}

void BcKeyPairCreateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prv_key"), m_Prv_key));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pub_key"), m_Pub_key));
}

void BcKeyPairCreateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setPrvKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prv_key"))));
    setPubKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pub_key"))));
}

utility::string_t BcKeyPairCreateResponse::getPrvKey() const
{
    return m_Prv_key;
}


void BcKeyPairCreateResponse::setPrvKey(utility::string_t value)
{
    m_Prv_key = value;
    
}
utility::string_t BcKeyPairCreateResponse::getPubKey() const
{
    return m_Pub_key;
}


void BcKeyPairCreateResponse::setPubKey(utility::string_t value)
{
    m_Pub_key = value;
    
}
}
}
}
}

