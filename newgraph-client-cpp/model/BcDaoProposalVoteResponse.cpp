/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcDaoProposalVoteResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcDaoProposalVoteResponse::BcDaoProposalVoteResponse()
{
    m_DaoId = utility::conversions::to_string_t("");
    m_DaoIdIsSet = false;
    m_More = false;
    m_MoreIsSet = false;
    m_Next_key = utility::conversions::to_string_t("");
    m_Next_keyIsSet = false;
    m_RowsIsSet = false;
}

BcDaoProposalVoteResponse::~BcDaoProposalVoteResponse()
{
}

void BcDaoProposalVoteResponse::validate()
{
    // TODO: implement validation
}

web::json::value BcDaoProposalVoteResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DaoIdIsSet)
    {
        val[utility::conversions::to_string_t("daoId")] = ModelBase::toJson(m_DaoId);
    }
    if(m_MoreIsSet)
    {
        val[utility::conversions::to_string_t("more")] = ModelBase::toJson(m_More);
    }
    if(m_Next_keyIsSet)
    {
        val[utility::conversions::to_string_t("next_key")] = ModelBase::toJson(m_Next_key);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Rows )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("rows")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void BcDaoProposalVoteResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("daoId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("daoId")];
        if(!fieldValue.is_null())
        {
            setDaoId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("more")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("more")];
        if(!fieldValue.is_null())
        {
            setMore(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("next_key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("next_key")];
        if(!fieldValue.is_null())
        {
            setNextKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Rows.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("rows")))
        {
        for( auto& item : val[utility::conversions::to_string_t("rows")].as_array() )
        {
            if(item.is_null())
            {
                m_Rows.push_back( std::shared_ptr<BcDaoProposalVoteResponse_rows>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcDaoProposalVoteResponse_rows> newItem(new BcDaoProposalVoteResponse_rows());
                newItem->fromJson(item);
                m_Rows.push_back( newItem );
            }
        }
        }
    }
}

void BcDaoProposalVoteResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DaoIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("daoId"), m_DaoId));
        
    }
    if(m_MoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("more"), m_More));
    }
    if(m_Next_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("next_key"), m_Next_key));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Rows )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rows"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void BcDaoProposalVoteResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("daoId")))
    {
        setDaoId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("daoId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("more")))
    {
        setMore(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("more"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("next_key")))
    {
        setNextKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("next_key"))));
    }
    {
        m_Rows.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("rows")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rows"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Rows.push_back( std::shared_ptr<BcDaoProposalVoteResponse_rows>(nullptr) );
            }
            else
            {
                std::shared_ptr<BcDaoProposalVoteResponse_rows> newItem(new BcDaoProposalVoteResponse_rows());
                newItem->fromJson(item);
                m_Rows.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t BcDaoProposalVoteResponse::getDaoId() const
{
    return m_DaoId;
}


void BcDaoProposalVoteResponse::setDaoId(utility::string_t value)
{
    m_DaoId = value;
    m_DaoIdIsSet = true;
}
bool BcDaoProposalVoteResponse::daoIdIsSet() const
{
    return m_DaoIdIsSet;
}

void BcDaoProposalVoteResponse::unsetDaoId()
{
    m_DaoIdIsSet = false;
}

bool BcDaoProposalVoteResponse::isMore() const
{
    return m_More;
}


void BcDaoProposalVoteResponse::setMore(bool value)
{
    m_More = value;
    m_MoreIsSet = true;
}
bool BcDaoProposalVoteResponse::moreIsSet() const
{
    return m_MoreIsSet;
}

void BcDaoProposalVoteResponse::unsetMore()
{
    m_MoreIsSet = false;
}

utility::string_t BcDaoProposalVoteResponse::getNextKey() const
{
    return m_Next_key;
}


void BcDaoProposalVoteResponse::setNextKey(utility::string_t value)
{
    m_Next_key = value;
    m_Next_keyIsSet = true;
}
bool BcDaoProposalVoteResponse::nextKeyIsSet() const
{
    return m_Next_keyIsSet;
}

void BcDaoProposalVoteResponse::unsetNext_key()
{
    m_Next_keyIsSet = false;
}

std::vector<std::shared_ptr<BcDaoProposalVoteResponse_rows>>& BcDaoProposalVoteResponse::getRows()
{
    return m_Rows;
}

void BcDaoProposalVoteResponse::setRows(std::vector<std::shared_ptr<BcDaoProposalVoteResponse_rows>> value)
{
    m_Rows = value;
    m_RowsIsSet = true;
}
bool BcDaoProposalVoteResponse::rowsIsSet() const
{
    return m_RowsIsSet;
}

void BcDaoProposalVoteResponse::unsetRows()
{
    m_RowsIsSet = false;
}

}
}
}
}

