/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserInvitationPagedListReadPublicResponse_value.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserInvitationPagedListReadPublicResponse_value::UserInvitationPagedListReadPublicResponse_value()
{
    m_NewcoinTicker = utility::conversions::to_string_t("");
    m_NewcoinTickerIsSet = false;
    m_Youtube = utility::conversions::to_string_t("");
    m_YoutubeIsSet = false;
    m_Powered = 0.0;
    m_PoweredIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_NewcoinAccTx = utility::conversions::to_string_t("");
    m_NewcoinAccTxIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_NewcoinPoolId = utility::conversions::to_string_t("");
    m_NewcoinPoolIdIsSet = false;
    m_Tumblr = utility::conversions::to_string_t("");
    m_TumblrIsSet = false;
    m_AspectRatio = 0.0;
    m_AspectRatioIsSet = false;
    m_Instagram = utility::conversions::to_string_t("");
    m_InstagramIsSet = false;
    m_Medium = utility::conversions::to_string_t("");
    m_MediumIsSet = false;
    m_NewcoinActivePublicKey = utility::conversions::to_string_t("");
    m_NewcoinActivePublicKeyIsSet = false;
    m_Soundcloud = utility::conversions::to_string_t("");
    m_SoundcloudIsSet = false;
    m_NewcoinPublicKey = utility::conversions::to_string_t("");
    m_NewcoinPublicKeyIsSet = false;
    m_Powering = 0.0;
    m_PoweringIsSet = false;
    m_Snapchat = utility::conversions::to_string_t("");
    m_SnapchatIsSet = false;
    m_Apple = utility::conversions::to_string_t("");
    m_AppleIsSet = false;
    m_Twitter = utility::conversions::to_string_t("");
    m_TwitterIsSet = false;
    m_NewcoinOwnerPublicKey = utility::conversions::to_string_t("");
    m_NewcoinOwnerPublicKeyIsSet = false;
    m_Tiktok = utility::conversions::to_string_t("");
    m_TiktokIsSet = false;
    m_Reddit = utility::conversions::to_string_t("");
    m_RedditIsSet = false;
    m_YoutubeId = utility::conversions::to_string_t("");
    m_YoutubeIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_NewcoinPoolStake = 0.0;
    m_NewcoinPoolStakeIsSet = false;
    m_ContentType = utility::conversions::to_string_t("");
    m_ContentTypeIsSet = false;
    m_Signal = utility::conversions::to_string_t("");
    m_SignalIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
    m_NewcoinPublisherPublicKey = utility::conversions::to_string_t("");
    m_NewcoinPublisherPublicKeyIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_Created = utility::conversions::to_string_t("");
    m_CreatedIsSet = false;
    m_InvitationIsSet = false;
    m_Spotify = utility::conversions::to_string_t("");
    m_SpotifyIsSet = false;
    m_Facebook = utility::conversions::to_string_t("");
    m_FacebookIsSet = false;
    m_FacebookId = utility::conversions::to_string_t("");
    m_FacebookIdIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Telegram = utility::conversions::to_string_t("");
    m_TelegramIsSet = false;
    m_Pinterest = utility::conversions::to_string_t("");
    m_PinterestIsSet = false;
    m_VerifiedSocialIdsIsSet = false;
    m_NewcoinPoolTx = utility::conversions::to_string_t("");
    m_NewcoinPoolTxIsSet = false;
    m_License = utility::conversions::to_string_t("");
    m_LicenseIsSet = false;
    m_ContentUrl = utility::conversions::to_string_t("");
    m_ContentUrlIsSet = false;
    m_Discord = utility::conversions::to_string_t("");
    m_DiscordIsSet = false;
    m_BlurHash = utility::conversions::to_string_t("");
    m_BlurHashIsSet = false;
    m_ConsentEmail = utility::conversions::to_string_t("");
    m_ConsentEmailIsSet = false;
    m_Updated = utility::conversions::to_string_t("");
    m_UpdatedIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

UserInvitationPagedListReadPublicResponse_value::~UserInvitationPagedListReadPublicResponse_value()
{
}

void UserInvitationPagedListReadPublicResponse_value::validate()
{
    // TODO: implement validation
}

web::json::value UserInvitationPagedListReadPublicResponse_value::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NewcoinTickerIsSet)
    {
        val[utility::conversions::to_string_t("newcoinTicker")] = ModelBase::toJson(m_NewcoinTicker);
    }
    if(m_YoutubeIsSet)
    {
        val[utility::conversions::to_string_t("youtube")] = ModelBase::toJson(m_Youtube);
    }
    if(m_PoweredIsSet)
    {
        val[utility::conversions::to_string_t("powered")] = ModelBase::toJson(m_Powered);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_NewcoinAccTxIsSet)
    {
        val[utility::conversions::to_string_t("newcoinAccTx")] = ModelBase::toJson(m_NewcoinAccTx);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NewcoinPoolIdIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolId")] = ModelBase::toJson(m_NewcoinPoolId);
    }
    if(m_TumblrIsSet)
    {
        val[utility::conversions::to_string_t("tumblr")] = ModelBase::toJson(m_Tumblr);
    }
    if(m_AspectRatioIsSet)
    {
        val[utility::conversions::to_string_t("aspectRatio")] = ModelBase::toJson(m_AspectRatio);
    }
    if(m_InstagramIsSet)
    {
        val[utility::conversions::to_string_t("instagram")] = ModelBase::toJson(m_Instagram);
    }
    if(m_MediumIsSet)
    {
        val[utility::conversions::to_string_t("medium")] = ModelBase::toJson(m_Medium);
    }
    if(m_NewcoinActivePublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinActivePublicKey")] = ModelBase::toJson(m_NewcoinActivePublicKey);
    }
    if(m_SoundcloudIsSet)
    {
        val[utility::conversions::to_string_t("soundcloud")] = ModelBase::toJson(m_Soundcloud);
    }
    if(m_NewcoinPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPublicKey")] = ModelBase::toJson(m_NewcoinPublicKey);
    }
    if(m_PoweringIsSet)
    {
        val[utility::conversions::to_string_t("powering")] = ModelBase::toJson(m_Powering);
    }
    if(m_SnapchatIsSet)
    {
        val[utility::conversions::to_string_t("snapchat")] = ModelBase::toJson(m_Snapchat);
    }
    if(m_AppleIsSet)
    {
        val[utility::conversions::to_string_t("apple")] = ModelBase::toJson(m_Apple);
    }
    if(m_TwitterIsSet)
    {
        val[utility::conversions::to_string_t("twitter")] = ModelBase::toJson(m_Twitter);
    }
    if(m_NewcoinOwnerPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinOwnerPublicKey")] = ModelBase::toJson(m_NewcoinOwnerPublicKey);
    }
    if(m_TiktokIsSet)
    {
        val[utility::conversions::to_string_t("tiktok")] = ModelBase::toJson(m_Tiktok);
    }
    if(m_RedditIsSet)
    {
        val[utility::conversions::to_string_t("reddit")] = ModelBase::toJson(m_Reddit);
    }
    if(m_YoutubeIdIsSet)
    {
        val[utility::conversions::to_string_t("youtubeId")] = ModelBase::toJson(m_YoutubeId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NewcoinPoolStakeIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolStake")] = ModelBase::toJson(m_NewcoinPoolStake);
    }
    if(m_ContentTypeIsSet)
    {
        val[utility::conversions::to_string_t("contentType")] = ModelBase::toJson(m_ContentType);
    }
    if(m_SignalIsSet)
    {
        val[utility::conversions::to_string_t("signal")] = ModelBase::toJson(m_Signal);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }
    if(m_NewcoinPublisherPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPublisherPublicKey")] = ModelBase::toJson(m_NewcoinPublisherPublicKey);
    }
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t("website")] = ModelBase::toJson(m_Website);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_InvitationIsSet)
    {
        val[utility::conversions::to_string_t("invitation")] = ModelBase::toJson(m_Invitation);
    }
    if(m_SpotifyIsSet)
    {
        val[utility::conversions::to_string_t("spotify")] = ModelBase::toJson(m_Spotify);
    }
    if(m_FacebookIsSet)
    {
        val[utility::conversions::to_string_t("facebook")] = ModelBase::toJson(m_Facebook);
    }
    if(m_FacebookIdIsSet)
    {
        val[utility::conversions::to_string_t("facebookId")] = ModelBase::toJson(m_FacebookId);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_TelegramIsSet)
    {
        val[utility::conversions::to_string_t("telegram")] = ModelBase::toJson(m_Telegram);
    }
    if(m_PinterestIsSet)
    {
        val[utility::conversions::to_string_t("pinterest")] = ModelBase::toJson(m_Pinterest);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_VerifiedSocialIds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("verifiedSocialIds")] = web::json::value::array(jsonArray);
        }
    }
    if(m_NewcoinPoolTxIsSet)
    {
        val[utility::conversions::to_string_t("newcoinPoolTx")] = ModelBase::toJson(m_NewcoinPoolTx);
    }
    if(m_LicenseIsSet)
    {
        val[utility::conversions::to_string_t("license")] = ModelBase::toJson(m_License);
    }
    if(m_ContentUrlIsSet)
    {
        val[utility::conversions::to_string_t("contentUrl")] = ModelBase::toJson(m_ContentUrl);
    }
    if(m_DiscordIsSet)
    {
        val[utility::conversions::to_string_t("discord")] = ModelBase::toJson(m_Discord);
    }
    if(m_BlurHashIsSet)
    {
        val[utility::conversions::to_string_t("blurHash")] = ModelBase::toJson(m_BlurHash);
    }
    if(m_ConsentEmailIsSet)
    {
        val[utility::conversions::to_string_t("consentEmail")] = ModelBase::toJson(m_ConsentEmail);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t("updated")] = ModelBase::toJson(m_Updated);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void UserInvitationPagedListReadPublicResponse_value::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("newcoinTicker")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinTicker")];
        if(!fieldValue.is_null())
        {
            setNewcoinTicker(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("youtube")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("youtube")];
        if(!fieldValue.is_null())
        {
            setYoutube(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("powered")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("powered")];
        if(!fieldValue.is_null())
        {
            setPowered(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinAccTx")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinAccTx")];
        if(!fieldValue.is_null())
        {
            setNewcoinAccTx(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("description")];
        if(!fieldValue.is_null())
        {
            setDescription(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolId")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tumblr")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tumblr")];
        if(!fieldValue.is_null())
        {
            setTumblr(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aspectRatio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("aspectRatio")];
        if(!fieldValue.is_null())
        {
            setAspectRatio(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instagram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("instagram")];
        if(!fieldValue.is_null())
        {
            setInstagram(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("medium")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("medium")];
        if(!fieldValue.is_null())
        {
            setMedium(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinActivePublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinActivePublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinActivePublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soundcloud")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("soundcloud")];
        if(!fieldValue.is_null())
        {
            setSoundcloud(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("powering")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("powering")];
        if(!fieldValue.is_null())
        {
            setPowering(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("snapchat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("snapchat")];
        if(!fieldValue.is_null())
        {
            setSnapchat(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("apple")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("apple")];
        if(!fieldValue.is_null())
        {
            setApple(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("twitter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("twitter")];
        if(!fieldValue.is_null())
        {
            setTwitter(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinOwnerPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinOwnerPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinOwnerPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tiktok")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tiktok")];
        if(!fieldValue.is_null())
        {
            setTiktok(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reddit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reddit")];
        if(!fieldValue.is_null())
        {
            setReddit(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("youtubeId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("youtubeId")];
        if(!fieldValue.is_null())
        {
            setYoutubeId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolStake")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolStake")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolStake(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contentType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contentType")];
        if(!fieldValue.is_null())
        {
            setContentType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signal")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("signal")];
        if(!fieldValue.is_null())
        {
            setSignal(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPublisherPublicKey")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPublisherPublicKey")];
        if(!fieldValue.is_null())
        {
            setNewcoinPublisherPublicKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("website")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("website")];
        if(!fieldValue.is_null())
        {
            setWebsite(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created")];
        if(!fieldValue.is_null())
        {
            setCreated(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invitation")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("invitation")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserInvitationPagedListReadPublicResponse_invitation> newItem(new UserInvitationPagedListReadPublicResponse_invitation());
            newItem->fromJson(fieldValue);
            setInvitation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spotify")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("spotify")];
        if(!fieldValue.is_null())
        {
            setSpotify(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("facebook")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("facebook")];
        if(!fieldValue.is_null())
        {
            setFacebook(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("facebookId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("facebookId")];
        if(!fieldValue.is_null())
        {
            setFacebookId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fullName")];
        if(!fieldValue.is_null())
        {
            setFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("telegram")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("telegram")];
        if(!fieldValue.is_null())
        {
            setTelegram(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pinterest")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pinterest")];
        if(!fieldValue.is_null())
        {
            setPinterest(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_VerifiedSocialIds.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("verifiedSocialIds")))
        {
        for( auto& item : val[utility::conversions::to_string_t("verifiedSocialIds")].as_array() )
        {
            m_VerifiedSocialIds.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newcoinPoolTx")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("newcoinPoolTx")];
        if(!fieldValue.is_null())
        {
            setNewcoinPoolTx(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("license")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("license")];
        if(!fieldValue.is_null())
        {
            setLicense(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contentUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contentUrl")];
        if(!fieldValue.is_null())
        {
            setContentUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("discord")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("discord")];
        if(!fieldValue.is_null())
        {
            setDiscord(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blurHash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("blurHash")];
        if(!fieldValue.is_null())
        {
            setBlurHash(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consentEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("consentEmail")];
        if(!fieldValue.is_null())
        {
            setConsentEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated")];
        if(!fieldValue.is_null())
        {
            setUpdated(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UserInvitationPagedListReadPublicResponse_value::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NewcoinTickerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinTicker"), m_NewcoinTicker));
        
    }
    if(m_YoutubeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("youtube"), m_Youtube));
        
    }
    if(m_PoweredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("powered"), m_Powered));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
        
    }
    if(m_NewcoinAccTxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinAccTx"), m_NewcoinAccTx));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
        
    }
    if(m_NewcoinPoolIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolId"), m_NewcoinPoolId));
        
    }
    if(m_TumblrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tumblr"), m_Tumblr));
        
    }
    if(m_AspectRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aspectRatio"), m_AspectRatio));
    }
    if(m_InstagramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instagram"), m_Instagram));
        
    }
    if(m_MediumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("medium"), m_Medium));
        
    }
    if(m_NewcoinActivePublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinActivePublicKey"), m_NewcoinActivePublicKey));
        
    }
    if(m_SoundcloudIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("soundcloud"), m_Soundcloud));
        
    }
    if(m_NewcoinPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPublicKey"), m_NewcoinPublicKey));
        
    }
    if(m_PoweringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("powering"), m_Powering));
    }
    if(m_SnapchatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("snapchat"), m_Snapchat));
        
    }
    if(m_AppleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("apple"), m_Apple));
        
    }
    if(m_TwitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("twitter"), m_Twitter));
        
    }
    if(m_NewcoinOwnerPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinOwnerPublicKey"), m_NewcoinOwnerPublicKey));
        
    }
    if(m_TiktokIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tiktok"), m_Tiktok));
        
    }
    if(m_RedditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reddit"), m_Reddit));
        
    }
    if(m_YoutubeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("youtubeId"), m_YoutubeId));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    if(m_NewcoinPoolStakeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolStake"), m_NewcoinPoolStake));
    }
    if(m_ContentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentType"), m_ContentType));
        
    }
    if(m_SignalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signal"), m_Signal));
        
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
    if(m_NewcoinPublisherPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPublisherPublicKey"), m_NewcoinPublisherPublicKey));
        
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("website"), m_Website));
        
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
        
    }
    if(m_InvitationIsSet)
    {
        if (m_Invitation.get())
        {
            m_Invitation->toMultipart(multipart, utility::conversions::to_string_t("invitation."));
        }
        
    }
    if(m_SpotifyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spotify"), m_Spotify));
        
    }
    if(m_FacebookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("facebook"), m_Facebook));
        
    }
    if(m_FacebookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("facebookId"), m_FacebookId));
        
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
        
    }
    if(m_TelegramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("telegram"), m_Telegram));
        
    }
    if(m_PinterestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pinterest"), m_Pinterest));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_VerifiedSocialIds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("verifiedSocialIds"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_NewcoinPoolTxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newcoinPoolTx"), m_NewcoinPoolTx));
        
    }
    if(m_LicenseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("license"), m_License));
        
    }
    if(m_ContentUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentUrl"), m_ContentUrl));
        
    }
    if(m_DiscordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("discord"), m_Discord));
        
    }
    if(m_BlurHashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blurHash"), m_BlurHash));
        
    }
    if(m_ConsentEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consentEmail"), m_ConsentEmail));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated"), m_Updated));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
        
    }
}

void UserInvitationPagedListReadPublicResponse_value::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("newcoinTicker")))
    {
        setNewcoinTicker(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinTicker"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("youtube")))
    {
        setYoutube(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("youtube"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("powered")))
    {
        setPowered(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("powered"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinAccTx")))
    {
        setNewcoinAccTx(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinAccTx"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolId")))
    {
        setNewcoinPoolId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tumblr")))
    {
        setTumblr(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tumblr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aspectRatio")))
    {
        setAspectRatio(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("aspectRatio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instagram")))
    {
        setInstagram(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instagram"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("medium")))
    {
        setMedium(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("medium"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinActivePublicKey")))
    {
        setNewcoinActivePublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinActivePublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soundcloud")))
    {
        setSoundcloud(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("soundcloud"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPublicKey")))
    {
        setNewcoinPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("powering")))
    {
        setPowering(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("powering"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("snapchat")))
    {
        setSnapchat(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("snapchat"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("apple")))
    {
        setApple(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("apple"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
    {
        setTwitter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("twitter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinOwnerPublicKey")))
    {
        setNewcoinOwnerPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinOwnerPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tiktok")))
    {
        setTiktok(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tiktok"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reddit")))
    {
        setReddit(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reddit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("youtubeId")))
    {
        setYoutubeId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("youtubeId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolStake")))
    {
        setNewcoinPoolStake(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolStake"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contentType")))
    {
        setContentType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signal")))
    {
        setSignal(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signal"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPublisherPublicKey")))
    {
        setNewcoinPublisherPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPublisherPublicKey"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("website")))
    {
        setWebsite(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("website"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        setCreated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invitation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("invitation")))
        {
            std::shared_ptr<UserInvitationPagedListReadPublicResponse_invitation> newItem(new UserInvitationPagedListReadPublicResponse_invitation());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("invitation."));
            setInvitation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spotify")))
    {
        setSpotify(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("spotify"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("facebook")))
    {
        setFacebook(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("facebook"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("facebookId")))
    {
        setFacebookId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("facebookId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("telegram")))
    {
        setTelegram(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("telegram"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pinterest")))
    {
        setPinterest(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pinterest"))));
    }
    {
        m_VerifiedSocialIds.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("verifiedSocialIds")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("verifiedSocialIds"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_VerifiedSocialIds.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newcoinPoolTx")))
    {
        setNewcoinPoolTx(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("newcoinPoolTx"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("license")))
    {
        setLicense(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("license"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contentUrl")))
    {
        setContentUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("discord")))
    {
        setDiscord(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("discord"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blurHash")))
    {
        setBlurHash(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("blurHash"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consentEmail")))
    {
        setConsentEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("consentEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated")))
    {
        setUpdated(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinTicker() const
{
    return m_NewcoinTicker;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinTicker(utility::string_t value)
{
    m_NewcoinTicker = value;
    m_NewcoinTickerIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinTickerIsSet() const
{
    return m_NewcoinTickerIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinTicker()
{
    m_NewcoinTickerIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getYoutube() const
{
    return m_Youtube;
}


void UserInvitationPagedListReadPublicResponse_value::setYoutube(utility::string_t value)
{
    m_Youtube = value;
    m_YoutubeIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::youtubeIsSet() const
{
    return m_YoutubeIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetYoutube()
{
    m_YoutubeIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getPowered() const
{
    return m_Powered;
}


void UserInvitationPagedListReadPublicResponse_value::setPowered(double value)
{
    m_Powered = value;
    m_PoweredIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::poweredIsSet() const
{
    return m_PoweredIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetPowered()
{
    m_PoweredIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getDisplayName() const
{
    return m_DisplayName;
}


void UserInvitationPagedListReadPublicResponse_value::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinAccTx() const
{
    return m_NewcoinAccTx;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinAccTx(utility::string_t value)
{
    m_NewcoinAccTx = value;
    m_NewcoinAccTxIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinAccTxIsSet() const
{
    return m_NewcoinAccTxIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinAccTx()
{
    m_NewcoinAccTxIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getLatitude() const
{
    return m_Latitude;
}


void UserInvitationPagedListReadPublicResponse_value::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getDescription() const
{
    return m_Description;
}


void UserInvitationPagedListReadPublicResponse_value::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinPoolId() const
{
    return m_NewcoinPoolId;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinPoolId(utility::string_t value)
{
    m_NewcoinPoolId = value;
    m_NewcoinPoolIdIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinPoolIdIsSet() const
{
    return m_NewcoinPoolIdIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinPoolId()
{
    m_NewcoinPoolIdIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getTumblr() const
{
    return m_Tumblr;
}


void UserInvitationPagedListReadPublicResponse_value::setTumblr(utility::string_t value)
{
    m_Tumblr = value;
    m_TumblrIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::tumblrIsSet() const
{
    return m_TumblrIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetTumblr()
{
    m_TumblrIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getAspectRatio() const
{
    return m_AspectRatio;
}


void UserInvitationPagedListReadPublicResponse_value::setAspectRatio(double value)
{
    m_AspectRatio = value;
    m_AspectRatioIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::aspectRatioIsSet() const
{
    return m_AspectRatioIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetAspectRatio()
{
    m_AspectRatioIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getInstagram() const
{
    return m_Instagram;
}


void UserInvitationPagedListReadPublicResponse_value::setInstagram(utility::string_t value)
{
    m_Instagram = value;
    m_InstagramIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::instagramIsSet() const
{
    return m_InstagramIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetInstagram()
{
    m_InstagramIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getMedium() const
{
    return m_Medium;
}


void UserInvitationPagedListReadPublicResponse_value::setMedium(utility::string_t value)
{
    m_Medium = value;
    m_MediumIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::mediumIsSet() const
{
    return m_MediumIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetMedium()
{
    m_MediumIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinActivePublicKey() const
{
    return m_NewcoinActivePublicKey;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinActivePublicKey(utility::string_t value)
{
    m_NewcoinActivePublicKey = value;
    m_NewcoinActivePublicKeyIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinActivePublicKeyIsSet() const
{
    return m_NewcoinActivePublicKeyIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinActivePublicKey()
{
    m_NewcoinActivePublicKeyIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getSoundcloud() const
{
    return m_Soundcloud;
}


void UserInvitationPagedListReadPublicResponse_value::setSoundcloud(utility::string_t value)
{
    m_Soundcloud = value;
    m_SoundcloudIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::soundcloudIsSet() const
{
    return m_SoundcloudIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetSoundcloud()
{
    m_SoundcloudIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinPublicKey() const
{
    return m_NewcoinPublicKey;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinPublicKey(utility::string_t value)
{
    m_NewcoinPublicKey = value;
    m_NewcoinPublicKeyIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinPublicKeyIsSet() const
{
    return m_NewcoinPublicKeyIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinPublicKey()
{
    m_NewcoinPublicKeyIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getPowering() const
{
    return m_Powering;
}


void UserInvitationPagedListReadPublicResponse_value::setPowering(double value)
{
    m_Powering = value;
    m_PoweringIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::poweringIsSet() const
{
    return m_PoweringIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetPowering()
{
    m_PoweringIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getSnapchat() const
{
    return m_Snapchat;
}


void UserInvitationPagedListReadPublicResponse_value::setSnapchat(utility::string_t value)
{
    m_Snapchat = value;
    m_SnapchatIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::snapchatIsSet() const
{
    return m_SnapchatIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetSnapchat()
{
    m_SnapchatIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getApple() const
{
    return m_Apple;
}


void UserInvitationPagedListReadPublicResponse_value::setApple(utility::string_t value)
{
    m_Apple = value;
    m_AppleIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::appleIsSet() const
{
    return m_AppleIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetApple()
{
    m_AppleIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getTwitter() const
{
    return m_Twitter;
}


void UserInvitationPagedListReadPublicResponse_value::setTwitter(utility::string_t value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::twitterIsSet() const
{
    return m_TwitterIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetTwitter()
{
    m_TwitterIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinOwnerPublicKey() const
{
    return m_NewcoinOwnerPublicKey;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinOwnerPublicKey(utility::string_t value)
{
    m_NewcoinOwnerPublicKey = value;
    m_NewcoinOwnerPublicKeyIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinOwnerPublicKeyIsSet() const
{
    return m_NewcoinOwnerPublicKeyIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinOwnerPublicKey()
{
    m_NewcoinOwnerPublicKeyIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getTiktok() const
{
    return m_Tiktok;
}


void UserInvitationPagedListReadPublicResponse_value::setTiktok(utility::string_t value)
{
    m_Tiktok = value;
    m_TiktokIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::tiktokIsSet() const
{
    return m_TiktokIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetTiktok()
{
    m_TiktokIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getReddit() const
{
    return m_Reddit;
}


void UserInvitationPagedListReadPublicResponse_value::setReddit(utility::string_t value)
{
    m_Reddit = value;
    m_RedditIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::redditIsSet() const
{
    return m_RedditIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetReddit()
{
    m_RedditIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getYoutubeId() const
{
    return m_YoutubeId;
}


void UserInvitationPagedListReadPublicResponse_value::setYoutubeId(utility::string_t value)
{
    m_YoutubeId = value;
    m_YoutubeIdIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::youtubeIdIsSet() const
{
    return m_YoutubeIdIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetYoutubeId()
{
    m_YoutubeIdIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getId() const
{
    return m_Id;
}


void UserInvitationPagedListReadPublicResponse_value::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::idIsSet() const
{
    return m_IdIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetId()
{
    m_IdIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getNewcoinPoolStake() const
{
    return m_NewcoinPoolStake;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinPoolStake(double value)
{
    m_NewcoinPoolStake = value;
    m_NewcoinPoolStakeIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinPoolStakeIsSet() const
{
    return m_NewcoinPoolStakeIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinPoolStake()
{
    m_NewcoinPoolStakeIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getContentType() const
{
    return m_ContentType;
}


void UserInvitationPagedListReadPublicResponse_value::setContentType(utility::string_t value)
{
    m_ContentType = value;
    m_ContentTypeIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::contentTypeIsSet() const
{
    return m_ContentTypeIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetContentType()
{
    m_ContentTypeIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getSignal() const
{
    return m_Signal;
}


void UserInvitationPagedListReadPublicResponse_value::setSignal(utility::string_t value)
{
    m_Signal = value;
    m_SignalIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::signalIsSet() const
{
    return m_SignalIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetSignal()
{
    m_SignalIsSet = false;
}

double UserInvitationPagedListReadPublicResponse_value::getLongitude() const
{
    return m_Longitude;
}


void UserInvitationPagedListReadPublicResponse_value::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinPublisherPublicKey() const
{
    return m_NewcoinPublisherPublicKey;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinPublisherPublicKey(utility::string_t value)
{
    m_NewcoinPublisherPublicKey = value;
    m_NewcoinPublisherPublicKeyIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinPublisherPublicKeyIsSet() const
{
    return m_NewcoinPublisherPublicKeyIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinPublisherPublicKey()
{
    m_NewcoinPublisherPublicKeyIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getWebsite() const
{
    return m_Website;
}


void UserInvitationPagedListReadPublicResponse_value::setWebsite(utility::string_t value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetWebsite()
{
    m_WebsiteIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getCreated() const
{
    return m_Created;
}


void UserInvitationPagedListReadPublicResponse_value::setCreated(utility::string_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::createdIsSet() const
{
    return m_CreatedIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetCreated()
{
    m_CreatedIsSet = false;
}

std::shared_ptr<UserInvitationPagedListReadPublicResponse_invitation> UserInvitationPagedListReadPublicResponse_value::getInvitation() const
{
    return m_Invitation;
}


void UserInvitationPagedListReadPublicResponse_value::setInvitation(std::shared_ptr<UserInvitationPagedListReadPublicResponse_invitation> value)
{
    m_Invitation = value;
    m_InvitationIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::invitationIsSet() const
{
    return m_InvitationIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetInvitation()
{
    m_InvitationIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getSpotify() const
{
    return m_Spotify;
}


void UserInvitationPagedListReadPublicResponse_value::setSpotify(utility::string_t value)
{
    m_Spotify = value;
    m_SpotifyIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::spotifyIsSet() const
{
    return m_SpotifyIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetSpotify()
{
    m_SpotifyIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getFacebook() const
{
    return m_Facebook;
}


void UserInvitationPagedListReadPublicResponse_value::setFacebook(utility::string_t value)
{
    m_Facebook = value;
    m_FacebookIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::facebookIsSet() const
{
    return m_FacebookIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetFacebook()
{
    m_FacebookIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getFacebookId() const
{
    return m_FacebookId;
}


void UserInvitationPagedListReadPublicResponse_value::setFacebookId(utility::string_t value)
{
    m_FacebookId = value;
    m_FacebookIdIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::facebookIdIsSet() const
{
    return m_FacebookIdIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetFacebookId()
{
    m_FacebookIdIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getFullName() const
{
    return m_FullName;
}


void UserInvitationPagedListReadPublicResponse_value::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getTelegram() const
{
    return m_Telegram;
}


void UserInvitationPagedListReadPublicResponse_value::setTelegram(utility::string_t value)
{
    m_Telegram = value;
    m_TelegramIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::telegramIsSet() const
{
    return m_TelegramIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetTelegram()
{
    m_TelegramIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getPinterest() const
{
    return m_Pinterest;
}


void UserInvitationPagedListReadPublicResponse_value::setPinterest(utility::string_t value)
{
    m_Pinterest = value;
    m_PinterestIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::pinterestIsSet() const
{
    return m_PinterestIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetPinterest()
{
    m_PinterestIsSet = false;
}

std::vector<utility::string_t>& UserInvitationPagedListReadPublicResponse_value::getVerifiedSocialIds()
{
    return m_VerifiedSocialIds;
}

void UserInvitationPagedListReadPublicResponse_value::setVerifiedSocialIds(std::vector<utility::string_t> value)
{
    m_VerifiedSocialIds = value;
    m_VerifiedSocialIdsIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::verifiedSocialIdsIsSet() const
{
    return m_VerifiedSocialIdsIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetVerifiedSocialIds()
{
    m_VerifiedSocialIdsIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getNewcoinPoolTx() const
{
    return m_NewcoinPoolTx;
}


void UserInvitationPagedListReadPublicResponse_value::setNewcoinPoolTx(utility::string_t value)
{
    m_NewcoinPoolTx = value;
    m_NewcoinPoolTxIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::newcoinPoolTxIsSet() const
{
    return m_NewcoinPoolTxIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetNewcoinPoolTx()
{
    m_NewcoinPoolTxIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getLicense() const
{
    return m_License;
}


void UserInvitationPagedListReadPublicResponse_value::setLicense(utility::string_t value)
{
    m_License = value;
    m_LicenseIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::licenseIsSet() const
{
    return m_LicenseIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetLicense()
{
    m_LicenseIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getContentUrl() const
{
    return m_ContentUrl;
}


void UserInvitationPagedListReadPublicResponse_value::setContentUrl(utility::string_t value)
{
    m_ContentUrl = value;
    m_ContentUrlIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::contentUrlIsSet() const
{
    return m_ContentUrlIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetContentUrl()
{
    m_ContentUrlIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getDiscord() const
{
    return m_Discord;
}


void UserInvitationPagedListReadPublicResponse_value::setDiscord(utility::string_t value)
{
    m_Discord = value;
    m_DiscordIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::discordIsSet() const
{
    return m_DiscordIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetDiscord()
{
    m_DiscordIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getBlurHash() const
{
    return m_BlurHash;
}


void UserInvitationPagedListReadPublicResponse_value::setBlurHash(utility::string_t value)
{
    m_BlurHash = value;
    m_BlurHashIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::blurHashIsSet() const
{
    return m_BlurHashIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetBlurHash()
{
    m_BlurHashIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getConsentEmail() const
{
    return m_ConsentEmail;
}


void UserInvitationPagedListReadPublicResponse_value::setConsentEmail(utility::string_t value)
{
    m_ConsentEmail = value;
    m_ConsentEmailIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::consentEmailIsSet() const
{
    return m_ConsentEmailIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetConsentEmail()
{
    m_ConsentEmailIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getUpdated() const
{
    return m_Updated;
}


void UserInvitationPagedListReadPublicResponse_value::setUpdated(utility::string_t value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

utility::string_t UserInvitationPagedListReadPublicResponse_value::getUsername() const
{
    return m_Username;
}


void UserInvitationPagedListReadPublicResponse_value::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool UserInvitationPagedListReadPublicResponse_value::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void UserInvitationPagedListReadPublicResponse_value::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

