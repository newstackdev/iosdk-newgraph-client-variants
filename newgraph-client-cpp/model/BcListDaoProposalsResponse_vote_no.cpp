/**
 * newgraph-api-eu-dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2022-10-04T15:34:01Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.27.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BcListDaoProposalsResponse_vote_no.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BcListDaoProposalsResponse_vote_no::BcListDaoProposalsResponse_vote_no()
{
    m_Quantity = utility::conversions::to_string_t("");
    m_QuantityIsSet = false;
    m_Contract = utility::conversions::to_string_t("");
    m_ContractIsSet = false;
}

BcListDaoProposalsResponse_vote_no::~BcListDaoProposalsResponse_vote_no()
{
}

void BcListDaoProposalsResponse_vote_no::validate()
{
    // TODO: implement validation
}

web::json::value BcListDaoProposalsResponse_vote_no::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t("quantity")] = ModelBase::toJson(m_Quantity);
    }
    if(m_ContractIsSet)
    {
        val[utility::conversions::to_string_t("contract")] = ModelBase::toJson(m_Contract);
    }

    return val;
}

void BcListDaoProposalsResponse_vote_no::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("quantity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("quantity")];
        if(!fieldValue.is_null())
        {
            setQuantity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contract")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contract")];
        if(!fieldValue.is_null())
        {
            setContract(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BcListDaoProposalsResponse_vote_no::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantity"), m_Quantity));
        
    }
    if(m_ContractIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contract"), m_Contract));
        
    }
}

void BcListDaoProposalsResponse_vote_no::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("quantity")))
    {
        setQuantity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contract")))
    {
        setContract(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contract"))));
    }
}

utility::string_t BcListDaoProposalsResponse_vote_no::getQuantity() const
{
    return m_Quantity;
}


void BcListDaoProposalsResponse_vote_no::setQuantity(utility::string_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}
bool BcListDaoProposalsResponse_vote_no::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void BcListDaoProposalsResponse_vote_no::unsetQuantity()
{
    m_QuantityIsSet = false;
}

utility::string_t BcListDaoProposalsResponse_vote_no::getContract() const
{
    return m_Contract;
}


void BcListDaoProposalsResponse_vote_no::setContract(utility::string_t value)
{
    m_Contract = value;
    m_ContractIsSet = true;
}
bool BcListDaoProposalsResponse_vote_no::contractIsSet() const
{
    return m_ContractIsSet;
}

void BcListDaoProposalsResponse_vote_no::unsetContract()
{
    m_ContractIsSet = false;
}

}
}
}
}

