# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_callback_path_get(self, path, **kwargs):  # noqa: E501
        """auth_callback_path_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_path_get(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_callback_path_get_with_http_info(path, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_callback_path_get_with_http_info(path, **kwargs)  # noqa: E501
            return data

    def auth_callback_path_get_with_http_info(self, path, **kwargs):  # noqa: E501
        """auth_callback_path_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_path_get_with_http_info(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_callback_path_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if self.api_client.client_side_validation and ('path' not in params or
                                                       params['path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path` when calling `auth_callback_path_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/callback/{path+}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_callback_path_options(self, path, **kwargs):  # noqa: E501
        """auth_callback_path_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_path_options(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_callback_path_options_with_http_info(path, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_callback_path_options_with_http_info(path, **kwargs)  # noqa: E501
            return data

    def auth_callback_path_options_with_http_info(self, path, **kwargs):  # noqa: E501
        """auth_callback_path_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_callback_path_options_with_http_info(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_callback_path_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if self.api_client.client_side_validation and ('path' not in params or
                                                       params['path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path` when calling `auth_callback_path_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/callback/{path+}', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_provider_path_get(self, path, **kwargs):  # noqa: E501
        """auth_provider_path_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_provider_path_get(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_provider_path_get_with_http_info(path, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_provider_path_get_with_http_info(path, **kwargs)  # noqa: E501
            return data

    def auth_provider_path_get_with_http_info(self, path, **kwargs):  # noqa: E501
        """auth_provider_path_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_provider_path_get_with_http_info(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_provider_path_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if self.api_client.client_side_validation and ('path' not in params or
                                                       params['path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path` when calling `auth_provider_path_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/provider/{path+}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_provider_path_options(self, path, **kwargs):  # noqa: E501
        """auth_provider_path_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_provider_path_options(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_provider_path_options_with_http_info(path, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_provider_path_options_with_http_info(path, **kwargs)  # noqa: E501
            return data

    def auth_provider_path_options_with_http_info(self, path, **kwargs):  # noqa: E501
        """auth_provider_path_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_provider_path_options_with_http_info(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_provider_path_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if self.api_client.client_side_validation and ('path' not in params or
                                                       params['path'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path` when calling `auth_provider_path_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/provider/{path+}', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_get(self, **kwargs):  # noqa: E501
        """folder_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folder_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def folder_get_with_http_info(self, **kwargs):  # noqa: E501
        """folder_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/folder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_options(self, **kwargs):  # noqa: E501
        """folder_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.folder_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def folder_options_with_http_info(self, **kwargs):  # noqa: E501
        """folder_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/folder', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_auth_get(self, **kwargs):  # noqa: E501
        """info_auth_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_auth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_auth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.info_auth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def info_auth_get_with_http_info(self, **kwargs):  # noqa: E501
        """info_auth_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_auth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_auth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['lambdaAuthorizer']  # noqa: E501

        return self.api_client.call_api(
            '/info-auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_auth_options(self, **kwargs):  # noqa: E501
        """info_auth_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_auth_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_auth_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.info_auth_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def info_auth_options_with_http_info(self, **kwargs):  # noqa: E501
        """info_auth_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_auth_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_auth_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/info-auth', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_get(self, **kwargs):  # noqa: E501
        """info_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def info_get_with_http_info(self, **kwargs):  # noqa: E501
        """info_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_options(self, **kwargs):  # noqa: E501
        """info_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.info_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def info_options_with_http_info(self, **kwargs):  # noqa: E501
        """info_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/info', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_attach_post_options(self, **kwargs):  # noqa: E501
        """mood_attach_post_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_attach_post_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_attach_post_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_attach_post_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_attach_post_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_attach_post_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_attach_post_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_attach_post_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood/attach/post', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_attach_post_put(self, mood_attach_request, **kwargs):  # noqa: E501
        """mood_attach_post_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_attach_post_put(mood_attach_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodAttachRequest mood_attach_request: (required)
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_attach_post_put_with_http_info(mood_attach_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mood_attach_post_put_with_http_info(mood_attach_request, **kwargs)  # noqa: E501
            return data

    def mood_attach_post_put_with_http_info(self, mood_attach_request, **kwargs):  # noqa: E501
        """mood_attach_post_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_attach_post_put_with_http_info(mood_attach_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodAttachRequest mood_attach_request: (required)
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mood_attach_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_attach_post_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mood_attach_request' is set
        if self.api_client.client_side_validation and ('mood_attach_request' not in params or
                                                       params['mood_attach_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mood_attach_request` when calling `mood_attach_post_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mood_attach_request' in params:
            body_params = params['mood_attach_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood/attach/post', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_get(self, **kwargs):  # noqa: E501
        """mood_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_get_with_http_info(self, **kwargs):  # noqa: E501
        """mood_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_list_top_get(self, **kwargs):  # noqa: E501
        """mood_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_list_top_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: MoodPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_list_top_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_list_top_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_list_top_get_with_http_info(self, **kwargs):  # noqa: E501
        """mood_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_list_top_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: MoodPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_list_top_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood/list/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_list_top_options(self, **kwargs):  # noqa: E501
        """mood_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_list_top_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_list_top_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_list_top_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_list_top_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_list_top_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_list_top_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood/list/top', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_options(self, **kwargs):  # noqa: E501
        """mood_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_post(self, mood_create_request, **kwargs):  # noqa: E501
        """mood_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_post(mood_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodCreateRequest mood_create_request: (required)
        :return: MoodCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_post_with_http_info(mood_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mood_post_with_http_info(mood_create_request, **kwargs)  # noqa: E501
            return data

    def mood_post_with_http_info(self, mood_create_request, **kwargs):  # noqa: E501
        """mood_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_post_with_http_info(mood_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodCreateRequest mood_create_request: (required)
        :return: MoodCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mood_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mood_create_request' is set
        if self.api_client.client_side_validation and ('mood_create_request' not in params or
                                                       params['mood_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mood_create_request` when calling `mood_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mood_create_request' in params:
            body_params = params['mood_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_posts_get(self, **kwargs):  # noqa: E501
        """mood_posts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_posts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodListAttachedPostsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_posts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_posts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_posts_get_with_http_info(self, **kwargs):  # noqa: E501
        """mood_posts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_posts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodListAttachedPostsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_posts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood/posts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodListAttachedPostsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_posts_options(self, **kwargs):  # noqa: E501
        """mood_posts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_posts_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_posts_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_posts_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_posts_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_posts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_posts_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_posts_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood/posts', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_put(self, mood_update_request, **kwargs):  # noqa: E501
        """mood_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_put(mood_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodUpdateRequest mood_update_request: (required)
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_put_with_http_info(mood_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mood_put_with_http_info(mood_update_request, **kwargs)  # noqa: E501
            return data

    def mood_put_with_http_info(self, mood_update_request, **kwargs):  # noqa: E501
        """mood_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_put_with_http_info(mood_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoodUpdateRequest mood_update_request: (required)
        :return: MoodReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mood_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mood_update_request' is set
        if self.api_client.client_side_validation and ('mood_update_request' not in params or
                                                       params['mood_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mood_update_request` when calling `mood_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mood_update_request' in params:
            body_params = params['mood_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_rate_options(self, **kwargs):  # noqa: E501
        """mood_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_rate_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_rate_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_rate_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_rate_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_rate_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_rate_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood/rate', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_rate_post(self, rating_update_request, **kwargs):  # noqa: E501
        """mood_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_rate_post(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mood_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
            return data

    def mood_rate_post_with_http_info(self, rating_update_request, **kwargs):  # noqa: E501
        """mood_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_rate_post_with_http_info(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_rate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_update_request' is set
        if self.api_client.client_side_validation and ('rating_update_request' not in params or
                                                       params['rating_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rating_update_request` when calling `mood_rate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rating_update_request' in params:
            body_params = params['rating_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood/rate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_upload_options(self, **kwargs):  # noqa: E501
        """mood_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_upload_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_upload_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mood_upload_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def mood_upload_options_with_http_info(self, **kwargs):  # noqa: E501
        """mood_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_upload_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_upload_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mood/upload', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mood_upload_post(self, upload_request_generic, **kwargs):  # noqa: E501
        """mood_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_upload_post(upload_request_generic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequestGeneric upload_request_generic: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mood_upload_post_with_http_info(upload_request_generic, **kwargs)  # noqa: E501
        else:
            (data) = self.mood_upload_post_with_http_info(upload_request_generic, **kwargs)  # noqa: E501
            return data

    def mood_upload_post_with_http_info(self, upload_request_generic, **kwargs):  # noqa: E501
        """mood_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mood_upload_post_with_http_info(upload_request_generic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequestGeneric upload_request_generic: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_request_generic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mood_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_request_generic' is set
        if self.api_client.client_side_validation and ('upload_request_generic' not in params or
                                                       params['upload_request_generic'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `upload_request_generic` when calling `mood_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_request_generic' in params:
            body_params = params['upload_request_generic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/mood/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcaccopen_options(self, **kwargs):  # noqa: E501
        """newcoin_bcaccopen_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcaccopen_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcaccopen_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcaccopen_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcaccopen_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcaccopen_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcaccopen_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcaccopen_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcaccopen', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcaccopen_post(self, bc_acc_create_request, **kwargs):  # noqa: E501
        """newcoin_bcaccopen_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcaccopen_post(bc_acc_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcAccCreateRequest bc_acc_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcaccopen_post_with_http_info(bc_acc_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcaccopen_post_with_http_info(bc_acc_create_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcaccopen_post_with_http_info(self, bc_acc_create_request, **kwargs):  # noqa: E501
        """newcoin_bcaccopen_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcaccopen_post_with_http_info(bc_acc_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcAccCreateRequest bc_acc_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_acc_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcaccopen_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_acc_create_request' is set
        if self.api_client.client_side_validation and ('bc_acc_create_request' not in params or
                                                       params['bc_acc_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_acc_create_request` when calling `newcoin_bcaccopen_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_acc_create_request' in params:
            body_params = params['bc_acc_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcaccopen', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcautheth_options(self, **kwargs):  # noqa: E501
        """newcoin_bcautheth_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcautheth_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcautheth_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcautheth_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcautheth_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcautheth_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcautheth_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcautheth_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcautheth', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcautheth_post(self, bc_auth_eth_request, **kwargs):  # noqa: E501
        """newcoin_bcautheth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcautheth_post(bc_auth_eth_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcAuthEthRequest bc_auth_eth_request: (required)
        :return: BcAuthEthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcautheth_post_with_http_info(bc_auth_eth_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcautheth_post_with_http_info(bc_auth_eth_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcautheth_post_with_http_info(self, bc_auth_eth_request, **kwargs):  # noqa: E501
        """newcoin_bcautheth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcautheth_post_with_http_info(bc_auth_eth_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcAuthEthRequest bc_auth_eth_request: (required)
        :return: BcAuthEthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_auth_eth_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcautheth_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_auth_eth_request' is set
        if self.api_client.client_side_validation and ('bc_auth_eth_request' not in params or
                                                       params['bc_auth_eth_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_auth_eth_request` when calling `newcoin_bcautheth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_auth_eth_request' in params:
            body_params = params['bc_auth_eth_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcautheth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcAuthEthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bccolcreate_options(self, **kwargs):  # noqa: E501
        """newcoin_bccolcreate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bccolcreate_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bccolcreate_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bccolcreate_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bccolcreate_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bccolcreate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bccolcreate_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bccolcreate_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bccolcreate', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bccolcreate_post(self, bc_collection_create_request, **kwargs):  # noqa: E501
        """newcoin_bccolcreate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bccolcreate_post(bc_collection_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCollectionCreateRequest bc_collection_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bccolcreate_post_with_http_info(bc_collection_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bccolcreate_post_with_http_info(bc_collection_create_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bccolcreate_post_with_http_info(self, bc_collection_create_request, **kwargs):  # noqa: E501
        """newcoin_bccolcreate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bccolcreate_post_with_http_info(bc_collection_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCollectionCreateRequest bc_collection_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_collection_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bccolcreate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_collection_create_request' is set
        if self.api_client.client_side_validation and ('bc_collection_create_request' not in params or
                                                       params['bc_collection_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_collection_create_request` when calling `newcoin_bccolcreate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_collection_create_request' in params:
            body_params = params['bc_collection_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bccolcreate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcgetacc_options(self, **kwargs):  # noqa: E501
        """newcoin_bcgetacc_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetacc_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcgetacc_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcgetacc_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcgetacc_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcgetacc_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetacc_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcgetacc_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcgetacc', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcgetacc_post(self, bc_get_account_info, **kwargs):  # noqa: E501
        """newcoin_bcgetacc_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetacc_post(bc_get_account_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcGetAccountInfo bc_get_account_info: (required)
        :return: BcGetInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcgetacc_post_with_http_info(bc_get_account_info, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcgetacc_post_with_http_info(bc_get_account_info, **kwargs)  # noqa: E501
            return data

    def newcoin_bcgetacc_post_with_http_info(self, bc_get_account_info, **kwargs):  # noqa: E501
        """newcoin_bcgetacc_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetacc_post_with_http_info(bc_get_account_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcGetAccountInfo bc_get_account_info: (required)
        :return: BcGetInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_get_account_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcgetacc_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_get_account_info' is set
        if self.api_client.client_side_validation and ('bc_get_account_info' not in params or
                                                       params['bc_get_account_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_get_account_info` when calling `newcoin_bcgetacc_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_get_account_info' in params:
            body_params = params['bc_get_account_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcgetacc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcGetInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcgetpool_options(self, **kwargs):  # noqa: E501
        """newcoin_bcgetpool_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetpool_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcgetpool_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcgetpool_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcgetpool_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcgetpool_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetpool_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcgetpool_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcgetpool', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcgetpool_post(self, bc_get_pool_info, **kwargs):  # noqa: E501
        """newcoin_bcgetpool_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetpool_post(bc_get_pool_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcGetPoolInfo bc_get_pool_info: (required)
        :return: BcGetInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcgetpool_post_with_http_info(bc_get_pool_info, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcgetpool_post_with_http_info(bc_get_pool_info, **kwargs)  # noqa: E501
            return data

    def newcoin_bcgetpool_post_with_http_info(self, bc_get_pool_info, **kwargs):  # noqa: E501
        """newcoin_bcgetpool_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcgetpool_post_with_http_info(bc_get_pool_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcGetPoolInfo bc_get_pool_info: (required)
        :return: BcGetInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_get_pool_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcgetpool_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_get_pool_info' is set
        if self.api_client.client_side_validation and ('bc_get_pool_info' not in params or
                                                       params['bc_get_pool_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_get_pool_info` when calling `newcoin_bcgetpool_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_get_pool_info' in params:
            body_params = params['bc_get_pool_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcgetpool', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcGetInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bckeypair_options(self, **kwargs):  # noqa: E501
        """newcoin_bckeypair_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bckeypair_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bckeypair_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bckeypair_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bckeypair_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bckeypair_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bckeypair_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bckeypair_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bckeypair', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bckeypair_post(self, bc_key_pair_create_request, **kwargs):  # noqa: E501
        """newcoin_bckeypair_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bckeypair_post(bc_key_pair_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcKeyPairCreateRequest bc_key_pair_create_request: (required)
        :return: BcKeyPairCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bckeypair_post_with_http_info(bc_key_pair_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bckeypair_post_with_http_info(bc_key_pair_create_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bckeypair_post_with_http_info(self, bc_key_pair_create_request, **kwargs):  # noqa: E501
        """newcoin_bckeypair_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bckeypair_post_with_http_info(bc_key_pair_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcKeyPairCreateRequest bc_key_pair_create_request: (required)
        :return: BcKeyPairCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_key_pair_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bckeypair_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_key_pair_create_request' is set
        if self.api_client.client_side_validation and ('bc_key_pair_create_request' not in params or
                                                       params['bc_key_pair_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_key_pair_create_request` when calling `newcoin_bckeypair_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_key_pair_create_request' in params:
            body_params = params['bc_key_pair_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bckeypair', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcKeyPairCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaodldunstake_options(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaodldunstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaodldunstake_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaodldunstake_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaodldunstake_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaodldunstake_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaodldunstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaodldunstake_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaodldunstake_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaodldunstake', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaodldunstake_post(self, bc_stake_main_dao_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaodldunstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaodldunstake_post(bc_stake_main_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakeMainDAORequest bc_stake_main_dao_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaodldunstake_post_with_http_info(bc_stake_main_dao_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaodldunstake_post_with_http_info(bc_stake_main_dao_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaodldunstake_post_with_http_info(self, bc_stake_main_dao_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaodldunstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaodldunstake_post_with_http_info(bc_stake_main_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakeMainDAORequest bc_stake_main_dao_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_stake_main_dao_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaodldunstake_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_stake_main_dao_request' is set
        if self.api_client.client_side_validation and ('bc_stake_main_dao_request' not in params or
                                                       params['bc_stake_main_dao_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_stake_main_dao_request` when calling `newcoin_bcmaindaodldunstake_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_stake_main_dao_request' in params:
            body_params = params['bc_stake_main_dao_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaodldunstake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaoinstunstake_options(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaoinstunstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaoinstunstake_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaoinstunstake_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaoinstunstake_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaoinstunstake_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaoinstunstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaoinstunstake_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaoinstunstake_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaoinstunstake', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaoinstunstake_post(self, bc_stake_pool_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaoinstunstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaoinstunstake_post(bc_stake_pool_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakePoolRequest bc_stake_pool_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaoinstunstake_post_with_http_info(bc_stake_pool_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaoinstunstake_post_with_http_info(bc_stake_pool_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaoinstunstake_post_with_http_info(self, bc_stake_pool_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaoinstunstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaoinstunstake_post_with_http_info(bc_stake_pool_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakePoolRequest bc_stake_pool_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_stake_pool_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaoinstunstake_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_stake_pool_request' is set
        if self.api_client.client_side_validation and ('bc_stake_pool_request' not in params or
                                                       params['bc_stake_pool_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_stake_pool_request` when calling `newcoin_bcmaindaoinstunstake_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_stake_pool_request' in params:
            body_params = params['bc_stake_pool_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaoinstunstake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaostake_options(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaostake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaostake_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaostake_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaostake_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaostake_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcmaindaostake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaostake_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaostake_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaostake', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmaindaostake_post(self, bc_stake_main_dao_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaostake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaostake_post(bc_stake_main_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakeMainDAORequest bc_stake_main_dao_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmaindaostake_post_with_http_info(bc_stake_main_dao_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmaindaostake_post_with_http_info(bc_stake_main_dao_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcmaindaostake_post_with_http_info(self, bc_stake_main_dao_request, **kwargs):  # noqa: E501
        """newcoin_bcmaindaostake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmaindaostake_post_with_http_info(bc_stake_main_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakeMainDAORequest bc_stake_main_dao_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_stake_main_dao_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmaindaostake_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_stake_main_dao_request' is set
        if self.api_client.client_side_validation and ('bc_stake_main_dao_request' not in params or
                                                       params['bc_stake_main_dao_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_stake_main_dao_request` when calling `newcoin_bcmaindaostake_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_stake_main_dao_request' in params:
            body_params = params['bc_stake_main_dao_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmaindaostake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmintasset_options(self, **kwargs):  # noqa: E501
        """newcoin_bcmintasset_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmintasset_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmintasset_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmintasset_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcmintasset_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcmintasset_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmintasset_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmintasset_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmintasset', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcmintasset_post(self, bc_mint_asset_request, **kwargs):  # noqa: E501
        """newcoin_bcmintasset_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmintasset_post(bc_mint_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcMintAssetRequest bc_mint_asset_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcmintasset_post_with_http_info(bc_mint_asset_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcmintasset_post_with_http_info(bc_mint_asset_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcmintasset_post_with_http_info(self, bc_mint_asset_request, **kwargs):  # noqa: E501
        """newcoin_bcmintasset_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcmintasset_post_with_http_info(bc_mint_asset_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcMintAssetRequest bc_mint_asset_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_mint_asset_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcmintasset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_mint_asset_request' is set
        if self.api_client.client_side_validation and ('bc_mint_asset_request' not in params or
                                                       params['bc_mint_asset_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_mint_asset_request` when calling `newcoin_bcmintasset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_mint_asset_request' in params:
            body_params = params['bc_mint_asset_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcmintasset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcpoolcreate_options(self, **kwargs):  # noqa: E501
        """newcoin_bcpoolcreate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolcreate_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcpoolcreate_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcpoolcreate_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcpoolcreate_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcpoolcreate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolcreate_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcpoolcreate_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcpoolcreate', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcpoolcreate_post(self, bc_pool_create_request, **kwargs):  # noqa: E501
        """newcoin_bcpoolcreate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolcreate_post(bc_pool_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcPoolCreateRequest bc_pool_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcpoolcreate_post_with_http_info(bc_pool_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcpoolcreate_post_with_http_info(bc_pool_create_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcpoolcreate_post_with_http_info(self, bc_pool_create_request, **kwargs):  # noqa: E501
        """newcoin_bcpoolcreate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolcreate_post_with_http_info(bc_pool_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcPoolCreateRequest bc_pool_create_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_pool_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcpoolcreate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_pool_create_request' is set
        if self.api_client.client_side_validation and ('bc_pool_create_request' not in params or
                                                       params['bc_pool_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_pool_create_request` when calling `newcoin_bcpoolcreate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_pool_create_request' in params:
            body_params = params['bc_pool_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcpoolcreate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcpoolstake_options(self, **kwargs):  # noqa: E501
        """newcoin_bcpoolstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolstake_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcpoolstake_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcpoolstake_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_bcpoolstake_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_bcpoolstake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolstake_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcpoolstake_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcpoolstake', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_bcpoolstake_post(self, bc_stake_pool_request, **kwargs):  # noqa: E501
        """newcoin_bcpoolstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolstake_post(bc_stake_pool_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakePoolRequest bc_stake_pool_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_bcpoolstake_post_with_http_info(bc_stake_pool_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_bcpoolstake_post_with_http_info(bc_stake_pool_request, **kwargs)  # noqa: E501
            return data

    def newcoin_bcpoolstake_post_with_http_info(self, bc_stake_pool_request, **kwargs):  # noqa: E501
        """newcoin_bcpoolstake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_bcpoolstake_post_with_http_info(bc_stake_pool_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcStakePoolRequest bc_stake_pool_request: (required)
        :return: BcTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_stake_pool_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_bcpoolstake_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_stake_pool_request' is set
        if self.api_client.client_side_validation and ('bc_stake_pool_request' not in params or
                                                       params['bc_stake_pool_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_stake_pool_request` when calling `newcoin_bcpoolstake_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_stake_pool_request' in params:
            body_params = params['bc_stake_pool_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/bcpoolstake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_create_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_create_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_create_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_create_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_create_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_create_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_create_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_create_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_create_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/create', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_create_post(self, bc_create_dao_request, **kwargs):  # noqa: E501
        """newcoin_dao_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_create_post(bc_create_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateDaoRequest bc_create_dao_request: (required)
        :return: BcCreateDaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_create_post_with_http_info(bc_create_dao_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_create_post_with_http_info(bc_create_dao_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_create_post_with_http_info(self, bc_create_dao_request, **kwargs):  # noqa: E501
        """newcoin_dao_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_create_post_with_http_info(bc_create_dao_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateDaoRequest bc_create_dao_request: (required)
        :return: BcCreateDaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_create_dao_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_create_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_create_dao_request' is set
        if self.api_client.client_side_validation and ('bc_create_dao_request' not in params or
                                                       params['bc_create_dao_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_create_dao_request` when calling `newcoin_dao_create_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_create_dao_request' in params:
            body_params = params['bc_create_dao_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcCreateDaoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_approve_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_approve_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_approve_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_approve_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_approve_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_approve_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_approve_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_approve_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_approve_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/approve', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_approve_post(self, bc_approve_dao_proposal_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_approve_post(bc_approve_dao_proposal_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcApproveDaoProposalRequest bc_approve_dao_proposal_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_approve_post_with_http_info(bc_approve_dao_proposal_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_approve_post_with_http_info(bc_approve_dao_proposal_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_approve_post_with_http_info(self, bc_approve_dao_proposal_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_approve_post_with_http_info(bc_approve_dao_proposal_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcApproveDaoProposalRequest bc_approve_dao_proposal_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_approve_dao_proposal_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_approve_dao_proposal_request' is set
        if self.api_client.client_side_validation and ('bc_approve_dao_proposal_request' not in params or
                                                       params['bc_approve_dao_proposal_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_approve_dao_proposal_request` when calling `newcoin_dao_proposal_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_approve_dao_proposal_request' in params:
            body_params = params['bc_approve_dao_proposal_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_execute_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_execute_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_execute_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_execute_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_execute_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_execute_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_execute_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_execute_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_execute_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/execute', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_execute_post(self, bc_dao_proposal_execute_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_execute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_execute_post(bc_dao_proposal_execute_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalExecuteRequest bc_dao_proposal_execute_request: (required)
        :return: BcDaoProposalExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_execute_post_with_http_info(bc_dao_proposal_execute_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_execute_post_with_http_info(bc_dao_proposal_execute_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_execute_post_with_http_info(self, bc_dao_proposal_execute_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_execute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_execute_post_with_http_info(bc_dao_proposal_execute_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalExecuteRequest bc_dao_proposal_execute_request: (required)
        :return: BcDaoProposalExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_dao_proposal_execute_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_execute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_dao_proposal_execute_request' is set
        if self.api_client.client_side_validation and ('bc_dao_proposal_execute_request' not in params or
                                                       params['bc_dao_proposal_execute_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_dao_proposal_execute_request` when calling `newcoin_dao_proposal_execute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_dao_proposal_execute_request' in params:
            body_params = params['bc_dao_proposal_execute_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcDaoProposalExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_list_get(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str proposal_author:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str lower_bound:
        :param str upper_bound:
        :param str id:
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str proposal_author:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str lower_bound:
        :param str upper_bound:
        :param str id:
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reverse', 'proposal_author', 'dao_owner', 'dao_id', 'limit', 'lower_bound', 'upper_bound', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'proposal_author' in params:
            query_params.append(('proposalAuthor', params['proposal_author']))  # noqa: E501
        if 'dao_owner' in params:
            query_params.append(('dao_owner', params['dao_owner']))  # noqa: E501
        if 'dao_id' in params:
            query_params.append(('dao_id', params['dao_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'lower_bound' in params:
            query_params.append(('lower_bound', params['lower_bound']))  # noqa: E501
        if 'upper_bound' in params:
            query_params.append(('upper_bound', params['upper_bound']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcListDaoProposalsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_list_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_list_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_list_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_list_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_list_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_list_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_list_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_list_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_list_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/list', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_post(self, bc_create_dao_proposal, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_post(bc_create_dao_proposal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateDaoProposal bc_create_dao_proposal: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_post_with_http_info(bc_create_dao_proposal, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_post_with_http_info(bc_create_dao_proposal, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_post_with_http_info(self, bc_create_dao_proposal, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_post_with_http_info(bc_create_dao_proposal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateDaoProposal bc_create_dao_proposal: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_create_dao_proposal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_create_dao_proposal' is set
        if self.api_client.client_side_validation and ('bc_create_dao_proposal' not in params or
                                                       params['bc_create_dao_proposal'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_create_dao_proposal` when calling `newcoin_dao_proposal_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_create_dao_proposal' in params:
            body_params = params['bc_create_dao_proposal']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_vote_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_vote_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_vote_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_vote_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_vote_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_vote_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_vote_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_vote_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_vote_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/vote', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_vote_post(self, bc_dao_proposal_vote_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_vote_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_vote_post(bc_dao_proposal_vote_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalVoteRequest bc_dao_proposal_vote_request: (required)
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_vote_post_with_http_info(bc_dao_proposal_vote_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_vote_post_with_http_info(bc_dao_proposal_vote_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_vote_post_with_http_info(self, bc_dao_proposal_vote_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_vote_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_vote_post_with_http_info(bc_dao_proposal_vote_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalVoteRequest bc_dao_proposal_vote_request: (required)
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_dao_proposal_vote_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_vote_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_dao_proposal_vote_request' is set
        if self.api_client.client_side_validation and ('bc_dao_proposal_vote_request' not in params or
                                                       params['bc_dao_proposal_vote_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_dao_proposal_vote_request` when calling `newcoin_dao_proposal_vote_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_dao_proposal_vote_request' in params:
            body_params = params['bc_dao_proposal_vote_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/vote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcListDaoProposalsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_votes_get(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_votes_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_votes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str limit:
        :param str upper_bound:
        :param str voter:
        :param str lower_bound:
        :return: BcDaoProposalVoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_votes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_votes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_votes_get_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_votes_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_votes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str limit:
        :param str upper_bound:
        :param str voter:
        :param str lower_bound:
        :return: BcDaoProposalVoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reverse', 'limit', 'upper_bound', 'voter', 'lower_bound']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_votes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'upper_bound' in params:
            query_params.append(('upper_bound', params['upper_bound']))  # noqa: E501
        if 'voter' in params:
            query_params.append(('voter', params['voter']))  # noqa: E501
        if 'lower_bound' in params:
            query_params.append(('lower_bound', params['lower_bound']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/votes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcDaoProposalVoteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_votes_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_votes_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_votes_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_votes_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_votes_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_votes_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_votes_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_votes_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_votes_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal/votes', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_approve_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_approve_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_approve_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_approve_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_approve_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_approve_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_approve_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_approve_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_approve_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/approve', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_approve_post(self, bc_approve_dao_proposal_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_approve_post(bc_approve_dao_proposal_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcApproveDaoProposalRequest bc_approve_dao_proposal_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_approve_post_with_http_info(bc_approve_dao_proposal_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_approve_post_with_http_info(bc_approve_dao_proposal_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_approve_post_with_http_info(self, bc_approve_dao_proposal_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_approve_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_approve_post_with_http_info(bc_approve_dao_proposal_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcApproveDaoProposalRequest bc_approve_dao_proposal_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_approve_dao_proposal_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_approve_dao_proposal_request' is set
        if self.api_client.client_side_validation and ('bc_approve_dao_proposal_request' not in params or
                                                       params['bc_approve_dao_proposal_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_approve_dao_proposal_request` when calling `newcoin_dao_proposal_whitelist_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_approve_dao_proposal_request' in params:
            body_params = params['bc_approve_dao_proposal_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_execute_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_execute_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_execute_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_execute_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_execute_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_execute_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_execute_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_execute_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_execute_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/execute', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_execute_post(self, bc_dao_proposal_execute_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_execute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_execute_post(bc_dao_proposal_execute_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalExecuteRequest bc_dao_proposal_execute_request: (required)
        :return: BcDaoProposalExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_execute_post_with_http_info(bc_dao_proposal_execute_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_execute_post_with_http_info(bc_dao_proposal_execute_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_execute_post_with_http_info(self, bc_dao_proposal_execute_request, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_execute_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_execute_post_with_http_info(bc_dao_proposal_execute_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoProposalExecuteRequest bc_dao_proposal_execute_request: (required)
        :return: BcDaoProposalExecuteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_dao_proposal_execute_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_execute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_dao_proposal_execute_request' is set
        if self.api_client.client_side_validation and ('bc_dao_proposal_execute_request' not in params or
                                                       params['bc_dao_proposal_execute_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_dao_proposal_execute_request` when calling `newcoin_dao_proposal_whitelist_execute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_dao_proposal_execute_request' in params:
            body_params = params['bc_dao_proposal_execute_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcDaoProposalExecuteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_list_get(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str proposal_author:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str lower_bound:
        :param str upper_bound:
        :param str id:
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str proposal_author:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str lower_bound:
        :param str upper_bound:
        :param str id:
        :return: BcListDaoProposalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reverse', 'proposal_author', 'dao_owner', 'dao_id', 'limit', 'lower_bound', 'upper_bound', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'proposal_author' in params:
            query_params.append(('proposalAuthor', params['proposal_author']))  # noqa: E501
        if 'dao_owner' in params:
            query_params.append(('dao_owner', params['dao_owner']))  # noqa: E501
        if 'dao_id' in params:
            query_params.append(('dao_id', params['dao_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'lower_bound' in params:
            query_params.append(('lower_bound', params['lower_bound']))  # noqa: E501
        if 'upper_bound' in params:
            query_params.append(('upper_bound', params['upper_bound']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcListDaoProposalsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_list_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_list_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_list_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_list_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_list_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_list_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_list_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_list_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_list_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist/list', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_proposal_whitelist_post(self, bc_create_whitelist_dao_proposal, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_post(bc_create_whitelist_dao_proposal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateWhitelistDaoProposal bc_create_whitelist_dao_proposal: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_proposal_whitelist_post_with_http_info(bc_create_whitelist_dao_proposal, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_proposal_whitelist_post_with_http_info(bc_create_whitelist_dao_proposal, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_proposal_whitelist_post_with_http_info(self, bc_create_whitelist_dao_proposal, **kwargs):  # noqa: E501
        """newcoin_dao_proposal_whitelist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_proposal_whitelist_post_with_http_info(bc_create_whitelist_dao_proposal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcCreateWhitelistDaoProposal bc_create_whitelist_dao_proposal: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_create_whitelist_dao_proposal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_proposal_whitelist_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_create_whitelist_dao_proposal' is set
        if self.api_client.client_side_validation and ('bc_create_whitelist_dao_proposal' not in params or
                                                       params['bc_create_whitelist_dao_proposal'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_create_whitelist_dao_proposal` when calling `newcoin_dao_proposal_whitelist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_create_whitelist_dao_proposal' in params:
            body_params = params['bc_create_whitelist_dao_proposal']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/proposal-whitelist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_whitelist_get(self, **kwargs):  # noqa: E501
        """newcoin_dao_whitelist_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_whitelist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str upper_bound:
        :param str lower_bound:
        :return: BcListDaoWhitelistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_whitelist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_whitelist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_whitelist_get_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_whitelist_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_whitelist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reverse:
        :param str dao_owner:
        :param str dao_id:
        :param str limit:
        :param str upper_bound:
        :param str lower_bound:
        :return: BcListDaoWhitelistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reverse', 'dao_owner', 'dao_id', 'limit', 'upper_bound', 'lower_bound']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_whitelist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'dao_owner' in params:
            query_params.append(('dao_owner', params['dao_owner']))  # noqa: E501
        if 'dao_id' in params:
            query_params.append(('dao_id', params['dao_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'upper_bound' in params:
            query_params.append(('upper_bound', params['upper_bound']))  # noqa: E501
        if 'lower_bound' in params:
            query_params.append(('lower_bound', params['lower_bound']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/whitelist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcListDaoWhitelistResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_whitelist_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_whitelist_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_whitelist_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_whitelist_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_whitelist_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_whitelist_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_whitelist_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_whitelist_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_whitelist_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/whitelist', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_withdraw_vote_deposit_options(self, **kwargs):  # noqa: E501
        """newcoin_dao_withdraw_vote_deposit_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_withdraw_vote_deposit_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_withdraw_vote_deposit_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_withdraw_vote_deposit_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def newcoin_dao_withdraw_vote_deposit_options_with_http_info(self, **kwargs):  # noqa: E501
        """newcoin_dao_withdraw_vote_deposit_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_withdraw_vote_deposit_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_withdraw_vote_deposit_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/withdrawVoteDeposit', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def newcoin_dao_withdraw_vote_deposit_post(self, bc_dao_widthdraw_vote_deposit_request, **kwargs):  # noqa: E501
        """newcoin_dao_withdraw_vote_deposit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_withdraw_vote_deposit_post(bc_dao_widthdraw_vote_deposit_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoWidthdrawVoteDepositRequest bc_dao_widthdraw_vote_deposit_request: (required)
        :return: BcDaoWidthdrawVoteDepositResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newcoin_dao_withdraw_vote_deposit_post_with_http_info(bc_dao_widthdraw_vote_deposit_request, **kwargs)  # noqa: E501
        else:
            (data) = self.newcoin_dao_withdraw_vote_deposit_post_with_http_info(bc_dao_widthdraw_vote_deposit_request, **kwargs)  # noqa: E501
            return data

    def newcoin_dao_withdraw_vote_deposit_post_with_http_info(self, bc_dao_widthdraw_vote_deposit_request, **kwargs):  # noqa: E501
        """newcoin_dao_withdraw_vote_deposit_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newcoin_dao_withdraw_vote_deposit_post_with_http_info(bc_dao_widthdraw_vote_deposit_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BcDaoWidthdrawVoteDepositRequest bc_dao_widthdraw_vote_deposit_request: (required)
        :return: BcDaoWidthdrawVoteDepositResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bc_dao_widthdraw_vote_deposit_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newcoin_dao_withdraw_vote_deposit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bc_dao_widthdraw_vote_deposit_request' is set
        if self.api_client.client_side_validation and ('bc_dao_widthdraw_vote_deposit_request' not in params or
                                                       params['bc_dao_widthdraw_vote_deposit_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bc_dao_widthdraw_vote_deposit_request` when calling `newcoin_dao_withdraw_vote_deposit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bc_dao_widthdraw_vote_deposit_request' in params:
            body_params = params['bc_dao_widthdraw_vote_deposit_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/newcoin/dao/withdrawVoteDeposit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcDaoWidthdrawVoteDepositResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_intent_options(self, **kwargs):  # noqa: E501
        """payment_stripe_intent_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_intent_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_intent_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_intent_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def payment_stripe_intent_options_with_http_info(self, **kwargs):  # noqa: E501
        """payment_stripe_intent_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_intent_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_intent_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/intent', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_intent_post(self, payment_stripe_payment_intent_create_request, **kwargs):  # noqa: E501
        """payment_stripe_intent_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_intent_post(payment_stripe_payment_intent_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentStripePaymentIntentCreateRequest payment_stripe_payment_intent_create_request: (required)
        :return: PaymentStripePaymentIntentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_intent_post_with_http_info(payment_stripe_payment_intent_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_intent_post_with_http_info(payment_stripe_payment_intent_create_request, **kwargs)  # noqa: E501
            return data

    def payment_stripe_intent_post_with_http_info(self, payment_stripe_payment_intent_create_request, **kwargs):  # noqa: E501
        """payment_stripe_intent_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_intent_post_with_http_info(payment_stripe_payment_intent_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentStripePaymentIntentCreateRequest payment_stripe_payment_intent_create_request: (required)
        :return: PaymentStripePaymentIntentCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_stripe_payment_intent_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_intent_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_stripe_payment_intent_create_request' is set
        if self.api_client.client_side_validation and ('payment_stripe_payment_intent_create_request' not in params or
                                                       params['payment_stripe_payment_intent_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_stripe_payment_intent_create_request` when calling `payment_stripe_intent_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment_stripe_payment_intent_create_request' in params:
            body_params = params['payment_stripe_payment_intent_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/intent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentStripePaymentIntentCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_subscription_payment_options(self, **kwargs):  # noqa: E501
        """payment_stripe_subscription_payment_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_subscription_payment_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_subscription_payment_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_subscription_payment_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def payment_stripe_subscription_payment_options_with_http_info(self, **kwargs):  # noqa: E501
        """payment_stripe_subscription_payment_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_subscription_payment_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_subscription_payment_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/subscription/payment', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_subscription_payment_post(self, **kwargs):  # noqa: E501
        """payment_stripe_subscription_payment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_subscription_payment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_subscription_payment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_subscription_payment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def payment_stripe_subscription_payment_post_with_http_info(self, **kwargs):  # noqa: E501
        """payment_stripe_subscription_payment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_subscription_payment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_subscription_payment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/subscription/payment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_webhook_options(self, **kwargs):  # noqa: E501
        """payment_stripe_webhook_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_webhook_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_webhook_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_webhook_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def payment_stripe_webhook_options_with_http_info(self, **kwargs):  # noqa: E501
        """payment_stripe_webhook_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_webhook_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_webhook_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/webhook', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_stripe_webhook_post(self, payment_stripe_webhook_request, **kwargs):  # noqa: E501
        """payment_stripe_webhook_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_webhook_post(payment_stripe_webhook_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentStripeWebhookRequest payment_stripe_webhook_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_stripe_webhook_post_with_http_info(payment_stripe_webhook_request, **kwargs)  # noqa: E501
        else:
            (data) = self.payment_stripe_webhook_post_with_http_info(payment_stripe_webhook_request, **kwargs)  # noqa: E501
            return data

    def payment_stripe_webhook_post_with_http_info(self, payment_stripe_webhook_request, **kwargs):  # noqa: E501
        """payment_stripe_webhook_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_stripe_webhook_post_with_http_info(payment_stripe_webhook_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentStripeWebhookRequest payment_stripe_webhook_request: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_stripe_webhook_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_stripe_webhook_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_stripe_webhook_request' is set
        if self.api_client.client_side_validation and ('payment_stripe_webhook_request' not in params or
                                                       params['payment_stripe_webhook_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payment_stripe_webhook_request` when calling `payment_stripe_webhook_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment_stripe_webhook_request' in params:
            body_params = params['payment_stripe_webhook_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payment/stripe/webhook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_get(self, **kwargs):  # noqa: E501
        """post_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_get_with_http_info(self, **kwargs):  # noqa: E501
        """post_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_search_get(self, **kwargs):  # noqa: E501
        """post_list_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: PostPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: PostPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/list/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_search_options(self, **kwargs):  # noqa: E501
        """post_list_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_search_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_search_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_search_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_search_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_search_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_search_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/list/search', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_tags_search_get(self, **kwargs):  # noqa: E501
        """post_list_tags_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_tags_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: PostTagsSearchPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_tags_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_tags_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_tags_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_tags_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_tags_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: PostTagsSearchPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_tags_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/list/tags-search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostTagsSearchPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_tags_search_options(self, **kwargs):  # noqa: E501
        """post_list_tags_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_tags_search_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_tags_search_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_tags_search_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_tags_search_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_tags_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_tags_search_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_tags_search_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/list/tags-search', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_top_get(self, **kwargs):  # noqa: E501
        """post_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_top_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: PostPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_top_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_top_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_top_get_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_top_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: PostPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_top_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/list/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_list_top_options(self, **kwargs):  # noqa: E501
        """post_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_top_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_list_top_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_list_top_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_list_top_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_list_top_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_list_top_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/list/top', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_options(self, **kwargs):  # noqa: E501
        """post_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_post(self, post_create_request, **kwargs):  # noqa: E501
        """post_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_post(post_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCreateRequest post_create_request: (required)
        :return: PostCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_post_with_http_info(post_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_post_with_http_info(post_create_request, **kwargs)  # noqa: E501
            return data

    def post_post_with_http_info(self, post_create_request, **kwargs):  # noqa: E501
        """post_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_post_with_http_info(post_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCreateRequest post_create_request: (required)
        :return: PostCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_create_request' is set
        if self.api_client.client_side_validation and ('post_create_request' not in params or
                                                       params['post_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post_create_request` when calling `post_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_create_request' in params:
            body_params = params['post_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_put(self, post_update_request, **kwargs):  # noqa: E501
        """post_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_put(post_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUpdateRequest post_update_request: (required)
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_put_with_http_info(post_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_put_with_http_info(post_update_request, **kwargs)  # noqa: E501
            return data

    def post_put_with_http_info(self, post_update_request, **kwargs):  # noqa: E501
        """post_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_put_with_http_info(post_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostUpdateRequest post_update_request: (required)
        :return: PostReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_update_request' is set
        if self.api_client.client_side_validation and ('post_update_request' not in params or
                                                       params['post_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post_update_request` when calling `post_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_update_request' in params:
            body_params = params['post_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rate_options(self, **kwargs):  # noqa: E501
        """post_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rate_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rate_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_rate_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_rate_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rate_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rate_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/rate', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rate_post(self, rating_update_request, **kwargs):  # noqa: E501
        """post_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rate_post(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
            return data

    def post_rate_post_with_http_info(self, rating_update_request, **kwargs):  # noqa: E501
        """post_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rate_post_with_http_info(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_update_request' is set
        if self.api_client.client_side_validation and ('rating_update_request' not in params or
                                                       params['rating_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rating_update_request` when calling `post_rate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rating_update_request' in params:
            body_params = params['rating_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/rate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_report_options(self, **kwargs):  # noqa: E501
        """post_report_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_report_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_report_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_report_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_report_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_report_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/report', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_report_post(self, report_update_request, **kwargs):  # noqa: E501
        """post_report_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_post(report_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportUpdateRequest report_update_request: (required)
        :return: ReportUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_report_post_with_http_info(report_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_report_post_with_http_info(report_update_request, **kwargs)  # noqa: E501
            return data

    def post_report_post_with_http_info(self, report_update_request, **kwargs):  # noqa: E501
        """post_report_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_report_post_with_http_info(report_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportUpdateRequest report_update_request: (required)
        :return: ReportUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_update_request' is set
        if self.api_client.client_side_validation and ('report_update_request' not in params or
                                                       params['report_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `report_update_request` when calling `post_report_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'report_update_request' in params:
            body_params = params['report_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_upload_options(self, **kwargs):  # noqa: E501
        """post_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_upload_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_upload_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_upload_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_upload_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_upload_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_upload_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/upload', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_upload_post(self, upload_request_generic, **kwargs):  # noqa: E501
        """post_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_upload_post(upload_request_generic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequestGeneric upload_request_generic: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_upload_post_with_http_info(upload_request_generic, **kwargs)  # noqa: E501
        else:
            (data) = self.post_upload_post_with_http_info(upload_request_generic, **kwargs)  # noqa: E501
            return data

    def post_upload_post_with_http_info(self, upload_request_generic, **kwargs):  # noqa: E501
        """post_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_upload_post_with_http_info(upload_request_generic, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequestGeneric upload_request_generic: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_request_generic']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_request_generic' is set
        if self.api_client.client_side_validation and ('upload_request_generic' not in params or
                                                       params['upload_request_generic'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `upload_request_generic` when calling `post_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_request_generic' in params:
            body_params = params['upload_request_generic']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utils_remote_meta_proxy_get(self, **kwargs):  # noqa: E501
        """post_utils_remote_meta_proxy_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utils_remote_meta_proxy_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url:
        :return: PostRemoteMetaProxyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utils_remote_meta_proxy_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_utils_remote_meta_proxy_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_utils_remote_meta_proxy_get_with_http_info(self, **kwargs):  # noqa: E501
        """post_utils_remote_meta_proxy_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utils_remote_meta_proxy_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url:
        :return: PostRemoteMetaProxyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utils_remote_meta_proxy_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/post/utils/remote-meta-proxy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostRemoteMetaProxyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utils_remote_meta_proxy_options(self, **kwargs):  # noqa: E501
        """post_utils_remote_meta_proxy_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utils_remote_meta_proxy_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utils_remote_meta_proxy_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_utils_remote_meta_proxy_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_utils_remote_meta_proxy_options_with_http_info(self, **kwargs):  # noqa: E501
        """post_utils_remote_meta_proxy_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utils_remote_meta_proxy_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utils_remote_meta_proxy_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/post/utils/remote-meta-proxy', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_creative_get(self, **kwargs):  # noqa: E501
        """search_creative_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_creative_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aesthetics:
        :param str tags:
        :param str page:
        :return: CreativeSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_creative_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_creative_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_creative_get_with_http_info(self, **kwargs):  # noqa: E501
        """search_creative_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_creative_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aesthetics:
        :param str tags:
        :param str page:
        :return: CreativeSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aesthetics', 'tags', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_creative_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aesthetics' in params:
            query_params.append(('aesthetics', params['aesthetics']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/search/creative', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreativeSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_creative_options(self, **kwargs):  # noqa: E501
        """search_creative_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_creative_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_creative_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_creative_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_creative_options_with_http_info(self, **kwargs):  # noqa: E501
        """search_creative_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_creative_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_creative_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/creative', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_imported_options(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_imported_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_imported_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_imported_options_with_http_info(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_imported_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/imported', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_imported_post(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_post(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_imported_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_imported_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_imported_post_with_http_info(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_post_with_http_info(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configure_user_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_imported_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configure_user_request' is set
        if self.api_client.client_side_validation and ('configure_user_request' not in params or
                                                       params['configure_user_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configure_user_request` when calling `test_utils_user_configure_imported_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configure_user_request' in params:
            body_params = params['configure_user_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/imported', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_imported_whitelisted_options(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_whitelisted_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_whitelisted_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_imported_whitelisted_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_imported_whitelisted_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_imported_whitelisted_options_with_http_info(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_whitelisted_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_whitelisted_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_imported_whitelisted_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/imported-whitelisted', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_imported_whitelisted_post(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_whitelisted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_whitelisted_post(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_imported_whitelisted_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_imported_whitelisted_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_imported_whitelisted_post_with_http_info(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_imported_whitelisted_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_imported_whitelisted_post_with_http_info(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configure_user_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_imported_whitelisted_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configure_user_request' is set
        if self.api_client.client_side_validation and ('configure_user_request' not in params or
                                                       params['configure_user_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configure_user_request` when calling `test_utils_user_configure_imported_whitelisted_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configure_user_request' in params:
            body_params = params['configure_user_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/imported-whitelisted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_invited_options(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_invited_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_invited_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_invited_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_invited_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_invited_options_with_http_info(self, **kwargs):  # noqa: E501
        """test_utils_user_configure_invited_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_invited_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_invited_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/invited', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_utils_user_configure_invited_post(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_invited_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_invited_post(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_utils_user_configure_invited_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
        else:
            (data) = self.test_utils_user_configure_invited_post_with_http_info(configure_user_request, **kwargs)  # noqa: E501
            return data

    def test_utils_user_configure_invited_post_with_http_info(self, configure_user_request, **kwargs):  # noqa: E501
        """test_utils_user_configure_invited_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_utils_user_configure_invited_post_with_http_info(configure_user_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureUserRequest configure_user_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configure_user_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_utils_user_configure_invited_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configure_user_request' is set
        if self.api_client.client_side_validation and ('configure_user_request' not in params or
                                                       params['configure_user_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configure_user_request` when calling `test_utils_user_configure_invited_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configure_user_request' in params:
            body_params = params['configure_user_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/test-utils/user/configure/invited', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_node_options(self, **kwargs):  # noqa: E501
        """upload_node_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_node_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_node_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_node_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_node_options_with_http_info(self, **kwargs):  # noqa: E501
        """upload_node_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_node_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_node_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/upload/node', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_node_post(self, upload_request, **kwargs):  # noqa: E501
        """upload_node_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_node_post(upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequest upload_request: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_node_post_with_http_info(upload_request, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_node_post_with_http_info(upload_request, **kwargs)  # noqa: E501
            return data

    def upload_node_post_with_http_info(self, upload_request, **kwargs):  # noqa: E501
        """upload_node_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_node_post_with_http_info(upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadRequest upload_request: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_node_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_request' is set
        if self.api_client.client_side_validation and ('upload_request' not in params or
                                                       params['upload_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `upload_request` when calling `upload_node_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_request' in params:
            body_params = params['upload_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/upload/node', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_activity_stream_get(self, **kwargs):  # noqa: E501
        """user_activity_stream_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activity_stream_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after:
        :param str limit:
        :return: AnyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_activity_stream_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_activity_stream_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_activity_stream_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_activity_stream_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activity_stream_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after:
        :param str limit:
        :return: AnyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_activity_stream_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/activityStream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_activity_stream_options(self, **kwargs):  # noqa: E501
        """user_activity_stream_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activity_stream_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_activity_stream_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_activity_stream_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_activity_stream_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_activity_stream_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activity_stream_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_activity_stream_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/activityStream', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_availability_get(self, **kwargs):  # noqa: E501
        """user_availability_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_availability_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :return: UserAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_availability_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_availability_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_availability_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_availability_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_availability_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :return: UserAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_availability_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/availability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAvailabilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_availability_options(self, **kwargs):  # noqa: E501
        """user_availability_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_availability_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_availability_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_availability_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_availability_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_availability_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_availability_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_availability_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/availability', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_current_get(self, **kwargs):  # noqa: E501
        """user_current_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_current_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_current_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_current_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_current_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_current_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_current_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_current_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPrivateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_current_options(self, **kwargs):  # noqa: E501
        """user_current_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_current_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_current_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_current_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_current_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_current_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_current_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_current_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/current', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete(self, user_delete_request, **kwargs):  # noqa: E501
        """user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete(user_delete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserDeleteRequest user_delete_request: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_delete_with_http_info(user_delete_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_with_http_info(user_delete_request, **kwargs)  # noqa: E501
            return data

    def user_delete_with_http_info(self, user_delete_request, **kwargs):  # noqa: E501
        """user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_with_http_info(user_delete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserDeleteRequest user_delete_request: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_delete_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_delete_request' is set
        if self.api_client.client_side_validation and ('user_delete_request' not in params or
                                                       params['user_delete_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_delete_request` when calling `user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_delete_request' in params:
            body_params = params['user_delete_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get(self, **kwargs):  # noqa: E501
        """user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :param str id:
        :return: UserReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :param str id:
        :return: UserReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invite_hash_get(self, **kwargs):  # noqa: E501
        """user_invite_hash_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_hash_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash:
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invite_hash_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invite_hash_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invite_hash_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_invite_hash_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_hash_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash:
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invite_hash_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/invite/hash', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invite_hash_options(self, **kwargs):  # noqa: E501
        """user_invite_hash_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_hash_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invite_hash_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invite_hash_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invite_hash_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_invite_hash_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_hash_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invite_hash_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/invite/hash', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invite_options(self, **kwargs):  # noqa: E501
        """user_invite_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invite_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invite_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invite_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_invite_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invite_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/invite', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invite_post(self, user_invite_request, **kwargs):  # noqa: E501
        """user_invite_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_post(user_invite_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserInviteRequest user_invite_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invite_post_with_http_info(user_invite_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_invite_post_with_http_info(user_invite_request, **kwargs)  # noqa: E501
            return data

    def user_invite_post_with_http_info(self, user_invite_request, **kwargs):  # noqa: E501
        """user_invite_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invite_post_with_http_info(user_invite_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserInviteRequest user_invite_request: (required)
        :return: UserInvitationReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_invite_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invite_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_invite_request' is set
        if self.api_client.client_side_validation and ('user_invite_request' not in params or
                                                       params['user_invite_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_invite_request` when calling `user_invite_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_invite_request' in params:
            body_params = params['user_invite_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invitees_get(self, **kwargs):  # noqa: E501
        """user_invitees_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitees_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserInvitationPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invitees_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invitees_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invitees_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_invitees_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitees_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserInvitationPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invitees_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/invitees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invitees_options(self, **kwargs):  # noqa: E501
        """user_invitees_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitees_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invitees_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invitees_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invitees_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_invitees_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitees_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invitees_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/invitees', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invitor_get(self, **kwargs):  # noqa: E501
        """user_invitor_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitor_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserInvitationPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invitor_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invitor_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invitor_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_invitor_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitor_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserInvitationPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invitor_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/invitor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_invitor_options(self, **kwargs):  # noqa: E501
        """user_invitor_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitor_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_invitor_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_invitor_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_invitor_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_invitor_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_invitor_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_invitor_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/invitor', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_list_search_get(self, **kwargs):  # noqa: E501
        """user_list_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: UserPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_list_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_list_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_list_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_list_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :param str q:
        :return: UserPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_list_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/list/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_list_search_options(self, **kwargs):  # noqa: E501
        """user_list_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_search_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_list_search_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_list_search_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_list_search_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_list_search_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_search_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_list_search_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/list/search', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_list_top_get(self, **kwargs):  # noqa: E501
        """user_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_top_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_list_top_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_list_top_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_list_top_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_list_top_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_top_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction:
        :param str content_type:
        :param str page:
        :param str order_by:
        :return: UserPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'content_type', 'page', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_list_top_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/list/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_list_top_options(self, **kwargs):  # noqa: E501
        """user_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_top_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_list_top_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_list_top_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_list_top_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_list_top_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_list_top_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_list_top_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/list/top', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_moods_get(self, **kwargs):  # noqa: E501
        """user_moods_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_moods_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_moods_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_moods_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_moods_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_moods_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_moods_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: MoodPagedListReadPublicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_moods_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/moods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoodPagedListReadPublicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_moods_options(self, **kwargs):  # noqa: E501
        """user_moods_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_moods_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_moods_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_moods_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_moods_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_moods_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_moods_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_moods_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/moods', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_options(self, **kwargs):  # noqa: E501
        """user_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_post(self, user_create_request, **kwargs):  # noqa: E501
        """user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post(user_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreateRequest user_create_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_post_with_http_info(user_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_post_with_http_info(user_create_request, **kwargs)  # noqa: E501
            return data

    def user_post_with_http_info(self, user_create_request, **kwargs):  # noqa: E501
        """user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post_with_http_info(user_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreateRequest user_create_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_create_request' is set
        if self.api_client.client_side_validation and ('user_create_request' not in params or
                                                       params['user_create_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_create_request` when calling `user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_create_request' in params:
            body_params = params['user_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPrivateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_preregister_options(self, **kwargs):  # noqa: E501
        """user_preregister_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_preregister_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_preregister_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_preregister_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_preregister_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_preregister_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_preregister_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_preregister_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/preregister', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_preregister_post(self, user_pre_register_request, **kwargs):  # noqa: E501
        """user_preregister_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_preregister_post(user_pre_register_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserPreRegisterRequest user_pre_register_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_preregister_post_with_http_info(user_pre_register_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_preregister_post_with_http_info(user_pre_register_request, **kwargs)  # noqa: E501
            return data

    def user_preregister_post_with_http_info(self, user_pre_register_request, **kwargs):  # noqa: E501
        """user_preregister_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_preregister_post_with_http_info(user_pre_register_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserPreRegisterRequest user_pre_register_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_pre_register_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_preregister_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_pre_register_request' is set
        if self.api_client.client_side_validation and ('user_pre_register_request' not in params or
                                                       params['user_pre_register_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_pre_register_request` when calling `user_preregister_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_pre_register_request' in params:
            body_params = params['user_pre_register_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/preregister', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPrivateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_put(self, user_update_request, **kwargs):  # noqa: E501
        """user_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_put(user_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUpdateRequest user_update_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_put_with_http_info(user_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_put_with_http_info(user_update_request, **kwargs)  # noqa: E501
            return data

    def user_put_with_http_info(self, user_update_request, **kwargs):  # noqa: E501
        """user_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_put_with_http_info(user_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUpdateRequest user_update_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_update_request' is set
        if self.api_client.client_side_validation and ('user_update_request' not in params or
                                                       params['user_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_update_request` when calling `user_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_update_request' in params:
            body_params = params['user_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPrivateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_in_get(self, **kwargs):  # noqa: E501
        """user_rated_in_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_in_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_in_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_in_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_in_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_in_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_in_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_in_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedRatedResponseUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_in_options(self, **kwargs):  # noqa: E501
        """user_rated_in_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_in_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_in_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_in_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_in_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_in_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_in_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_in_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/in', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_out_posts_get(self, **kwargs):  # noqa: E501
        """user_rated_out_posts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_posts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponsePost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_out_posts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_out_posts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_out_posts_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_out_posts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_posts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponsePost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_out_posts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/out/posts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedRatedResponsePost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_out_posts_options(self, **kwargs):  # noqa: E501
        """user_rated_out_posts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_posts_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_out_posts_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_out_posts_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_out_posts_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_out_posts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_posts_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_out_posts_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/out/posts', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_out_users_get(self, **kwargs):  # noqa: E501
        """user_rated_out_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_out_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_out_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_out_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_out_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str page:
        :return: PagedRatedResponseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_out_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/out/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedRatedResponseUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_rated_out_users_options(self, **kwargs):  # noqa: E501
        """user_rated_out_users_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_users_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_rated_out_users_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_rated_out_users_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_rated_out_users_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_rated_out_users_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_rated_out_users_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_rated_out_users_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/rated/out/users', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_stake_options(self, **kwargs):  # noqa: E501
        """user_stake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_stake_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_stake_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_stake_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_stake_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_stake_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_stake_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_stake_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/stake', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_stake_post(self, user_stake_request, **kwargs):  # noqa: E501
        """user_stake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_stake_post(user_stake_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserStakeRequest user_stake_request: (required)
        :return: AnyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_stake_post_with_http_info(user_stake_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_stake_post_with_http_info(user_stake_request, **kwargs)  # noqa: E501
            return data

    def user_stake_post_with_http_info(self, user_stake_request, **kwargs):  # noqa: E501
        """user_stake_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_stake_post_with_http_info(user_stake_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserStakeRequest user_stake_request: (required)
        :return: AnyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_stake_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_stake_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_stake_request' is set
        if self.api_client.client_side_validation and ('user_stake_request' not in params or
                                                       params['user_stake_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_stake_request` when calling `user_stake_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_stake_request' in params:
            body_params = params['user_stake_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/stake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_sync_contacts_options(self, **kwargs):  # noqa: E501
        """user_sync_contacts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sync_contacts_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_sync_contacts_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_sync_contacts_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_sync_contacts_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_sync_contacts_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sync_contacts_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_sync_contacts_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/syncContacts', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_sync_contacts_post(self, sync_contacts_request, **kwargs):  # noqa: E501
        """user_sync_contacts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sync_contacts_post(sync_contacts_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyncContactsRequest sync_contacts_request: (required)
        :return: SyncContactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_sync_contacts_post_with_http_info(sync_contacts_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_sync_contacts_post_with_http_info(sync_contacts_request, **kwargs)  # noqa: E501
            return data

    def user_sync_contacts_post_with_http_info(self, sync_contacts_request, **kwargs):  # noqa: E501
        """user_sync_contacts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sync_contacts_post_with_http_info(sync_contacts_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyncContactsRequest sync_contacts_request: (required)
        :return: SyncContactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_contacts_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_sync_contacts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sync_contacts_request' is set
        if self.api_client.client_side_validation and ('sync_contacts_request' not in params or
                                                       params['sync_contacts_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sync_contacts_request` when calling `user_sync_contacts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_contacts_request' in params:
            body_params = params['sync_contacts_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/syncContacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncContactsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_transfer_options(self, **kwargs):  # noqa: E501
        """user_transfer_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_transfer_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_transfer_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_transfer_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_transfer_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_transfer_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_transfer_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_transfer_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/transfer', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_transfer_post(self, user_transfer_request, **kwargs):  # noqa: E501
        """user_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_transfer_post(user_transfer_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTransferRequest user_transfer_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_transfer_post_with_http_info(user_transfer_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_transfer_post_with_http_info(user_transfer_request, **kwargs)  # noqa: E501
            return data

    def user_transfer_post_with_http_info(self, user_transfer_request, **kwargs):  # noqa: E501
        """user_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_transfer_post_with_http_info(user_transfer_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserTransferRequest user_transfer_request: (required)
        :return: UserReadPrivateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_transfer_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_transfer_request' is set
        if self.api_client.client_side_validation and ('user_transfer_request' not in params or
                                                       params['user_transfer_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_transfer_request` when calling `user_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_transfer_request' in params:
            body_params = params['user_transfer_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadPrivateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_upload_options(self, **kwargs):  # noqa: E501
        """user_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_upload_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_upload_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_upload_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_upload_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_upload_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/upload', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_upload_post(self, user_upload_request, **kwargs):  # noqa: E501
        """user_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_post(user_upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUploadRequest user_upload_request: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_upload_post_with_http_info(user_upload_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_upload_post_with_http_info(user_upload_request, **kwargs)  # noqa: E501
            return data

    def user_upload_post_with_http_info(self, user_upload_request, **kwargs):  # noqa: E501
        """user_upload_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_post_with_http_info(user_upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserUploadRequest user_upload_request: (required)
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_upload_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_upload_request' is set
        if self.api_client.client_side_validation and ('user_upload_request' not in params or
                                                       params['user_upload_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_upload_request` when calling `user_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_upload_request' in params:
            body_params = params['user_upload_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_user_rate_options(self, **kwargs):  # noqa: E501
        """user_user_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_user_rate_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_user_rate_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_user_rate_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_user_rate_options_with_http_info(self, **kwargs):  # noqa: E501
        """user_user_rate_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_user_rate_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_rate_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/userRate', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_user_rate_post(self, rating_update_request, **kwargs):  # noqa: E501
        """user_user_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_user_rate_post(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_user_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.user_user_rate_post_with_http_info(rating_update_request, **kwargs)  # noqa: E501
            return data

    def user_user_rate_post_with_http_info(self, rating_update_request, **kwargs):  # noqa: E501
        """user_user_rate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_user_rate_post_with_http_info(rating_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingUpdateRequest rating_update_request: (required)
        :return: RatingUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_rate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_update_request' is set
        if self.api_client.client_side_validation and ('rating_update_request' not in params or
                                                       params['rating_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rating_update_request` when calling `user_user_rate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rating_update_request' in params:
            body_params = params['rating_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['newgraph-api-eu-dev']  # noqa: E501

        return self.api_client.call_api(
            '/user/userRate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
