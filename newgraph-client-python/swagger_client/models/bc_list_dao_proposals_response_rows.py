# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BcListDaoProposalsResponseRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'proposer': 'str',
        'vote_start': 'str',
        'more': 'bool',
        'next_key': 'str',
        'vote_end': 'str',
        'id': 'float',
        'title': 'str',
        'vote_no': 'BcListDaoProposalsResponseVoteNo',
        'url': 'str',
        'vote_yes': 'BcListDaoProposalsResponseVoteNo',
        'status': 'str'
    }

    attribute_map = {
        'summary': 'summary',
        'proposer': 'proposer',
        'vote_start': 'vote_start',
        'more': 'more',
        'next_key': 'next_key',
        'vote_end': 'vote_end',
        'id': 'id',
        'title': 'title',
        'vote_no': 'vote_no',
        'url': 'url',
        'vote_yes': 'vote_yes',
        'status': 'status'
    }

    def __init__(self, summary=None, proposer=None, vote_start=None, more=None, next_key=None, vote_end=None, id=None, title=None, vote_no=None, url=None, vote_yes=None, status=None, _configuration=None):  # noqa: E501
        """BcListDaoProposalsResponseRows - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._summary = None
        self._proposer = None
        self._vote_start = None
        self._more = None
        self._next_key = None
        self._vote_end = None
        self._id = None
        self._title = None
        self._vote_no = None
        self._url = None
        self._vote_yes = None
        self._status = None
        self.discriminator = None

        if summary is not None:
            self.summary = summary
        if proposer is not None:
            self.proposer = proposer
        if vote_start is not None:
            self.vote_start = vote_start
        if more is not None:
            self.more = more
        if next_key is not None:
            self.next_key = next_key
        if vote_end is not None:
            self.vote_end = vote_end
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if vote_no is not None:
            self.vote_no = vote_no
        if url is not None:
            self.url = url
        if vote_yes is not None:
            self.vote_yes = vote_yes
        if status is not None:
            self.status = status

    @property
    def summary(self):
        """Gets the summary of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The summary of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BcListDaoProposalsResponseRows.


        :param summary: The summary of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def proposer(self):
        """Gets the proposer of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The proposer of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._proposer

    @proposer.setter
    def proposer(self, proposer):
        """Sets the proposer of this BcListDaoProposalsResponseRows.


        :param proposer: The proposer of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._proposer = proposer

    @property
    def vote_start(self):
        """Gets the vote_start of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The vote_start of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._vote_start

    @vote_start.setter
    def vote_start(self, vote_start):
        """Sets the vote_start of this BcListDaoProposalsResponseRows.


        :param vote_start: The vote_start of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._vote_start = vote_start

    @property
    def more(self):
        """Gets the more of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The more of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: bool
        """
        return self._more

    @more.setter
    def more(self, more):
        """Sets the more of this BcListDaoProposalsResponseRows.


        :param more: The more of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: bool
        """

        self._more = more

    @property
    def next_key(self):
        """Gets the next_key of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The next_key of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._next_key

    @next_key.setter
    def next_key(self, next_key):
        """Sets the next_key of this BcListDaoProposalsResponseRows.


        :param next_key: The next_key of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._next_key = next_key

    @property
    def vote_end(self):
        """Gets the vote_end of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The vote_end of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._vote_end

    @vote_end.setter
    def vote_end(self, vote_end):
        """Sets the vote_end of this BcListDaoProposalsResponseRows.


        :param vote_end: The vote_end of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._vote_end = vote_end

    @property
    def id(self):
        """Gets the id of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The id of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BcListDaoProposalsResponseRows.


        :param id: The id of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The title of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BcListDaoProposalsResponseRows.


        :param title: The title of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def vote_no(self):
        """Gets the vote_no of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The vote_no of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: BcListDaoProposalsResponseVoteNo
        """
        return self._vote_no

    @vote_no.setter
    def vote_no(self, vote_no):
        """Sets the vote_no of this BcListDaoProposalsResponseRows.


        :param vote_no: The vote_no of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: BcListDaoProposalsResponseVoteNo
        """

        self._vote_no = vote_no

    @property
    def url(self):
        """Gets the url of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The url of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BcListDaoProposalsResponseRows.


        :param url: The url of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def vote_yes(self):
        """Gets the vote_yes of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The vote_yes of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: BcListDaoProposalsResponseVoteNo
        """
        return self._vote_yes

    @vote_yes.setter
    def vote_yes(self, vote_yes):
        """Sets the vote_yes of this BcListDaoProposalsResponseRows.


        :param vote_yes: The vote_yes of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: BcListDaoProposalsResponseVoteNo
        """

        self._vote_yes = vote_yes

    @property
    def status(self):
        """Gets the status of this BcListDaoProposalsResponseRows.  # noqa: E501


        :return: The status of this BcListDaoProposalsResponseRows.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BcListDaoProposalsResponseRows.


        :param status: The status of this BcListDaoProposalsResponseRows.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcListDaoProposalsResponseRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcListDaoProposalsResponseRows):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BcListDaoProposalsResponseRows):
            return True

        return self.to_dict() != other.to_dict()
