# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BcCreateDaoProposal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'vote_start': 'str',
        'dao_id': 'str',
        'dao_owner': 'str',
        'vote_end': 'str',
        'title': 'str',
        'url': 'str'
    }

    attribute_map = {
        'summary': 'summary',
        'vote_start': 'vote_start',
        'dao_id': 'dao_id',
        'dao_owner': 'dao_owner',
        'vote_end': 'vote_end',
        'title': 'title',
        'url': 'url'
    }

    def __init__(self, summary=None, vote_start=None, dao_id=None, dao_owner=None, vote_end=None, title=None, url=None, _configuration=None):  # noqa: E501
        """BcCreateDaoProposal - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._summary = None
        self._vote_start = None
        self._dao_id = None
        self._dao_owner = None
        self._vote_end = None
        self._title = None
        self._url = None
        self.discriminator = None

        if summary is not None:
            self.summary = summary
        if vote_start is not None:
            self.vote_start = vote_start
        if dao_id is not None:
            self.dao_id = dao_id
        if dao_owner is not None:
            self.dao_owner = dao_owner
        if vote_end is not None:
            self.vote_end = vote_end
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url

    @property
    def summary(self):
        """Gets the summary of this BcCreateDaoProposal.  # noqa: E501


        :return: The summary of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BcCreateDaoProposal.


        :param summary: The summary of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def vote_start(self):
        """Gets the vote_start of this BcCreateDaoProposal.  # noqa: E501


        :return: The vote_start of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._vote_start

    @vote_start.setter
    def vote_start(self, vote_start):
        """Sets the vote_start of this BcCreateDaoProposal.


        :param vote_start: The vote_start of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._vote_start = vote_start

    @property
    def dao_id(self):
        """Gets the dao_id of this BcCreateDaoProposal.  # noqa: E501


        :return: The dao_id of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._dao_id

    @dao_id.setter
    def dao_id(self, dao_id):
        """Sets the dao_id of this BcCreateDaoProposal.


        :param dao_id: The dao_id of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._dao_id = dao_id

    @property
    def dao_owner(self):
        """Gets the dao_owner of this BcCreateDaoProposal.  # noqa: E501


        :return: The dao_owner of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._dao_owner

    @dao_owner.setter
    def dao_owner(self, dao_owner):
        """Sets the dao_owner of this BcCreateDaoProposal.


        :param dao_owner: The dao_owner of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._dao_owner = dao_owner

    @property
    def vote_end(self):
        """Gets the vote_end of this BcCreateDaoProposal.  # noqa: E501


        :return: The vote_end of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._vote_end

    @vote_end.setter
    def vote_end(self, vote_end):
        """Sets the vote_end of this BcCreateDaoProposal.


        :param vote_end: The vote_end of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._vote_end = vote_end

    @property
    def title(self):
        """Gets the title of this BcCreateDaoProposal.  # noqa: E501


        :return: The title of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BcCreateDaoProposal.


        :param title: The title of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this BcCreateDaoProposal.  # noqa: E501


        :return: The url of this BcCreateDaoProposal.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BcCreateDaoProposal.


        :param url: The url of this BcCreateDaoProposal.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcCreateDaoProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcCreateDaoProposal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BcCreateDaoProposal):
            return True

        return self.to_dict() != other.to_dict()
