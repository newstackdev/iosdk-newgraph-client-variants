# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserInvitationPagedListReadPublicResponseInvitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'youtube': 'str',
        'created': 'str',
        'spotify': 'str',
        'facebook': 'str',
        'tumblr': 'str',
        'telegram': 'str',
        'pinterest': 'str',
        'instagram': 'str',
        'medium': 'str',
        'soundcloud': 'str',
        'snapchat': 'str',
        'apple': 'str',
        'twitter': 'str',
        'discord': 'str',
        'tiktok': 'str',
        'reddit': 'str',
        'signal': 'str',
        'hash': 'str'
    }

    attribute_map = {
        'youtube': 'youtube',
        'created': 'created',
        'spotify': 'spotify',
        'facebook': 'facebook',
        'tumblr': 'tumblr',
        'telegram': 'telegram',
        'pinterest': 'pinterest',
        'instagram': 'instagram',
        'medium': 'medium',
        'soundcloud': 'soundcloud',
        'snapchat': 'snapchat',
        'apple': 'apple',
        'twitter': 'twitter',
        'discord': 'discord',
        'tiktok': 'tiktok',
        'reddit': 'reddit',
        'signal': 'signal',
        'hash': 'hash'
    }

    def __init__(self, youtube=None, created=None, spotify=None, facebook=None, tumblr=None, telegram=None, pinterest=None, instagram=None, medium=None, soundcloud=None, snapchat=None, apple=None, twitter=None, discord=None, tiktok=None, reddit=None, signal=None, hash=None, _configuration=None):  # noqa: E501
        """UserInvitationPagedListReadPublicResponseInvitation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._youtube = None
        self._created = None
        self._spotify = None
        self._facebook = None
        self._tumblr = None
        self._telegram = None
        self._pinterest = None
        self._instagram = None
        self._medium = None
        self._soundcloud = None
        self._snapchat = None
        self._apple = None
        self._twitter = None
        self._discord = None
        self._tiktok = None
        self._reddit = None
        self._signal = None
        self._hash = None
        self.discriminator = None

        if youtube is not None:
            self.youtube = youtube
        if created is not None:
            self.created = created
        if spotify is not None:
            self.spotify = spotify
        if facebook is not None:
            self.facebook = facebook
        if tumblr is not None:
            self.tumblr = tumblr
        if telegram is not None:
            self.telegram = telegram
        if pinterest is not None:
            self.pinterest = pinterest
        if instagram is not None:
            self.instagram = instagram
        if medium is not None:
            self.medium = medium
        if soundcloud is not None:
            self.soundcloud = soundcloud
        if snapchat is not None:
            self.snapchat = snapchat
        if apple is not None:
            self.apple = apple
        if twitter is not None:
            self.twitter = twitter
        if discord is not None:
            self.discord = discord
        if tiktok is not None:
            self.tiktok = tiktok
        if reddit is not None:
            self.reddit = reddit
        if signal is not None:
            self.signal = signal
        if hash is not None:
            self.hash = hash

    @property
    def youtube(self):
        """Gets the youtube of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The youtube of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._youtube

    @youtube.setter
    def youtube(self, youtube):
        """Sets the youtube of this UserInvitationPagedListReadPublicResponseInvitation.


        :param youtube: The youtube of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._youtube = youtube

    @property
    def created(self):
        """Gets the created of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The created of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserInvitationPagedListReadPublicResponseInvitation.


        :param created: The created of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def spotify(self):
        """Gets the spotify of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The spotify of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._spotify

    @spotify.setter
    def spotify(self, spotify):
        """Sets the spotify of this UserInvitationPagedListReadPublicResponseInvitation.


        :param spotify: The spotify of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._spotify = spotify

    @property
    def facebook(self):
        """Gets the facebook of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The facebook of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this UserInvitationPagedListReadPublicResponseInvitation.


        :param facebook: The facebook of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def tumblr(self):
        """Gets the tumblr of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The tumblr of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._tumblr

    @tumblr.setter
    def tumblr(self, tumblr):
        """Sets the tumblr of this UserInvitationPagedListReadPublicResponseInvitation.


        :param tumblr: The tumblr of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._tumblr = tumblr

    @property
    def telegram(self):
        """Gets the telegram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The telegram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this UserInvitationPagedListReadPublicResponseInvitation.


        :param telegram: The telegram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._telegram = telegram

    @property
    def pinterest(self):
        """Gets the pinterest of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The pinterest of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._pinterest

    @pinterest.setter
    def pinterest(self, pinterest):
        """Sets the pinterest of this UserInvitationPagedListReadPublicResponseInvitation.


        :param pinterest: The pinterest of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._pinterest = pinterest

    @property
    def instagram(self):
        """Gets the instagram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The instagram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this UserInvitationPagedListReadPublicResponseInvitation.


        :param instagram: The instagram of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def medium(self):
        """Gets the medium of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The medium of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this UserInvitationPagedListReadPublicResponseInvitation.


        :param medium: The medium of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._medium = medium

    @property
    def soundcloud(self):
        """Gets the soundcloud of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The soundcloud of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._soundcloud

    @soundcloud.setter
    def soundcloud(self, soundcloud):
        """Sets the soundcloud of this UserInvitationPagedListReadPublicResponseInvitation.


        :param soundcloud: The soundcloud of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._soundcloud = soundcloud

    @property
    def snapchat(self):
        """Gets the snapchat of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The snapchat of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._snapchat

    @snapchat.setter
    def snapchat(self, snapchat):
        """Sets the snapchat of this UserInvitationPagedListReadPublicResponseInvitation.


        :param snapchat: The snapchat of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._snapchat = snapchat

    @property
    def apple(self):
        """Gets the apple of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The apple of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._apple

    @apple.setter
    def apple(self, apple):
        """Sets the apple of this UserInvitationPagedListReadPublicResponseInvitation.


        :param apple: The apple of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._apple = apple

    @property
    def twitter(self):
        """Gets the twitter of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The twitter of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this UserInvitationPagedListReadPublicResponseInvitation.


        :param twitter: The twitter of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def discord(self):
        """Gets the discord of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The discord of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this UserInvitationPagedListReadPublicResponseInvitation.


        :param discord: The discord of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._discord = discord

    @property
    def tiktok(self):
        """Gets the tiktok of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The tiktok of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._tiktok

    @tiktok.setter
    def tiktok(self, tiktok):
        """Sets the tiktok of this UserInvitationPagedListReadPublicResponseInvitation.


        :param tiktok: The tiktok of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._tiktok = tiktok

    @property
    def reddit(self):
        """Gets the reddit of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The reddit of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._reddit

    @reddit.setter
    def reddit(self, reddit):
        """Sets the reddit of this UserInvitationPagedListReadPublicResponseInvitation.


        :param reddit: The reddit of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._reddit = reddit

    @property
    def signal(self):
        """Gets the signal of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The signal of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this UserInvitationPagedListReadPublicResponseInvitation.


        :param signal: The signal of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._signal = signal

    @property
    def hash(self):
        """Gets the hash of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501


        :return: The hash of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this UserInvitationPagedListReadPublicResponseInvitation.


        :param hash: The hash of this UserInvitationPagedListReadPublicResponseInvitation.  # noqa: E501
        :type: str
        """

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInvitationPagedListReadPublicResponseInvitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInvitationPagedListReadPublicResponseInvitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInvitationPagedListReadPublicResponseInvitation):
            return True

        return self.to_dict() != other.to_dict()
