# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserPreRegisterRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_testgroup': 'str',
        'consent_privacy_policy': 'str',
        'phone': 'str',
        'full_name': 'str',
        'consent_email': 'str',
        'email': 'str'
    }

    attribute_map = {
        'consent_testgroup': 'consentTestgroup',
        'consent_privacy_policy': 'consentPrivacyPolicy',
        'phone': 'phone',
        'full_name': 'fullName',
        'consent_email': 'consentEmail',
        'email': 'email'
    }

    def __init__(self, consent_testgroup=None, consent_privacy_policy=None, phone=None, full_name=None, consent_email=None, email=None, _configuration=None):  # noqa: E501
        """UserPreRegisterRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._consent_testgroup = None
        self._consent_privacy_policy = None
        self._phone = None
        self._full_name = None
        self._consent_email = None
        self._email = None
        self.discriminator = None

        if consent_testgroup is not None:
            self.consent_testgroup = consent_testgroup
        if consent_privacy_policy is not None:
            self.consent_privacy_policy = consent_privacy_policy
        self.phone = phone
        if full_name is not None:
            self.full_name = full_name
        if consent_email is not None:
            self.consent_email = consent_email
        if email is not None:
            self.email = email

    @property
    def consent_testgroup(self):
        """Gets the consent_testgroup of this UserPreRegisterRequest.  # noqa: E501


        :return: The consent_testgroup of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_testgroup

    @consent_testgroup.setter
    def consent_testgroup(self, consent_testgroup):
        """Sets the consent_testgroup of this UserPreRegisterRequest.


        :param consent_testgroup: The consent_testgroup of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """

        self._consent_testgroup = consent_testgroup

    @property
    def consent_privacy_policy(self):
        """Gets the consent_privacy_policy of this UserPreRegisterRequest.  # noqa: E501


        :return: The consent_privacy_policy of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_privacy_policy

    @consent_privacy_policy.setter
    def consent_privacy_policy(self, consent_privacy_policy):
        """Sets the consent_privacy_policy of this UserPreRegisterRequest.


        :param consent_privacy_policy: The consent_privacy_policy of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """

        self._consent_privacy_policy = consent_privacy_policy

    @property
    def phone(self):
        """Gets the phone of this UserPreRegisterRequest.  # noqa: E501


        :return: The phone of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserPreRegisterRequest.


        :param phone: The phone of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def full_name(self):
        """Gets the full_name of this UserPreRegisterRequest.  # noqa: E501


        :return: The full_name of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserPreRegisterRequest.


        :param full_name: The full_name of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def consent_email(self):
        """Gets the consent_email of this UserPreRegisterRequest.  # noqa: E501


        :return: The consent_email of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_email

    @consent_email.setter
    def consent_email(self, consent_email):
        """Sets the consent_email of this UserPreRegisterRequest.


        :param consent_email: The consent_email of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """

        self._consent_email = consent_email

    @property
    def email(self):
        """Gets the email of this UserPreRegisterRequest.  # noqa: E501


        :return: The email of this UserPreRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserPreRegisterRequest.


        :param email: The email of this UserPreRegisterRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPreRegisterRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPreRegisterRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserPreRegisterRequest):
            return True

        return self.to_dict() != other.to_dict()
