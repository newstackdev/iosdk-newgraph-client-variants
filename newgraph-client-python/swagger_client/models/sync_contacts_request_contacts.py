# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SyncContactsRequestContacts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birthday': 'str',
        'identifier': 'str',
        'android_account_name': 'str',
        'display_name': 'str',
        'prefix': 'str',
        'given_name': 'str',
        'job_title': 'str',
        'phones': 'list[SyncContactsRequestPhones]',
        'avatar': 'str',
        'suffix': 'str',
        'postal_addresses': 'list[SyncContactsRequestPostalAddresses]',
        'emails': 'list[SyncContactsRequestPhones]',
        'android_account_type': 'str',
        'family_name': 'str',
        'middle_name': 'str',
        'company': 'str',
        'android_account_type_raw': 'str'
    }

    attribute_map = {
        'birthday': 'birthday',
        'identifier': 'identifier',
        'android_account_name': 'androidAccountName',
        'display_name': 'displayName',
        'prefix': 'prefix',
        'given_name': 'givenName',
        'job_title': 'jobTitle',
        'phones': 'phones',
        'avatar': 'avatar',
        'suffix': 'suffix',
        'postal_addresses': 'postalAddresses',
        'emails': 'emails',
        'android_account_type': 'androidAccountType',
        'family_name': 'familyName',
        'middle_name': 'middleName',
        'company': 'company',
        'android_account_type_raw': 'androidAccountTypeRaw'
    }

    def __init__(self, birthday=None, identifier=None, android_account_name=None, display_name=None, prefix=None, given_name=None, job_title=None, phones=None, avatar=None, suffix=None, postal_addresses=None, emails=None, android_account_type=None, family_name=None, middle_name=None, company=None, android_account_type_raw=None, _configuration=None):  # noqa: E501
        """SyncContactsRequestContacts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._birthday = None
        self._identifier = None
        self._android_account_name = None
        self._display_name = None
        self._prefix = None
        self._given_name = None
        self._job_title = None
        self._phones = None
        self._avatar = None
        self._suffix = None
        self._postal_addresses = None
        self._emails = None
        self._android_account_type = None
        self._family_name = None
        self._middle_name = None
        self._company = None
        self._android_account_type_raw = None
        self.discriminator = None

        if birthday is not None:
            self.birthday = birthday
        if identifier is not None:
            self.identifier = identifier
        if android_account_name is not None:
            self.android_account_name = android_account_name
        if display_name is not None:
            self.display_name = display_name
        if prefix is not None:
            self.prefix = prefix
        if given_name is not None:
            self.given_name = given_name
        if job_title is not None:
            self.job_title = job_title
        if phones is not None:
            self.phones = phones
        if avatar is not None:
            self.avatar = avatar
        if suffix is not None:
            self.suffix = suffix
        if postal_addresses is not None:
            self.postal_addresses = postal_addresses
        if emails is not None:
            self.emails = emails
        if android_account_type is not None:
            self.android_account_type = android_account_type
        if family_name is not None:
            self.family_name = family_name
        if middle_name is not None:
            self.middle_name = middle_name
        if company is not None:
            self.company = company
        if android_account_type_raw is not None:
            self.android_account_type_raw = android_account_type_raw

    @property
    def birthday(self):
        """Gets the birthday of this SyncContactsRequestContacts.  # noqa: E501


        :return: The birthday of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this SyncContactsRequestContacts.


        :param birthday: The birthday of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._birthday = birthday

    @property
    def identifier(self):
        """Gets the identifier of this SyncContactsRequestContacts.  # noqa: E501


        :return: The identifier of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SyncContactsRequestContacts.


        :param identifier: The identifier of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def android_account_name(self):
        """Gets the android_account_name of this SyncContactsRequestContacts.  # noqa: E501


        :return: The android_account_name of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._android_account_name

    @android_account_name.setter
    def android_account_name(self, android_account_name):
        """Sets the android_account_name of this SyncContactsRequestContacts.


        :param android_account_name: The android_account_name of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._android_account_name = android_account_name

    @property
    def display_name(self):
        """Gets the display_name of this SyncContactsRequestContacts.  # noqa: E501


        :return: The display_name of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SyncContactsRequestContacts.


        :param display_name: The display_name of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def prefix(self):
        """Gets the prefix of this SyncContactsRequestContacts.  # noqa: E501


        :return: The prefix of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this SyncContactsRequestContacts.


        :param prefix: The prefix of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def given_name(self):
        """Gets the given_name of this SyncContactsRequestContacts.  # noqa: E501


        :return: The given_name of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SyncContactsRequestContacts.


        :param given_name: The given_name of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def job_title(self):
        """Gets the job_title of this SyncContactsRequestContacts.  # noqa: E501


        :return: The job_title of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this SyncContactsRequestContacts.


        :param job_title: The job_title of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def phones(self):
        """Gets the phones of this SyncContactsRequestContacts.  # noqa: E501


        :return: The phones of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: list[SyncContactsRequestPhones]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this SyncContactsRequestContacts.


        :param phones: The phones of this SyncContactsRequestContacts.  # noqa: E501
        :type: list[SyncContactsRequestPhones]
        """

        self._phones = phones

    @property
    def avatar(self):
        """Gets the avatar of this SyncContactsRequestContacts.  # noqa: E501


        :return: The avatar of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this SyncContactsRequestContacts.


        :param avatar: The avatar of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def suffix(self):
        """Gets the suffix of this SyncContactsRequestContacts.  # noqa: E501


        :return: The suffix of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this SyncContactsRequestContacts.


        :param suffix: The suffix of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def postal_addresses(self):
        """Gets the postal_addresses of this SyncContactsRequestContacts.  # noqa: E501


        :return: The postal_addresses of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: list[SyncContactsRequestPostalAddresses]
        """
        return self._postal_addresses

    @postal_addresses.setter
    def postal_addresses(self, postal_addresses):
        """Sets the postal_addresses of this SyncContactsRequestContacts.


        :param postal_addresses: The postal_addresses of this SyncContactsRequestContacts.  # noqa: E501
        :type: list[SyncContactsRequestPostalAddresses]
        """

        self._postal_addresses = postal_addresses

    @property
    def emails(self):
        """Gets the emails of this SyncContactsRequestContacts.  # noqa: E501


        :return: The emails of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: list[SyncContactsRequestPhones]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this SyncContactsRequestContacts.


        :param emails: The emails of this SyncContactsRequestContacts.  # noqa: E501
        :type: list[SyncContactsRequestPhones]
        """

        self._emails = emails

    @property
    def android_account_type(self):
        """Gets the android_account_type of this SyncContactsRequestContacts.  # noqa: E501


        :return: The android_account_type of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._android_account_type

    @android_account_type.setter
    def android_account_type(self, android_account_type):
        """Sets the android_account_type of this SyncContactsRequestContacts.


        :param android_account_type: The android_account_type of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._android_account_type = android_account_type

    @property
    def family_name(self):
        """Gets the family_name of this SyncContactsRequestContacts.  # noqa: E501


        :return: The family_name of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this SyncContactsRequestContacts.


        :param family_name: The family_name of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def middle_name(self):
        """Gets the middle_name of this SyncContactsRequestContacts.  # noqa: E501


        :return: The middle_name of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this SyncContactsRequestContacts.


        :param middle_name: The middle_name of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def company(self):
        """Gets the company of this SyncContactsRequestContacts.  # noqa: E501


        :return: The company of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SyncContactsRequestContacts.


        :param company: The company of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def android_account_type_raw(self):
        """Gets the android_account_type_raw of this SyncContactsRequestContacts.  # noqa: E501


        :return: The android_account_type_raw of this SyncContactsRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._android_account_type_raw

    @android_account_type_raw.setter
    def android_account_type_raw(self, android_account_type_raw):
        """Sets the android_account_type_raw of this SyncContactsRequestContacts.


        :param android_account_type_raw: The android_account_type_raw of this SyncContactsRequestContacts.  # noqa: E501
        :type: str
        """

        self._android_account_type_raw = android_account_type_raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncContactsRequestContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncContactsRequestContacts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SyncContactsRequestContacts):
            return True

        return self.to_dict() != other.to_dict()
