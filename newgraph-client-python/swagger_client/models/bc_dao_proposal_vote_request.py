# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BcDaoProposalVoteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proposal_type': 'str',
        'quantity': 'str',
        'proposal_id': 'str',
        'dao_id': 'str',
        'dao_owner': 'str',
        'voter': 'str',
        'option': 'str'
    }

    attribute_map = {
        'proposal_type': 'proposal_type',
        'quantity': 'quantity',
        'proposal_id': 'proposal_id',
        'dao_id': 'dao_id',
        'dao_owner': 'dao_owner',
        'voter': 'voter',
        'option': 'option'
    }

    def __init__(self, proposal_type=None, quantity=None, proposal_id=None, dao_id=None, dao_owner=None, voter=None, option=None, _configuration=None):  # noqa: E501
        """BcDaoProposalVoteRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._proposal_type = None
        self._quantity = None
        self._proposal_id = None
        self._dao_id = None
        self._dao_owner = None
        self._voter = None
        self._option = None
        self.discriminator = None

        if proposal_type is not None:
            self.proposal_type = proposal_type
        self.quantity = quantity
        self.proposal_id = proposal_id
        if dao_id is not None:
            self.dao_id = dao_id
        if dao_owner is not None:
            self.dao_owner = dao_owner
        self.voter = voter
        self.option = option

    @property
    def proposal_type(self):
        """Gets the proposal_type of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The proposal_type of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._proposal_type

    @proposal_type.setter
    def proposal_type(self, proposal_type):
        """Sets the proposal_type of this BcDaoProposalVoteRequest.


        :param proposal_type: The proposal_type of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """

        self._proposal_type = proposal_type

    @property
    def quantity(self):
        """Gets the quantity of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The quantity of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BcDaoProposalVoteRequest.


        :param quantity: The quantity of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def proposal_id(self):
        """Gets the proposal_id of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The proposal_id of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this BcDaoProposalVoteRequest.


        :param proposal_id: The proposal_id of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and proposal_id is None:
            raise ValueError("Invalid value for `proposal_id`, must not be `None`")  # noqa: E501

        self._proposal_id = proposal_id

    @property
    def dao_id(self):
        """Gets the dao_id of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The dao_id of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._dao_id

    @dao_id.setter
    def dao_id(self, dao_id):
        """Sets the dao_id of this BcDaoProposalVoteRequest.


        :param dao_id: The dao_id of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """

        self._dao_id = dao_id

    @property
    def dao_owner(self):
        """Gets the dao_owner of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The dao_owner of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._dao_owner

    @dao_owner.setter
    def dao_owner(self, dao_owner):
        """Sets the dao_owner of this BcDaoProposalVoteRequest.


        :param dao_owner: The dao_owner of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """

        self._dao_owner = dao_owner

    @property
    def voter(self):
        """Gets the voter of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The voter of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._voter

    @voter.setter
    def voter(self, voter):
        """Sets the voter of this BcDaoProposalVoteRequest.


        :param voter: The voter of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and voter is None:
            raise ValueError("Invalid value for `voter`, must not be `None`")  # noqa: E501

        self._voter = voter

    @property
    def option(self):
        """Gets the option of this BcDaoProposalVoteRequest.  # noqa: E501


        :return: The option of this BcDaoProposalVoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this BcDaoProposalVoteRequest.


        :param option: The option of this BcDaoProposalVoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and option is None:
            raise ValueError("Invalid value for `option`, must not be `None`")  # noqa: E501

        self._option = option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcDaoProposalVoteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcDaoProposalVoteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BcDaoProposalVoteRequest):
            return True

        return self.to_dict() != other.to_dict()
