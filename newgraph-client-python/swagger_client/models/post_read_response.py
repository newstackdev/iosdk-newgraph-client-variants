# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PostReadResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cover_content_url': 'str',
        'mood_id': 'str',
        'created': 'str',
        'author': 'MoodPagedListReadPublicResponseAuthor',
        'latitude': 'float',
        'moods': 'list[MoodPagedListReadPublicResponseMoods]',
        'description': 'str',
        'aspect_ratio': 'float',
        'title': 'str',
        'content': 'str',
        'tags': 'list[MoodPagedListReadPublicResponseTags]',
        'license': 'str',
        'content_url': 'str',
        'blur_hash': 'str',
        'newcoin_mint_tx': 'str',
        'id': 'str',
        'embed': 'str',
        'updated': 'str',
        'content_type': 'str',
        'longitude': 'float'
    }

    attribute_map = {
        'cover_content_url': 'coverContentUrl',
        'mood_id': 'moodId',
        'created': 'created',
        'author': 'author',
        'latitude': 'latitude',
        'moods': 'moods',
        'description': 'description',
        'aspect_ratio': 'aspectRatio',
        'title': 'title',
        'content': 'content',
        'tags': 'tags',
        'license': 'license',
        'content_url': 'contentUrl',
        'blur_hash': 'blurHash',
        'newcoin_mint_tx': 'newcoinMintTx',
        'id': 'id',
        'embed': 'embed',
        'updated': 'updated',
        'content_type': 'contentType',
        'longitude': 'longitude'
    }

    def __init__(self, cover_content_url=None, mood_id=None, created=None, author=None, latitude=None, moods=None, description=None, aspect_ratio=None, title=None, content=None, tags=None, license=None, content_url=None, blur_hash=None, newcoin_mint_tx=None, id=None, embed=None, updated=None, content_type=None, longitude=None, _configuration=None):  # noqa: E501
        """PostReadResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cover_content_url = None
        self._mood_id = None
        self._created = None
        self._author = None
        self._latitude = None
        self._moods = None
        self._description = None
        self._aspect_ratio = None
        self._title = None
        self._content = None
        self._tags = None
        self._license = None
        self._content_url = None
        self._blur_hash = None
        self._newcoin_mint_tx = None
        self._id = None
        self._embed = None
        self._updated = None
        self._content_type = None
        self._longitude = None
        self.discriminator = None

        if cover_content_url is not None:
            self.cover_content_url = cover_content_url
        if mood_id is not None:
            self.mood_id = mood_id
        if created is not None:
            self.created = created
        if author is not None:
            self.author = author
        if latitude is not None:
            self.latitude = latitude
        if moods is not None:
            self.moods = moods
        if description is not None:
            self.description = description
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if title is not None:
            self.title = title
        if content is not None:
            self.content = content
        if tags is not None:
            self.tags = tags
        if license is not None:
            self.license = license
        if content_url is not None:
            self.content_url = content_url
        if blur_hash is not None:
            self.blur_hash = blur_hash
        if newcoin_mint_tx is not None:
            self.newcoin_mint_tx = newcoin_mint_tx
        if id is not None:
            self.id = id
        if embed is not None:
            self.embed = embed
        if updated is not None:
            self.updated = updated
        if content_type is not None:
            self.content_type = content_type
        if longitude is not None:
            self.longitude = longitude

    @property
    def cover_content_url(self):
        """Gets the cover_content_url of this PostReadResponse.  # noqa: E501


        :return: The cover_content_url of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._cover_content_url

    @cover_content_url.setter
    def cover_content_url(self, cover_content_url):
        """Sets the cover_content_url of this PostReadResponse.


        :param cover_content_url: The cover_content_url of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._cover_content_url = cover_content_url

    @property
    def mood_id(self):
        """Gets the mood_id of this PostReadResponse.  # noqa: E501


        :return: The mood_id of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._mood_id

    @mood_id.setter
    def mood_id(self, mood_id):
        """Sets the mood_id of this PostReadResponse.


        :param mood_id: The mood_id of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._mood_id = mood_id

    @property
    def created(self):
        """Gets the created of this PostReadResponse.  # noqa: E501


        :return: The created of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PostReadResponse.


        :param created: The created of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def author(self):
        """Gets the author of this PostReadResponse.  # noqa: E501


        :return: The author of this PostReadResponse.  # noqa: E501
        :rtype: MoodPagedListReadPublicResponseAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PostReadResponse.


        :param author: The author of this PostReadResponse.  # noqa: E501
        :type: MoodPagedListReadPublicResponseAuthor
        """

        self._author = author

    @property
    def latitude(self):
        """Gets the latitude of this PostReadResponse.  # noqa: E501


        :return: The latitude of this PostReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PostReadResponse.


        :param latitude: The latitude of this PostReadResponse.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def moods(self):
        """Gets the moods of this PostReadResponse.  # noqa: E501


        :return: The moods of this PostReadResponse.  # noqa: E501
        :rtype: list[MoodPagedListReadPublicResponseMoods]
        """
        return self._moods

    @moods.setter
    def moods(self, moods):
        """Sets the moods of this PostReadResponse.


        :param moods: The moods of this PostReadResponse.  # noqa: E501
        :type: list[MoodPagedListReadPublicResponseMoods]
        """

        self._moods = moods

    @property
    def description(self):
        """Gets the description of this PostReadResponse.  # noqa: E501


        :return: The description of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostReadResponse.


        :param description: The description of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this PostReadResponse.  # noqa: E501


        :return: The aspect_ratio of this PostReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this PostReadResponse.


        :param aspect_ratio: The aspect_ratio of this PostReadResponse.  # noqa: E501
        :type: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def title(self):
        """Gets the title of this PostReadResponse.  # noqa: E501


        :return: The title of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostReadResponse.


        :param title: The title of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def content(self):
        """Gets the content of this PostReadResponse.  # noqa: E501


        :return: The content of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostReadResponse.


        :param content: The content of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def tags(self):
        """Gets the tags of this PostReadResponse.  # noqa: E501


        :return: The tags of this PostReadResponse.  # noqa: E501
        :rtype: list[MoodPagedListReadPublicResponseTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostReadResponse.


        :param tags: The tags of this PostReadResponse.  # noqa: E501
        :type: list[MoodPagedListReadPublicResponseTags]
        """

        self._tags = tags

    @property
    def license(self):
        """Gets the license of this PostReadResponse.  # noqa: E501


        :return: The license of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this PostReadResponse.


        :param license: The license of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def content_url(self):
        """Gets the content_url of this PostReadResponse.  # noqa: E501


        :return: The content_url of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this PostReadResponse.


        :param content_url: The content_url of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._content_url = content_url

    @property
    def blur_hash(self):
        """Gets the blur_hash of this PostReadResponse.  # noqa: E501


        :return: The blur_hash of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._blur_hash

    @blur_hash.setter
    def blur_hash(self, blur_hash):
        """Sets the blur_hash of this PostReadResponse.


        :param blur_hash: The blur_hash of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._blur_hash = blur_hash

    @property
    def newcoin_mint_tx(self):
        """Gets the newcoin_mint_tx of this PostReadResponse.  # noqa: E501


        :return: The newcoin_mint_tx of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._newcoin_mint_tx

    @newcoin_mint_tx.setter
    def newcoin_mint_tx(self, newcoin_mint_tx):
        """Sets the newcoin_mint_tx of this PostReadResponse.


        :param newcoin_mint_tx: The newcoin_mint_tx of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._newcoin_mint_tx = newcoin_mint_tx

    @property
    def id(self):
        """Gets the id of this PostReadResponse.  # noqa: E501


        :return: The id of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostReadResponse.


        :param id: The id of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def embed(self):
        """Gets the embed of this PostReadResponse.  # noqa: E501


        :return: The embed of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this PostReadResponse.


        :param embed: The embed of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._embed = embed

    @property
    def updated(self):
        """Gets the updated of this PostReadResponse.  # noqa: E501


        :return: The updated of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PostReadResponse.


        :param updated: The updated of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def content_type(self):
        """Gets the content_type of this PostReadResponse.  # noqa: E501


        :return: The content_type of this PostReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PostReadResponse.


        :param content_type: The content_type of this PostReadResponse.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def longitude(self):
        """Gets the longitude of this PostReadResponse.  # noqa: E501


        :return: The longitude of this PostReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PostReadResponse.


        :param longitude: The longitude of this PostReadResponse.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostReadResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostReadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostReadResponse):
            return True

        return self.to_dict() != other.to_dict()
