# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CreativeSearchResponseSourceMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'summary': 'str',
        'id': 'int',
        'blog_name': 'str',
        'tags': 'list[str]',
        'short_url': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'summary': 'summary',
        'id': 'id',
        'blog_name': 'blog_name',
        'tags': 'tags',
        'short_url': 'short_url'
    }

    def __init__(self, _date=None, summary=None, id=None, blog_name=None, tags=None, short_url=None, _configuration=None):  # noqa: E501
        """CreativeSearchResponseSourceMeta - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._summary = None
        self._id = None
        self._blog_name = None
        self._tags = None
        self._short_url = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if summary is not None:
            self.summary = summary
        if id is not None:
            self.id = id
        if blog_name is not None:
            self.blog_name = blog_name
        if tags is not None:
            self.tags = tags
        if short_url is not None:
            self.short_url = short_url

    @property
    def _date(self):
        """Gets the _date of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The _date of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CreativeSearchResponseSourceMeta.


        :param _date: The _date of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def summary(self):
        """Gets the summary of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The summary of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CreativeSearchResponseSourceMeta.


        :param summary: The summary of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def id(self):
        """Gets the id of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The id of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreativeSearchResponseSourceMeta.


        :param id: The id of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def blog_name(self):
        """Gets the blog_name of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The blog_name of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: str
        """
        return self._blog_name

    @blog_name.setter
    def blog_name(self, blog_name):
        """Sets the blog_name of this CreativeSearchResponseSourceMeta.


        :param blog_name: The blog_name of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: str
        """

        self._blog_name = blog_name

    @property
    def tags(self):
        """Gets the tags of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The tags of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreativeSearchResponseSourceMeta.


        :param tags: The tags of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def short_url(self):
        """Gets the short_url of this CreativeSearchResponseSourceMeta.  # noqa: E501


        :return: The short_url of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this CreativeSearchResponseSourceMeta.


        :param short_url: The short_url of this CreativeSearchResponseSourceMeta.  # noqa: E501
        :type: str
        """

        self._short_url = short_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreativeSearchResponseSourceMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreativeSearchResponseSourceMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreativeSearchResponseSourceMeta):
            return True

        return self.to_dict() != other.to_dict()
