# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SyncContactsRequestPostalAddresses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'city': 'str',
        'street': 'str',
        'postcode': 'str',
        'label': 'str',
        'region': 'str'
    }

    attribute_map = {
        'country': 'country',
        'city': 'city',
        'street': 'street',
        'postcode': 'postcode',
        'label': 'label',
        'region': 'region'
    }

    def __init__(self, country=None, city=None, street=None, postcode=None, label=None, region=None, _configuration=None):  # noqa: E501
        """SyncContactsRequestPostalAddresses - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country = None
        self._city = None
        self._street = None
        self._postcode = None
        self._label = None
        self._region = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if street is not None:
            self.street = street
        if postcode is not None:
            self.postcode = postcode
        if label is not None:
            self.label = label
        if region is not None:
            self.region = region

    @property
    def country(self):
        """Gets the country of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The country of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SyncContactsRequestPostalAddresses.


        :param country: The country of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The city of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SyncContactsRequestPostalAddresses.


        :param city: The city of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def street(self):
        """Gets the street of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The street of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this SyncContactsRequestPostalAddresses.


        :param street: The street of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def postcode(self):
        """Gets the postcode of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The postcode of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this SyncContactsRequestPostalAddresses.


        :param postcode: The postcode of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def label(self):
        """Gets the label of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The label of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SyncContactsRequestPostalAddresses.


        :param label: The label of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def region(self):
        """Gets the region of this SyncContactsRequestPostalAddresses.  # noqa: E501


        :return: The region of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SyncContactsRequestPostalAddresses.


        :param region: The region of this SyncContactsRequestPostalAddresses.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncContactsRequestPostalAddresses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncContactsRequestPostalAddresses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SyncContactsRequestPostalAddresses):
            return True

        return self.to_dict() != other.to_dict()
