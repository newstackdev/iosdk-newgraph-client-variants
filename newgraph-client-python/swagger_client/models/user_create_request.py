# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'newcoin_ticker': 'str',
        'youtube': 'str',
        'last_name': 'str',
        'consent_privacy_policy': 'str',
        'display_name': 'str',
        'latitude': 'float',
        'description': 'str',
        'tumblr': 'str',
        'instagram': 'str',
        'medium': 'str',
        'soundcloud': 'str',
        'snapchat': 'str',
        'apple': 'str',
        'consent_testgroup': 'str',
        'twitter': 'str',
        'legacy_token': 'str',
        'tiktok': 'str',
        'reddit': 'str',
        'signal': 'str',
        'email': 'str',
        'longitude': 'float',
        'website': 'str',
        'spotify': 'str',
        'facebook': 'str',
        'full_name': 'str',
        'telegram': 'str',
        'pinterest': 'str',
        'first_name': 'str',
        'discord': 'str',
        'phone': 'str',
        'consent_email': 'str',
        'username': 'str'
    }

    attribute_map = {
        'newcoin_ticker': 'newcoinTicker',
        'youtube': 'youtube',
        'last_name': 'lastName',
        'consent_privacy_policy': 'consentPrivacyPolicy',
        'display_name': 'displayName',
        'latitude': 'latitude',
        'description': 'description',
        'tumblr': 'tumblr',
        'instagram': 'instagram',
        'medium': 'medium',
        'soundcloud': 'soundcloud',
        'snapchat': 'snapchat',
        'apple': 'apple',
        'consent_testgroup': 'consentTestgroup',
        'twitter': 'twitter',
        'legacy_token': 'legacyToken',
        'tiktok': 'tiktok',
        'reddit': 'reddit',
        'signal': 'signal',
        'email': 'email',
        'longitude': 'longitude',
        'website': 'website',
        'spotify': 'spotify',
        'facebook': 'facebook',
        'full_name': 'fullName',
        'telegram': 'telegram',
        'pinterest': 'pinterest',
        'first_name': 'firstName',
        'discord': 'discord',
        'phone': 'phone',
        'consent_email': 'consentEmail',
        'username': 'username'
    }

    def __init__(self, newcoin_ticker=None, youtube=None, last_name=None, consent_privacy_policy=None, display_name=None, latitude=None, description=None, tumblr=None, instagram=None, medium=None, soundcloud=None, snapchat=None, apple=None, consent_testgroup=None, twitter=None, legacy_token=None, tiktok=None, reddit=None, signal=None, email=None, longitude=None, website=None, spotify=None, facebook=None, full_name=None, telegram=None, pinterest=None, first_name=None, discord=None, phone=None, consent_email=None, username=None, _configuration=None):  # noqa: E501
        """UserCreateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._newcoin_ticker = None
        self._youtube = None
        self._last_name = None
        self._consent_privacy_policy = None
        self._display_name = None
        self._latitude = None
        self._description = None
        self._tumblr = None
        self._instagram = None
        self._medium = None
        self._soundcloud = None
        self._snapchat = None
        self._apple = None
        self._consent_testgroup = None
        self._twitter = None
        self._legacy_token = None
        self._tiktok = None
        self._reddit = None
        self._signal = None
        self._email = None
        self._longitude = None
        self._website = None
        self._spotify = None
        self._facebook = None
        self._full_name = None
        self._telegram = None
        self._pinterest = None
        self._first_name = None
        self._discord = None
        self._phone = None
        self._consent_email = None
        self._username = None
        self.discriminator = None

        if newcoin_ticker is not None:
            self.newcoin_ticker = newcoin_ticker
        if youtube is not None:
            self.youtube = youtube
        if last_name is not None:
            self.last_name = last_name
        if consent_privacy_policy is not None:
            self.consent_privacy_policy = consent_privacy_policy
        if display_name is not None:
            self.display_name = display_name
        if latitude is not None:
            self.latitude = latitude
        if description is not None:
            self.description = description
        if tumblr is not None:
            self.tumblr = tumblr
        if instagram is not None:
            self.instagram = instagram
        if medium is not None:
            self.medium = medium
        if soundcloud is not None:
            self.soundcloud = soundcloud
        if snapchat is not None:
            self.snapchat = snapchat
        if apple is not None:
            self.apple = apple
        if consent_testgroup is not None:
            self.consent_testgroup = consent_testgroup
        if twitter is not None:
            self.twitter = twitter
        if legacy_token is not None:
            self.legacy_token = legacy_token
        if tiktok is not None:
            self.tiktok = tiktok
        if reddit is not None:
            self.reddit = reddit
        if signal is not None:
            self.signal = signal
        if email is not None:
            self.email = email
        if longitude is not None:
            self.longitude = longitude
        if website is not None:
            self.website = website
        if spotify is not None:
            self.spotify = spotify
        if facebook is not None:
            self.facebook = facebook
        if full_name is not None:
            self.full_name = full_name
        if telegram is not None:
            self.telegram = telegram
        if pinterest is not None:
            self.pinterest = pinterest
        if first_name is not None:
            self.first_name = first_name
        if discord is not None:
            self.discord = discord
        self.phone = phone
        if consent_email is not None:
            self.consent_email = consent_email
        if username is not None:
            self.username = username

    @property
    def newcoin_ticker(self):
        """Gets the newcoin_ticker of this UserCreateRequest.  # noqa: E501


        :return: The newcoin_ticker of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._newcoin_ticker

    @newcoin_ticker.setter
    def newcoin_ticker(self, newcoin_ticker):
        """Sets the newcoin_ticker of this UserCreateRequest.


        :param newcoin_ticker: The newcoin_ticker of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._newcoin_ticker = newcoin_ticker

    @property
    def youtube(self):
        """Gets the youtube of this UserCreateRequest.  # noqa: E501


        :return: The youtube of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._youtube

    @youtube.setter
    def youtube(self, youtube):
        """Sets the youtube of this UserCreateRequest.


        :param youtube: The youtube of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._youtube = youtube

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateRequest.  # noqa: E501


        :return: The last_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateRequest.


        :param last_name: The last_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def consent_privacy_policy(self):
        """Gets the consent_privacy_policy of this UserCreateRequest.  # noqa: E501


        :return: The consent_privacy_policy of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_privacy_policy

    @consent_privacy_policy.setter
    def consent_privacy_policy(self, consent_privacy_policy):
        """Sets the consent_privacy_policy of this UserCreateRequest.


        :param consent_privacy_policy: The consent_privacy_policy of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._consent_privacy_policy = consent_privacy_policy

    @property
    def display_name(self):
        """Gets the display_name of this UserCreateRequest.  # noqa: E501


        :return: The display_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserCreateRequest.


        :param display_name: The display_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def latitude(self):
        """Gets the latitude of this UserCreateRequest.  # noqa: E501


        :return: The latitude of this UserCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this UserCreateRequest.


        :param latitude: The latitude of this UserCreateRequest.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def description(self):
        """Gets the description of this UserCreateRequest.  # noqa: E501


        :return: The description of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserCreateRequest.


        :param description: The description of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tumblr(self):
        """Gets the tumblr of this UserCreateRequest.  # noqa: E501


        :return: The tumblr of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._tumblr

    @tumblr.setter
    def tumblr(self, tumblr):
        """Sets the tumblr of this UserCreateRequest.


        :param tumblr: The tumblr of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._tumblr = tumblr

    @property
    def instagram(self):
        """Gets the instagram of this UserCreateRequest.  # noqa: E501


        :return: The instagram of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this UserCreateRequest.


        :param instagram: The instagram of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def medium(self):
        """Gets the medium of this UserCreateRequest.  # noqa: E501


        :return: The medium of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this UserCreateRequest.


        :param medium: The medium of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._medium = medium

    @property
    def soundcloud(self):
        """Gets the soundcloud of this UserCreateRequest.  # noqa: E501


        :return: The soundcloud of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._soundcloud

    @soundcloud.setter
    def soundcloud(self, soundcloud):
        """Sets the soundcloud of this UserCreateRequest.


        :param soundcloud: The soundcloud of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._soundcloud = soundcloud

    @property
    def snapchat(self):
        """Gets the snapchat of this UserCreateRequest.  # noqa: E501


        :return: The snapchat of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._snapchat

    @snapchat.setter
    def snapchat(self, snapchat):
        """Sets the snapchat of this UserCreateRequest.


        :param snapchat: The snapchat of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._snapchat = snapchat

    @property
    def apple(self):
        """Gets the apple of this UserCreateRequest.  # noqa: E501


        :return: The apple of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._apple

    @apple.setter
    def apple(self, apple):
        """Sets the apple of this UserCreateRequest.


        :param apple: The apple of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._apple = apple

    @property
    def consent_testgroup(self):
        """Gets the consent_testgroup of this UserCreateRequest.  # noqa: E501


        :return: The consent_testgroup of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_testgroup

    @consent_testgroup.setter
    def consent_testgroup(self, consent_testgroup):
        """Sets the consent_testgroup of this UserCreateRequest.


        :param consent_testgroup: The consent_testgroup of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._consent_testgroup = consent_testgroup

    @property
    def twitter(self):
        """Gets the twitter of this UserCreateRequest.  # noqa: E501


        :return: The twitter of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this UserCreateRequest.


        :param twitter: The twitter of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def legacy_token(self):
        """Gets the legacy_token of this UserCreateRequest.  # noqa: E501


        :return: The legacy_token of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._legacy_token

    @legacy_token.setter
    def legacy_token(self, legacy_token):
        """Sets the legacy_token of this UserCreateRequest.


        :param legacy_token: The legacy_token of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._legacy_token = legacy_token

    @property
    def tiktok(self):
        """Gets the tiktok of this UserCreateRequest.  # noqa: E501


        :return: The tiktok of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._tiktok

    @tiktok.setter
    def tiktok(self, tiktok):
        """Sets the tiktok of this UserCreateRequest.


        :param tiktok: The tiktok of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._tiktok = tiktok

    @property
    def reddit(self):
        """Gets the reddit of this UserCreateRequest.  # noqa: E501


        :return: The reddit of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._reddit

    @reddit.setter
    def reddit(self, reddit):
        """Sets the reddit of this UserCreateRequest.


        :param reddit: The reddit of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._reddit = reddit

    @property
    def signal(self):
        """Gets the signal of this UserCreateRequest.  # noqa: E501


        :return: The signal of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this UserCreateRequest.


        :param signal: The signal of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._signal = signal

    @property
    def email(self):
        """Gets the email of this UserCreateRequest.  # noqa: E501


        :return: The email of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateRequest.


        :param email: The email of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def longitude(self):
        """Gets the longitude of this UserCreateRequest.  # noqa: E501


        :return: The longitude of this UserCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this UserCreateRequest.


        :param longitude: The longitude of this UserCreateRequest.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def website(self):
        """Gets the website of this UserCreateRequest.  # noqa: E501


        :return: The website of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this UserCreateRequest.


        :param website: The website of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def spotify(self):
        """Gets the spotify of this UserCreateRequest.  # noqa: E501


        :return: The spotify of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._spotify

    @spotify.setter
    def spotify(self, spotify):
        """Sets the spotify of this UserCreateRequest.


        :param spotify: The spotify of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._spotify = spotify

    @property
    def facebook(self):
        """Gets the facebook of this UserCreateRequest.  # noqa: E501


        :return: The facebook of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this UserCreateRequest.


        :param facebook: The facebook of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def full_name(self):
        """Gets the full_name of this UserCreateRequest.  # noqa: E501


        :return: The full_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserCreateRequest.


        :param full_name: The full_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def telegram(self):
        """Gets the telegram of this UserCreateRequest.  # noqa: E501


        :return: The telegram of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._telegram

    @telegram.setter
    def telegram(self, telegram):
        """Sets the telegram of this UserCreateRequest.


        :param telegram: The telegram of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._telegram = telegram

    @property
    def pinterest(self):
        """Gets the pinterest of this UserCreateRequest.  # noqa: E501


        :return: The pinterest of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._pinterest

    @pinterest.setter
    def pinterest(self, pinterest):
        """Sets the pinterest of this UserCreateRequest.


        :param pinterest: The pinterest of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._pinterest = pinterest

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateRequest.  # noqa: E501


        :return: The first_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateRequest.


        :param first_name: The first_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def discord(self):
        """Gets the discord of this UserCreateRequest.  # noqa: E501


        :return: The discord of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this UserCreateRequest.


        :param discord: The discord of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._discord = discord

    @property
    def phone(self):
        """Gets the phone of this UserCreateRequest.  # noqa: E501


        :return: The phone of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserCreateRequest.


        :param phone: The phone of this UserCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def consent_email(self):
        """Gets the consent_email of this UserCreateRequest.  # noqa: E501


        :return: The consent_email of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_email

    @consent_email.setter
    def consent_email(self, consent_email):
        """Sets the consent_email of this UserCreateRequest.


        :param consent_email: The consent_email of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._consent_email = consent_email

    @property
    def username(self):
        """Gets the username of this UserCreateRequest.  # noqa: E501


        :return: The username of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserCreateRequest.


        :param username: The username of this UserCreateRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                username is not None and not re.search(r'^[a-z0-5\\.]{2,9}\\.io$', username)):  # noqa: E501
            raise ValueError(r"Invalid value for `username`, must be a follow pattern or equal to `/^[a-z0-5\\.]{2,9}\\.io$/`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
