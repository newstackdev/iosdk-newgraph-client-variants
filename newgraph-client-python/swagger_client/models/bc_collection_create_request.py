# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BcCollectionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mkt_fee': 'float',
        'template_name': 'str',
        'template_fields': 'list[BcCollectionCreateRequestTemplateFields]',
        'xferable': 'bool',
        'max_supply': 'float',
        'allow_notify': 'bool',
        'burnable': 'bool',
        'schema_name': 'str',
        'schema_fields': 'list[BcCollectionCreateRequestTemplateFields]',
        'user': 'str',
        'user_prv_active_key': 'str',
        'collection_name': 'str'
    }

    attribute_map = {
        'mkt_fee': 'mkt_fee',
        'template_name': 'template_name',
        'template_fields': 'template_fields',
        'xferable': 'xferable',
        'max_supply': 'max_supply',
        'allow_notify': 'allow_notify',
        'burnable': 'burnable',
        'schema_name': 'schema_name',
        'schema_fields': 'schema_fields',
        'user': 'user',
        'user_prv_active_key': 'user_prv_active_key',
        'collection_name': 'collection_name'
    }

    def __init__(self, mkt_fee=None, template_name=None, template_fields=None, xferable=None, max_supply=None, allow_notify=None, burnable=None, schema_name=None, schema_fields=None, user=None, user_prv_active_key=None, collection_name=None, _configuration=None):  # noqa: E501
        """BcCollectionCreateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mkt_fee = None
        self._template_name = None
        self._template_fields = None
        self._xferable = None
        self._max_supply = None
        self._allow_notify = None
        self._burnable = None
        self._schema_name = None
        self._schema_fields = None
        self._user = None
        self._user_prv_active_key = None
        self._collection_name = None
        self.discriminator = None

        if mkt_fee is not None:
            self.mkt_fee = mkt_fee
        self.template_name = template_name
        self.template_fields = template_fields
        if xferable is not None:
            self.xferable = xferable
        if max_supply is not None:
            self.max_supply = max_supply
        if allow_notify is not None:
            self.allow_notify = allow_notify
        if burnable is not None:
            self.burnable = burnable
        self.schema_name = schema_name
        self.schema_fields = schema_fields
        self.user = user
        self.user_prv_active_key = user_prv_active_key
        self.collection_name = collection_name

    @property
    def mkt_fee(self):
        """Gets the mkt_fee of this BcCollectionCreateRequest.  # noqa: E501


        :return: The mkt_fee of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._mkt_fee

    @mkt_fee.setter
    def mkt_fee(self, mkt_fee):
        """Sets the mkt_fee of this BcCollectionCreateRequest.


        :param mkt_fee: The mkt_fee of this BcCollectionCreateRequest.  # noqa: E501
        :type: float
        """

        self._mkt_fee = mkt_fee

    @property
    def template_name(self):
        """Gets the template_name of this BcCollectionCreateRequest.  # noqa: E501


        :return: The template_name of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this BcCollectionCreateRequest.


        :param template_name: The template_name of this BcCollectionCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501

        self._template_name = template_name

    @property
    def template_fields(self):
        """Gets the template_fields of this BcCollectionCreateRequest.  # noqa: E501


        :return: The template_fields of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: list[BcCollectionCreateRequestTemplateFields]
        """
        return self._template_fields

    @template_fields.setter
    def template_fields(self, template_fields):
        """Sets the template_fields of this BcCollectionCreateRequest.


        :param template_fields: The template_fields of this BcCollectionCreateRequest.  # noqa: E501
        :type: list[BcCollectionCreateRequestTemplateFields]
        """
        if self._configuration.client_side_validation and template_fields is None:
            raise ValueError("Invalid value for `template_fields`, must not be `None`")  # noqa: E501

        self._template_fields = template_fields

    @property
    def xferable(self):
        """Gets the xferable of this BcCollectionCreateRequest.  # noqa: E501


        :return: The xferable of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._xferable

    @xferable.setter
    def xferable(self, xferable):
        """Sets the xferable of this BcCollectionCreateRequest.


        :param xferable: The xferable of this BcCollectionCreateRequest.  # noqa: E501
        :type: bool
        """

        self._xferable = xferable

    @property
    def max_supply(self):
        """Gets the max_supply of this BcCollectionCreateRequest.  # noqa: E501


        :return: The max_supply of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._max_supply

    @max_supply.setter
    def max_supply(self, max_supply):
        """Sets the max_supply of this BcCollectionCreateRequest.


        :param max_supply: The max_supply of this BcCollectionCreateRequest.  # noqa: E501
        :type: float
        """

        self._max_supply = max_supply

    @property
    def allow_notify(self):
        """Gets the allow_notify of this BcCollectionCreateRequest.  # noqa: E501


        :return: The allow_notify of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_notify

    @allow_notify.setter
    def allow_notify(self, allow_notify):
        """Sets the allow_notify of this BcCollectionCreateRequest.


        :param allow_notify: The allow_notify of this BcCollectionCreateRequest.  # noqa: E501
        :type: bool
        """

        self._allow_notify = allow_notify

    @property
    def burnable(self):
        """Gets the burnable of this BcCollectionCreateRequest.  # noqa: E501


        :return: The burnable of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._burnable

    @burnable.setter
    def burnable(self, burnable):
        """Sets the burnable of this BcCollectionCreateRequest.


        :param burnable: The burnable of this BcCollectionCreateRequest.  # noqa: E501
        :type: bool
        """

        self._burnable = burnable

    @property
    def schema_name(self):
        """Gets the schema_name of this BcCollectionCreateRequest.  # noqa: E501


        :return: The schema_name of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this BcCollectionCreateRequest.


        :param schema_name: The schema_name of this BcCollectionCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def schema_fields(self):
        """Gets the schema_fields of this BcCollectionCreateRequest.  # noqa: E501


        :return: The schema_fields of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: list[BcCollectionCreateRequestTemplateFields]
        """
        return self._schema_fields

    @schema_fields.setter
    def schema_fields(self, schema_fields):
        """Sets the schema_fields of this BcCollectionCreateRequest.


        :param schema_fields: The schema_fields of this BcCollectionCreateRequest.  # noqa: E501
        :type: list[BcCollectionCreateRequestTemplateFields]
        """
        if self._configuration.client_side_validation and schema_fields is None:
            raise ValueError("Invalid value for `schema_fields`, must not be `None`")  # noqa: E501

        self._schema_fields = schema_fields

    @property
    def user(self):
        """Gets the user of this BcCollectionCreateRequest.  # noqa: E501


        :return: The user of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BcCollectionCreateRequest.


        :param user: The user of this BcCollectionCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def user_prv_active_key(self):
        """Gets the user_prv_active_key of this BcCollectionCreateRequest.  # noqa: E501


        :return: The user_prv_active_key of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_prv_active_key

    @user_prv_active_key.setter
    def user_prv_active_key(self, user_prv_active_key):
        """Sets the user_prv_active_key of this BcCollectionCreateRequest.


        :param user_prv_active_key: The user_prv_active_key of this BcCollectionCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_prv_active_key is None:
            raise ValueError("Invalid value for `user_prv_active_key`, must not be `None`")  # noqa: E501

        self._user_prv_active_key = user_prv_active_key

    @property
    def collection_name(self):
        """Gets the collection_name of this BcCollectionCreateRequest.  # noqa: E501


        :return: The collection_name of this BcCollectionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this BcCollectionCreateRequest.


        :param collection_name: The collection_name of this BcCollectionCreateRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and collection_name is None:
            raise ValueError("Invalid value for `collection_name`, must not be `None`")  # noqa: E501

        self._collection_name = collection_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcCollectionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcCollectionCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BcCollectionCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
