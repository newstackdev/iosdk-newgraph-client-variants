# coding: utf-8

"""
    newgraph-api-eu-dev

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2022-10-04T15:34:01Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BcDaoProposalExecuteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proposal_author': 'str',
        'proposal_id': 'float',
        'dao_id': 'str',
        'dao_owner': 'str',
        '_exec': 'str',
        'exec_prv_key': 'str'
    }

    attribute_map = {
        'proposal_author': 'proposal_author',
        'proposal_id': 'proposal_id',
        'dao_id': 'dao_id',
        'dao_owner': 'dao_owner',
        '_exec': 'exec',
        'exec_prv_key': 'exec_prv_key'
    }

    def __init__(self, proposal_author=None, proposal_id=None, dao_id=None, dao_owner=None, _exec=None, exec_prv_key=None, _configuration=None):  # noqa: E501
        """BcDaoProposalExecuteRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._proposal_author = None
        self._proposal_id = None
        self._dao_id = None
        self._dao_owner = None
        self.__exec = None
        self._exec_prv_key = None
        self.discriminator = None

        if proposal_author is not None:
            self.proposal_author = proposal_author
        if proposal_id is not None:
            self.proposal_id = proposal_id
        if dao_id is not None:
            self.dao_id = dao_id
        if dao_owner is not None:
            self.dao_owner = dao_owner
        if _exec is not None:
            self._exec = _exec
        if exec_prv_key is not None:
            self.exec_prv_key = exec_prv_key

    @property
    def proposal_author(self):
        """Gets the proposal_author of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The proposal_author of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: str
        """
        return self._proposal_author

    @proposal_author.setter
    def proposal_author(self, proposal_author):
        """Sets the proposal_author of this BcDaoProposalExecuteRequest.


        :param proposal_author: The proposal_author of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: str
        """

        self._proposal_author = proposal_author

    @property
    def proposal_id(self):
        """Gets the proposal_id of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The proposal_id of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: float
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this BcDaoProposalExecuteRequest.


        :param proposal_id: The proposal_id of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: float
        """

        self._proposal_id = proposal_id

    @property
    def dao_id(self):
        """Gets the dao_id of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The dao_id of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: str
        """
        return self._dao_id

    @dao_id.setter
    def dao_id(self, dao_id):
        """Sets the dao_id of this BcDaoProposalExecuteRequest.


        :param dao_id: The dao_id of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: str
        """

        self._dao_id = dao_id

    @property
    def dao_owner(self):
        """Gets the dao_owner of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The dao_owner of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: str
        """
        return self._dao_owner

    @dao_owner.setter
    def dao_owner(self, dao_owner):
        """Sets the dao_owner of this BcDaoProposalExecuteRequest.


        :param dao_owner: The dao_owner of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: str
        """

        self._dao_owner = dao_owner

    @property
    def _exec(self):
        """Gets the _exec of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The _exec of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: str
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this BcDaoProposalExecuteRequest.


        :param _exec: The _exec of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: str
        """

        self.__exec = _exec

    @property
    def exec_prv_key(self):
        """Gets the exec_prv_key of this BcDaoProposalExecuteRequest.  # noqa: E501


        :return: The exec_prv_key of this BcDaoProposalExecuteRequest.  # noqa: E501
        :rtype: str
        """
        return self._exec_prv_key

    @exec_prv_key.setter
    def exec_prv_key(self, exec_prv_key):
        """Sets the exec_prv_key of this BcDaoProposalExecuteRequest.


        :param exec_prv_key: The exec_prv_key of this BcDaoProposalExecuteRequest.  # noqa: E501
        :type: str
        """

        self._exec_prv_key = exec_prv_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BcDaoProposalExecuteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BcDaoProposalExecuteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BcDaoProposalExecuteRequest):
            return True

        return self.to_dict() != other.to_dict()
